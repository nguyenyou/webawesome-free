{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "custom-elements-manifest.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "custom-elements-manifest.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "scripts/build.js",
      "declarations": [
        {
          "kind": "function",
          "name": "build",
          "parameters": [
            {
              "name": "options",
              "default": "{}",
              "optional": true,
              "type": {
                "text": "BuildOptions"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "build",
          "declaration": {
            "name": "build",
            "module": "scripts/build.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "scripts/docs.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "scripts/generate-component-index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "scripts/make-react.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "scripts/shared.js",
      "declarations": [
        {
          "kind": "function",
          "name": "getAllComponents",
          "parameters": [
            {
              "name": "metadata"
            }
          ],
          "description": "Gets an array of components from a CEM object."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getAllComponents",
          "declaration": {
            "name": "getAllComponents",
            "module": "scripts/shared.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "scripts/update-css-inline.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "scripts/utils.js",
      "declarations": [
        {
          "kind": "function",
          "name": "getRootDir"
        },
        {
          "kind": "function",
          "name": "getDistDir"
        },
        {
          "kind": "function",
          "name": "getCdnDir"
        },
        {
          "kind": "function",
          "name": "getDocsDir"
        },
        {
          "kind": "function",
          "name": "getSiteDir"
        },
        {
          "kind": "function",
          "name": "getEleventyConfigPath"
        },
        {
          "kind": "function",
          "name": "runScript",
          "parameters": [
            {
              "name": "scriptPath"
            },
            {
              "name": "args",
              "default": "[]"
            },
            {
              "name": "options",
              "default": "{}"
            }
          ],
          "description": "Runs a script and returns a promise that resolves with the content of stdout when the script exits or rejects with\nthe content of stderr when the script exits with an error."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getRootDir",
          "declaration": {
            "name": "getRootDir",
            "module": "scripts/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "getDistDir",
          "declaration": {
            "name": "getDistDir",
            "module": "scripts/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "getCdnDir",
          "declaration": {
            "name": "getCdnDir",
            "module": "scripts/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "getDocsDir",
          "declaration": {
            "name": "getDocsDir",
            "module": "scripts/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "getSiteDir",
          "declaration": {
            "name": "getSiteDir",
            "module": "scripts/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "getEleventyConfigPath",
          "declaration": {
            "name": "getEleventyConfigPath",
            "module": "scripts/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "runScript",
          "declaration": {
            "name": "runScript",
            "module": "scripts/utils.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/animated-image/animated-image.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/animation/animation.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/animation/animations.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/avatar/avatar.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/badge/badge.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/breadcrumb/breadcrumb.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/breadcrumb-item/breadcrumb-item.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/button/button.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/button-group/button-group.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/callout/callout.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/card/card.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/carousel/autoplay-controller.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/carousel/carousel.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/carousel/scroll-controller.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/carousel-item/carousel-item.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/checkbox/checkbox.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/color-picker/color-picker.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/comparison/comparison.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/copy-button/copy-button.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/details/details.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/dialog/dialog.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/divider/divider.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/drawer/drawer.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/dropdown/dropdown.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/dropdown-item/dropdown-item.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/format-bytes/format-bytes.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/format-date/format-date.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/format-number/format-number.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/icon/icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/icon/library.default.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/icon/library.system.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/icon/library.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/include/include.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/include/request.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/input/input.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/mutation-observer/mutation-observer.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/option/option.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/page/page.mobile.styles.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/page/page.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/popover/popover.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/popup/popup.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/progress-bar/progress-bar.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/progress-ring/progress-ring.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/qr-code/qr-code.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/radio/radio.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/radio-group/radio-group.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/rating/rating.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/relative-time/relative-time.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/resize-observer/resize-observer.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/scroller/scroller.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/select/select.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/skeleton/skeleton.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/slider/slider.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/spinner/spinner.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/split-panel/split-panel.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/switch/switch.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/tab/tab.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/tab-group/tab-group.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/tab-panel/tab-panel.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/tag/tag.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/textarea/textarea.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/tooltip/tooltip.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/tree/tree.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/tree-item/tree-item.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/zoomable-frame/zoomable-frame.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/my-element.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An example element.",
          "name": "MyElement",
          "cssParts": [
            {
              "description": "The button",
              "name": "button"
            }
          ],
          "slots": [
            {
              "description": "This element has a slot",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "docsHint",
              "type": {
                "text": "string"
              },
              "default": "'Click on the Vite and Lit logos to learn more'",
              "description": "Copy for the read the docs hint."
            },
            {
              "kind": "field",
              "name": "count",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of times the button has been clicked."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "_onClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "css` :host { max-width: 1280px; margin: 0 auto; padding: 2rem; text-align: center; } .logo { height: 6em; padding: 1.5em; will-change: filter; transition: filter 300ms; } .logo:hover { filter: drop-shadow(0 0 2em #646cffaa); } .logo.lit:hover { filter: drop-shadow(0 0 2em #325cffaa); } .card { padding: 2em; } .read-the-docs { color: #888; } ::slotted(h1) { font-size: 3.2em; line-height: 1.1; } a { font-weight: 500; color: #646cff; text-decoration: inherit; } a:hover { color: #535bf2; } button { border-radius: 8px; border: 1px solid transparent; padding: 0.6em 1.2em; font-size: 1em; font-weight: 500; font-family: inherit; background-color: #1a1a1a; cursor: pointer; transition: border-color 0.25s; } button:hover { border-color: #646cff; } button:focus, button:focus-visible { outline: 4px auto -webkit-focus-ring-color; } @media (prefers-color-scheme: light) { a:hover { color: #747bff; } button { background-color: #f9f9f9; } } `"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MyElement",
          "declaration": {
            "name": "MyElement",
            "module": "src/my-element.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/webawesome.loader.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./webawesome.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/webawesome.ssr-loader.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./webawesome.loader.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/webawesome.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "getDefaultIconFamily",
          "declaration": {
            "name": "getDefaultIconFamily",
            "module": "./components/icon/library.js"
          }
        },
        {
          "kind": "js",
          "name": "registerIconLibrary",
          "declaration": {
            "name": "registerIconLibrary",
            "module": "./components/icon/library.js"
          }
        },
        {
          "kind": "js",
          "name": "setDefaultIconFamily",
          "declaration": {
            "name": "setDefaultIconFamily",
            "module": "./components/icon/library.js"
          }
        },
        {
          "kind": "js",
          "name": "unregisterIconLibrary",
          "declaration": {
            "name": "unregisterIconLibrary",
            "module": "./components/icon/library.js"
          }
        },
        {
          "kind": "js",
          "name": "discover",
          "declaration": {
            "name": "discover",
            "module": "./utilities/autoloader.js"
          }
        },
        {
          "kind": "js",
          "name": "preventTurboFouce",
          "declaration": {
            "name": "preventTurboFouce",
            "module": "./utilities/autoloader.js"
          }
        },
        {
          "kind": "js",
          "name": "startLoader",
          "declaration": {
            "name": "startLoader",
            "module": "./utilities/autoloader.js"
          }
        },
        {
          "kind": "js",
          "name": "stopLoader",
          "declaration": {
            "name": "stopLoader",
            "module": "./utilities/autoloader.js"
          }
        },
        {
          "kind": "js",
          "name": "getBasePath",
          "declaration": {
            "name": "getBasePath",
            "module": "./utilities/base-path.js"
          }
        },
        {
          "kind": "js",
          "name": "getKitCode",
          "declaration": {
            "name": "getKitCode",
            "module": "./utilities/base-path.js"
          }
        },
        {
          "kind": "js",
          "name": "setBasePath",
          "declaration": {
            "name": "setBasePath",
            "module": "./utilities/base-path.js"
          }
        },
        {
          "kind": "js",
          "name": "setKitCode",
          "declaration": {
            "name": "setKitCode",
            "module": "./utilities/base-path.js"
          }
        },
        {
          "kind": "js",
          "name": "allDefined",
          "declaration": {
            "name": "allDefined",
            "module": "./utilities/defined.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utilities/base-path.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utilities/form.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./events/events.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "scripts/plop/plopfile.js",
      "declarations": [
        {
          "kind": "function",
          "name": "",
          "parameters": [
            {
              "name": "plop"
            }
          ]
        },
        {
          "kind": "function",
          "name": ""
        },
        {
          "kind": "function",
          "name": ""
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "",
            "module": "scripts/plop/plopfile.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/after-collapse.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaAfterCollapseEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events/after-collapse.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaAfterCollapseEvent",
          "declaration": {
            "name": "WaAfterCollapseEvent",
            "module": "src/events/after-collapse.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/after-expand.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaAfterExpandEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events/after-expand.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaAfterExpandEvent",
          "declaration": {
            "name": "WaAfterExpandEvent",
            "module": "src/events/after-expand.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/after-hide.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaAfterHideEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events/after-hide.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaAfterHideEvent",
          "declaration": {
            "name": "WaAfterHideEvent",
            "module": "src/events/after-hide.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/after-show.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaAfterShowEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events/after-show.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaAfterShowEvent",
          "declaration": {
            "name": "WaAfterShowEvent",
            "module": "src/events/after-show.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/cancel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaCancelEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events/cancel.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaCancelEvent",
          "declaration": {
            "name": "WaCancelEvent",
            "module": "src/events/cancel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/clear.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaClearEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events/clear.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaClearEvent",
          "declaration": {
            "name": "WaClearEvent",
            "module": "src/events/clear.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/collapse.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaCollapseEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events/collapse.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaCollapseEvent",
          "declaration": {
            "name": "WaCollapseEvent",
            "module": "src/events/collapse.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/copy.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaCopyEvent",
          "members": [
            {
              "kind": "field",
              "name": "detail",
              "type": {
                "text": "WaCopyErrorEventDetail"
              },
              "readonly": true,
              "default": "detail"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "src/events/copy.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaCopyEvent",
          "declaration": {
            "name": "WaCopyEvent",
            "module": "src/events/copy.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/error.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaErrorEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events/error.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaErrorEvent",
          "declaration": {
            "name": "WaErrorEvent",
            "module": "src/events/error.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/events.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "WaAfterCollapseEvent",
          "declaration": {
            "name": "WaAfterCollapseEvent",
            "module": "./after-collapse.js"
          }
        },
        {
          "kind": "js",
          "name": "WaAfterExpandEvent",
          "declaration": {
            "name": "WaAfterExpandEvent",
            "module": "./after-expand.js"
          }
        },
        {
          "kind": "js",
          "name": "WaAfterHideEvent",
          "declaration": {
            "name": "WaAfterHideEvent",
            "module": "./after-hide.js"
          }
        },
        {
          "kind": "js",
          "name": "WaAfterShowEvent",
          "declaration": {
            "name": "WaAfterShowEvent",
            "module": "./after-show.js"
          }
        },
        {
          "kind": "js",
          "name": "WaCancelEvent",
          "declaration": {
            "name": "WaCancelEvent",
            "module": "./cancel.js"
          }
        },
        {
          "kind": "js",
          "name": "WaClearEvent",
          "declaration": {
            "name": "WaClearEvent",
            "module": "./clear.js"
          }
        },
        {
          "kind": "js",
          "name": "WaCollapseEvent",
          "declaration": {
            "name": "WaCollapseEvent",
            "module": "./collapse.js"
          }
        },
        {
          "kind": "js",
          "name": "WaCopyEvent",
          "declaration": {
            "name": "WaCopyEvent",
            "module": "./copy.js"
          }
        },
        {
          "kind": "js",
          "name": "WaErrorEvent",
          "declaration": {
            "name": "WaErrorEvent",
            "module": "./error.js"
          }
        },
        {
          "kind": "js",
          "name": "WaExpandEvent",
          "declaration": {
            "name": "WaExpandEvent",
            "module": "./expand.js"
          }
        },
        {
          "kind": "js",
          "name": "WaFinishEvent",
          "declaration": {
            "name": "WaFinishEvent",
            "module": "./finish.js"
          }
        },
        {
          "kind": "js",
          "name": "WaHideEvent",
          "declaration": {
            "name": "WaHideEvent",
            "module": "./hide.js"
          }
        },
        {
          "kind": "js",
          "name": "WaHoverEvent",
          "declaration": {
            "name": "WaHoverEvent",
            "module": "./hover.js"
          }
        },
        {
          "kind": "js",
          "name": "WaInvalidEvent",
          "declaration": {
            "name": "WaInvalidEvent",
            "module": "./invalid.js"
          }
        },
        {
          "kind": "js",
          "name": "WaLazyChangeEvent",
          "declaration": {
            "name": "WaLazyChangeEvent",
            "module": "./lazy-change.js"
          }
        },
        {
          "kind": "js",
          "name": "WaLazyLoadEvent",
          "declaration": {
            "name": "WaLazyLoadEvent",
            "module": "./lazy-load.js"
          }
        },
        {
          "kind": "js",
          "name": "WaLoadEvent",
          "declaration": {
            "name": "WaLoadEvent",
            "module": "./load.js"
          }
        },
        {
          "kind": "js",
          "name": "WaMutationEvent",
          "declaration": {
            "name": "WaMutationEvent",
            "module": "./mutation.js"
          }
        },
        {
          "kind": "js",
          "name": "WaRemoveEvent",
          "declaration": {
            "name": "WaRemoveEvent",
            "module": "./remove.js"
          }
        },
        {
          "kind": "js",
          "name": "WaRepositionEvent",
          "declaration": {
            "name": "WaRepositionEvent",
            "module": "./reposition.js"
          }
        },
        {
          "kind": "js",
          "name": "WaResizeEvent",
          "declaration": {
            "name": "WaResizeEvent",
            "module": "./resize.js"
          }
        },
        {
          "kind": "js",
          "name": "WaSelectEvent",
          "declaration": {
            "name": "WaSelectEvent",
            "module": "./select.js"
          }
        },
        {
          "kind": "js",
          "name": "WaSelectionChangeEvent",
          "declaration": {
            "name": "WaSelectionChangeEvent",
            "module": "./selection-change.js"
          }
        },
        {
          "kind": "js",
          "name": "WaShowEvent",
          "declaration": {
            "name": "WaShowEvent",
            "module": "./show.js"
          }
        },
        {
          "kind": "js",
          "name": "WaSlideChangeEvent",
          "declaration": {
            "name": "WaSlideChangeEvent",
            "module": "./slide-change.js"
          }
        },
        {
          "kind": "js",
          "name": "WaStartEvent",
          "declaration": {
            "name": "WaStartEvent",
            "module": "./start.js"
          }
        },
        {
          "kind": "js",
          "name": "WaTabHideEvent",
          "declaration": {
            "name": "WaTabHideEvent",
            "module": "./tab-hide.js"
          }
        },
        {
          "kind": "js",
          "name": "WaTabShowEvent",
          "declaration": {
            "name": "WaTabShowEvent",
            "module": "./tab-show.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/expand.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaExpandEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events/expand.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaExpandEvent",
          "declaration": {
            "name": "WaExpandEvent",
            "module": "src/events/expand.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/finish.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaFinishEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events/finish.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaFinishEvent",
          "declaration": {
            "name": "WaFinishEvent",
            "module": "src/events/finish.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/hide.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaHideEvent",
          "members": [
            {
              "kind": "field",
              "name": "detail",
              "type": {
                "text": "WaHideEventDetails | undefined"
              },
              "readonly": true,
              "default": "detail"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "src/events/hide.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaHideEvent",
          "declaration": {
            "name": "WaHideEvent",
            "module": "src/events/hide.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/hover.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaHoverEvent",
          "members": [
            {
              "kind": "field",
              "name": "detail",
              "type": {
                "text": "WaHoverEventDetail"
              },
              "readonly": true,
              "default": "detail"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "src/events/hover.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaHoverEvent",
          "declaration": {
            "name": "WaHoverEvent",
            "module": "src/events/hover.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/include-error.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaIncludeErrorEvent",
          "members": [
            {
              "kind": "field",
              "name": "detail",
              "type": {
                "text": "WaIncludeErrorDetail"
              },
              "readonly": true,
              "default": "detail"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "src/events/include-error.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaIncludeErrorEvent",
          "declaration": {
            "name": "WaIncludeErrorEvent",
            "module": "src/events/include-error.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/invalid.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaInvalidEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events/invalid.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaInvalidEvent",
          "declaration": {
            "name": "WaInvalidEvent",
            "module": "src/events/invalid.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/lazy-change.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaLazyChangeEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events/lazy-change.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaLazyChangeEvent",
          "declaration": {
            "name": "WaLazyChangeEvent",
            "module": "src/events/lazy-change.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/lazy-load.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaLazyLoadEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events/lazy-load.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaLazyLoadEvent",
          "declaration": {
            "name": "WaLazyLoadEvent",
            "module": "src/events/lazy-load.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/load.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaLoadEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events/load.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaLoadEvent",
          "declaration": {
            "name": "WaLoadEvent",
            "module": "src/events/load.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/mutation.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaMutationEvent",
          "members": [
            {
              "kind": "field",
              "name": "detail",
              "type": {
                "text": "WaMutationEventDetail"
              },
              "readonly": true,
              "default": "detail"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "src/events/mutation.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaMutationEvent",
          "declaration": {
            "name": "WaMutationEvent",
            "module": "src/events/mutation.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/remove.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaRemoveEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events/remove.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaRemoveEvent",
          "declaration": {
            "name": "WaRemoveEvent",
            "module": "src/events/remove.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/reposition.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaRepositionEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events/reposition.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaRepositionEvent",
          "declaration": {
            "name": "WaRepositionEvent",
            "module": "src/events/reposition.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/resize.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaResizeEvent",
          "members": [
            {
              "kind": "field",
              "name": "detail",
              "type": {
                "text": "WaResizeEventDetail"
              },
              "readonly": true,
              "default": "detail"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "src/events/resize.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaResizeEvent",
          "declaration": {
            "name": "WaResizeEvent",
            "module": "src/events/resize.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaSelectEvent",
          "members": [
            {
              "kind": "field",
              "name": "detail",
              "readonly": true,
              "default": "detail"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "src/events/select.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaSelectEvent",
          "declaration": {
            "name": "WaSelectEvent",
            "module": "src/events/select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/selection-change.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaSelectionChangeEvent",
          "members": [
            {
              "kind": "field",
              "name": "detail",
              "type": {
                "text": "WaSelectionChangeEventDetail"
              },
              "readonly": true,
              "default": "detail"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "src/events/selection-change.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaSelectionChangeEvent",
          "declaration": {
            "name": "WaSelectionChangeEvent",
            "module": "src/events/selection-change.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/show.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaShowEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events/show.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaShowEvent",
          "declaration": {
            "name": "WaShowEvent",
            "module": "src/events/show.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/slide-change.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaSlideChangeEvent",
          "members": [
            {
              "kind": "field",
              "name": "detail",
              "type": {
                "text": "WaSlideChangeEventDetails"
              },
              "readonly": true,
              "default": "detail"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "src/events/slide-change.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaSlideChangeEvent",
          "declaration": {
            "name": "WaSlideChangeEvent",
            "module": "src/events/slide-change.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/start.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaStartEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events/start.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaStartEvent",
          "declaration": {
            "name": "WaStartEvent",
            "module": "src/events/start.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/tab-hide.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaTabHideEvent",
          "members": [
            {
              "kind": "field",
              "name": "detail",
              "type": {
                "text": "WaTabHideEventDetail"
              },
              "readonly": true,
              "default": "detail"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "src/events/tab-hide.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaTabHideEvent",
          "declaration": {
            "name": "WaTabHideEvent",
            "module": "src/events/tab-hide.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events/tab-show.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaTabShowEvent",
          "members": [
            {
              "kind": "field",
              "name": "detail",
              "type": {
                "text": "WaTabShowEventDetail"
              },
              "readonly": true,
              "default": "detail"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "src/events/tab-show.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaTabShowEvent",
          "declaration": {
            "name": "WaTabShowEvent",
            "module": "src/events/tab-show.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/active-elements.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "activeElements",
          "return": {
            "type": {
              "text": "Generator<Element>"
            }
          },
          "parameters": [
            {
              "name": "activeElement",
              "default": "document.activeElement",
              "type": {
                "text": "Element | null"
              }
            }
          ],
          "description": "Use a generator so we can iterate and possibly break early."
        },
        {
          "kind": "function",
          "name": "getDeepestActiveElement"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "activeElements",
          "declaration": {
            "name": "activeElements",
            "module": "src/internal/active-elements.ts"
          }
        },
        {
          "kind": "js",
          "name": "getDeepestActiveElement",
          "declaration": {
            "name": "getDeepestActiveElement",
            "module": "src/internal/active-elements.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/animate.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "animate",
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "Element"
              }
            },
            {
              "name": "keyframes",
              "type": {
                "text": "Keyframe[]"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "KeyframeAnimationOptions"
              }
            }
          ],
          "description": "Same as `el.animate()`, except returns a promise that doesn't throw an error when the animation is canceled."
        },
        {
          "kind": "function",
          "name": "animateWithClass",
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "Element"
              }
            },
            {
              "name": "className",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Applies a class to the specified element to animate it. The class is removed after the animation finishes and then\nthe promise resolves. If a timeout is provided, the class will be removed and the animation will"
        },
        {
          "kind": "function",
          "name": "parseDuration",
          "parameters": [
            {
              "name": "duration",
              "type": {
                "text": "number | string"
              }
            }
          ],
          "description": "Parses a CSS duration and returns the number of milliseconds."
        },
        {
          "kind": "function",
          "name": "prefersReducedMotion",
          "description": "Tells if the user has enabled the \"reduced motion\" setting in their browser or OS."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "animate",
          "declaration": {
            "name": "animate",
            "module": "src/internal/animate.ts"
          }
        },
        {
          "kind": "js",
          "name": "animateWithClass",
          "declaration": {
            "name": "animateWithClass",
            "module": "src/internal/animate.ts"
          }
        },
        {
          "kind": "js",
          "name": "parseDuration",
          "declaration": {
            "name": "parseDuration",
            "module": "src/internal/animate.ts"
          }
        },
        {
          "kind": "js",
          "name": "prefersReducedMotion",
          "declaration": {
            "name": "prefersReducedMotion",
            "module": "src/internal/animate.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/computed-style.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "computedStyleMap",
          "default": "new WeakMap<Element, CSSStyleDeclaration>()"
        },
        {
          "kind": "function",
          "name": "getComputedStyle",
          "return": {
            "type": {
              "text": "CSSStyleDeclaration | null"
            }
          },
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "Element"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "computedStyleMap",
          "declaration": {
            "name": "computedStyleMap",
            "module": "src/internal/computed-style.ts"
          }
        },
        {
          "kind": "js",
          "name": "getComputedStyle",
          "declaration": {
            "name": "getComputedStyle",
            "module": "src/internal/computed-style.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/debounce.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "debounce",
          "parameters": [
            {
              "name": "delay",
              "type": {
                "text": "number"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "debounce",
          "declaration": {
            "name": "debounce",
            "module": "src/internal/debounce.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/default-value.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "defaultValue",
          "parameters": [
            {
              "name": "propertyName",
              "default": "'value'"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultValue",
          "declaration": {
            "name": "defaultValue",
            "module": "src/internal/default-value.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/drag.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "drag",
          "parameters": [
            {
              "name": "container",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "Partial<DragOptions>"
              }
            }
          ],
          "description": "Begins listening for dragging."
        },
        {
          "kind": "class",
          "description": "Attaches the necessary events to make an element draggable.\n\nThis by itself will not make the element draggable, but it provides the events and callbacks necessary to facilitate\ndragging. Use the `clientX` and `clientY` arguments of each callback to update the UI as desired when dragging.\n\nDrag functionality will be enabled as soon as the constructor is called. A `start()` and `stop()` method can be used\nto start and stop it, if needed.",
          "name": "DraggableElement",
          "members": [
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              },
              "privacy": "private",
              "default": "el"
            },
            {
              "kind": "field",
              "name": "isActive",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isDragging",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "DraggableElementOptions"
              },
              "privacy": "private",
              "default": "{ start: () => undefined, stop: () => undefined, move: () => undefined, ...options, }"
            },
            {
              "kind": "field",
              "name": "handleDragStart",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDragStop",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDragMove",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "start",
              "privacy": "public",
              "description": "Start listening to drags."
            },
            {
              "kind": "method",
              "name": "stop",
              "privacy": "public",
              "description": "Stop listening to drags."
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "parameters": [
                {
                  "name": "isActive",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Starts or stops the drag listeners."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "drag",
          "declaration": {
            "name": "drag",
            "module": "src/internal/drag.ts"
          }
        },
        {
          "kind": "js",
          "name": "DraggableElement",
          "declaration": {
            "name": "DraggableElement",
            "module": "src/internal/drag.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/event.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "waitForEvent",
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "eventName",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Waits for a specific event to be emitted from an element. Ignores events that bubble up from child elements."
        },
        {
          "kind": "function",
          "name": "getTargetElement",
          "parameters": [
            {
              "name": "event",
              "type": {
                "text": "Event"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "waitForEvent",
          "declaration": {
            "name": "waitForEvent",
            "module": "src/internal/event.ts"
          }
        },
        {
          "kind": "js",
          "name": "getTargetElement",
          "declaration": {
            "name": "getTargetElement",
            "module": "src/internal/event.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/get-text.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getText",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "root",
              "type": {
                "text": "Node | Iterable<Node>"
              },
              "description": "One or more nodes to get text content from."
            },
            {
              "name": "depth",
              "default": "0",
              "description": "By default, will just return element.textContent for any child elements instead of calling the function recursively.\n  Set to a positive integer to recurse that many levels. Generally a tradeoff between performance and accuracy."
            }
          ],
          "description": "Like textContent, but better:\n- Uses assignedNodes to get text content from slots (and falls back to content if nothing is slotted)\n- Ignores script and style elements"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "getText",
            "module": "src/internal/get-text.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/math.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "clamp",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "min",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "Ensures a number stays within a minimum and maximum value"
        },
        {
          "kind": "function",
          "name": "uniqueId",
          "parameters": [
            {
              "name": "prefix",
              "default": "''"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "clamp",
          "declaration": {
            "name": "clamp",
            "module": "src/internal/math.ts"
          }
        },
        {
          "kind": "js",
          "name": "uniqueId",
          "declaration": {
            "name": "uniqueId",
            "module": "src/internal/math.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/offset.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getOffset",
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "parent",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "description": "Returns an element's offset relative to its parent. Similar to element.offsetTop and element.offsetLeft, except the\nparent doesn't have to be positioned relative or absolute.\n\nNOTE: This was created to work around what appears to be a bug in Chrome where a slotted element's offsetParent seems\nto ignore elements inside the surrounding shadow DOM: https://bugs.chromium.org/p/chromium/issues/detail?id=920069"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getOffset",
          "declaration": {
            "name": "getOffset",
            "module": "src/internal/offset.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/parse.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "parseSpaceDelimitedTokens",
          "return": {
            "type": {
              "text": "string[]"
            }
          },
          "parameters": [
            {
              "name": "input",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Parses a space-delimited set of tokens and returns an array with all whitespace removed."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "parseSpaceDelimitedTokens",
          "declaration": {
            "name": "parseSpaceDelimitedTokens",
            "module": "src/internal/parse.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/scroll.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "lockBodyScrolling",
          "parameters": [
            {
              "name": "lockingEl",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "description": "Prevents body scrolling. Keeps track of which elements requested a lock so multiple levels of locking are possible\nwithout premature unlocking."
        },
        {
          "kind": "function",
          "name": "unlockBodyScrolling",
          "parameters": [
            {
              "name": "lockingEl",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "description": "Unlocks body scrolling. Scrolling will only be unlocked once all elements that requested a lock call this method."
        },
        {
          "kind": "function",
          "name": "scrollIntoView",
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "container",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "direction",
              "default": "'vertical'",
              "type": {
                "text": "'horizontal' | 'vertical' | 'both'"
              }
            },
            {
              "name": "behavior",
              "default": "'smooth'",
              "type": {
                "text": "'smooth' | 'auto'"
              }
            }
          ],
          "description": "Scrolls an element into view of its container. If the element is already in view, nothing will happen."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "lockBodyScrolling",
          "declaration": {
            "name": "lockBodyScrolling",
            "module": "src/internal/scroll.ts"
          }
        },
        {
          "kind": "js",
          "name": "unlockBodyScrolling",
          "declaration": {
            "name": "unlockBodyScrolling",
            "module": "src/internal/scroll.ts"
          }
        },
        {
          "kind": "js",
          "name": "scrollIntoView",
          "declaration": {
            "name": "scrollIntoView",
            "module": "src/internal/scroll.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/scrollend-polyfill.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/slot.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A reactive controller that determines when slots exist.",
          "name": "HasSlotController",
          "members": [
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost & Element"
              }
            },
            {
              "kind": "field",
              "name": "slotNames",
              "type": {
                "text": "string[]"
              },
              "default": "slotNames"
            },
            {
              "kind": "method",
              "name": "hasDefaultSlot",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hasNamedSlot",
              "privacy": "private",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "test",
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "field",
              "name": "handleSlotChange",
              "privacy": "private"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getInnerHTML",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "nodes",
              "type": {
                "text": "Iterable<Node>"
              },
              "description": "The list of nodes to iterate over."
            },
            {
              "name": "callback",
              "optional": true,
              "type": {
                "text": "(node: Node) => string | undefined"
              },
              "description": "A function that can be used to customize the HTML output for specific types of nodes. If the function returns undefined, the default HTML output will be used."
            }
          ],
          "description": "Given a list of nodes, this function iterates over all of them and returns the concatenated\nHTML as a string. This is useful for getting the HTML that corresponds to a slot’s assigned nodes (since we can't use slot.innerHTML as an alternative)."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HasSlotController",
          "declaration": {
            "name": "HasSlotController",
            "module": "src/internal/slot.ts"
          }
        },
        {
          "kind": "js",
          "name": "getInnerHTML",
          "declaration": {
            "name": "getInnerHTML",
            "module": "src/internal/slot.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/submit-on-enter.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "submitOnEnter",
          "parameters": [
            {
              "name": "event",
              "type": {
                "text": "KeyboardEvent"
              }
            },
            {
              "name": "el",
              "type": {
                "text": "T"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "submitForm",
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "HTMLElement | WebAwesomeFormAssociatedElement"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "submitOnEnter",
          "declaration": {
            "name": "submitOnEnter",
            "module": "src/internal/submit-on-enter.ts"
          }
        },
        {
          "kind": "js",
          "name": "submitForm",
          "declaration": {
            "name": "submitForm",
            "module": "src/internal/submit-on-enter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/watch.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "watch",
          "parameters": [
            {
              "name": "propertyName",
              "type": {
                "text": "string | string[]"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "WatchOptions"
              }
            }
          ],
          "description": "Runs when observed properties change, e.g."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "watch",
          "declaration": {
            "name": "watch",
            "module": "src/internal/watch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/webawesome-element.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WebAwesomeElement",
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS."
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "didSSR"
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states."
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options."
            }
          ],
          "events": [
            {
              "type": {}
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WebAwesomeElement",
            "module": "src/internal/webawesome-element.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/webawesome-form-associated-element.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WebAwesomeFormAssociatedElement",
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "static": true,
              "description": "Validators are static because they have `observedAttributes`, essentially attributes to \"watch\"\nfor changes. Whenever these attributes change, we want to be notified and update the validator.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "The name of the input, submitted as a name/value pair with form data."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the form control."
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "assumeInteractionOn",
              "type": {
                "text": "string[]"
              },
              "default": "['input']"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "(HTMLElement & { value: unknown }) | HTMLInputElement | HTMLTextAreaElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "valueHasChanged",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasInteracted",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "customError",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "emittedEvents",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "states",
              "type": {
                "text": "CustomStateSet"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emitInvalid"
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInteraction",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "labels",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "getForm"
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "willValidate",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "checkValidity"
            },
            {
              "kind": "method",
              "name": "reportValidity"
            },
            {
              "kind": "field",
              "name": "validationTarget",
              "type": {
                "text": "undefined | HTMLElement"
              },
              "description": "Override this to change where constraint validation popups are anchored.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "setValidity",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setValidity>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setCustomStates"
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Do not use this when creating a \"Validator\". This is intended for end users of components.\nWe track manually defined custom errors so we don't clear them on accident in our validators."
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "isDisabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "reason",
                  "type": {
                    "text": "'autocomplete' | 'restore'"
                  }
                }
              ],
              "description": "Called when the browser is trying to restore element’s state to state in which case reason is \"restore\", or when\nthe browser is trying to fulfill autofill on behalf of user in which case reason is \"autocomplete\". In the case of\n\"restore\", state is a string, File, or FormData object previously set as the second argument to setFormValue."
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setFormValue>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "allValidators",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "resetValidity",
              "description": "Reset validity is a way of removing manual custom errors and native validation."
            },
            {
              "kind": "method",
              "name": "updateValidity"
            },
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WebAwesomeFormAssociatedElement",
          "declaration": {
            "name": "WebAwesomeFormAssociatedElement",
            "module": "src/internal/webawesome-form-associated-element.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "WaAnimatedImage",
          "declaration": {
            "name": "default",
            "module": "./animated-image/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaAnimation",
          "declaration": {
            "name": "default",
            "module": "./animation/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaAvatar",
          "declaration": {
            "name": "default",
            "module": "./avatar/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaBadge",
          "declaration": {
            "name": "default",
            "module": "./badge/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaBreadcrumb",
          "declaration": {
            "name": "default",
            "module": "./breadcrumb/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaBreadcrumbItem",
          "declaration": {
            "name": "default",
            "module": "./breadcrumb-item/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaButton",
          "declaration": {
            "name": "default",
            "module": "./button/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaButtonGroup",
          "declaration": {
            "name": "default",
            "module": "./button-group/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaCallout",
          "declaration": {
            "name": "default",
            "module": "./callout/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaCard",
          "declaration": {
            "name": "default",
            "module": "./card/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaCarousel",
          "declaration": {
            "name": "default",
            "module": "./carousel/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaCheckbox",
          "declaration": {
            "name": "default",
            "module": "./checkbox/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaCarouselItem",
          "declaration": {
            "name": "default",
            "module": "./carousel-item/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaColorPicker",
          "declaration": {
            "name": "default",
            "module": "./color-picker/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaComparison",
          "declaration": {
            "name": "default",
            "module": "./comparison/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaCopyButton",
          "declaration": {
            "name": "default",
            "module": "./copy-button/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaDetails",
          "declaration": {
            "name": "default",
            "module": "./details/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaDialog",
          "declaration": {
            "name": "default",
            "module": "./dialog/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaDivider",
          "declaration": {
            "name": "default",
            "module": "./divider/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaDrawer",
          "declaration": {
            "name": "default",
            "module": "./drawer/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaDropdown",
          "declaration": {
            "name": "default",
            "module": "./dropdown/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaDropdownItem",
          "declaration": {
            "name": "default",
            "module": "./dropdown-item/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaFormatBytes",
          "declaration": {
            "name": "default",
            "module": "./format-bytes/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaFormatDate",
          "declaration": {
            "name": "default",
            "module": "./format-date/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaFormatNumber",
          "declaration": {
            "name": "default",
            "module": "./format-number/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaIcon",
          "declaration": {
            "name": "default",
            "module": "./icon/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaInclude",
          "declaration": {
            "name": "default",
            "module": "./include/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaInput",
          "declaration": {
            "name": "default",
            "module": "./input/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaMutationObserver",
          "declaration": {
            "name": "default",
            "module": "./mutation-observer/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaOption",
          "declaration": {
            "name": "default",
            "module": "./option/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaPage",
          "declaration": {
            "name": "default",
            "module": "./page/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaPopover",
          "declaration": {
            "name": "default",
            "module": "./popover/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaPopup",
          "declaration": {
            "name": "default",
            "module": "./popup/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaProgressBar",
          "declaration": {
            "name": "default",
            "module": "./progress-bar/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaProgressRing",
          "declaration": {
            "name": "default",
            "module": "./progress-ring/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaRadio",
          "declaration": {
            "name": "default",
            "module": "./radio/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaQrCode",
          "declaration": {
            "name": "default",
            "module": "./qr-code/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaRadioGroup",
          "declaration": {
            "name": "default",
            "module": "./radio-group/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaRelativeTime",
          "declaration": {
            "name": "default",
            "module": "./relative-time/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaRating",
          "declaration": {
            "name": "default",
            "module": "./rating/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaResizeObserver",
          "declaration": {
            "name": "default",
            "module": "./resize-observer/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaScroller",
          "declaration": {
            "name": "default",
            "module": "./scroller/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaSkeleton",
          "declaration": {
            "name": "default",
            "module": "./skeleton/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaSelect",
          "declaration": {
            "name": "default",
            "module": "./select/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaSlider",
          "declaration": {
            "name": "default",
            "module": "./slider/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaSpinner",
          "declaration": {
            "name": "default",
            "module": "./spinner/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaSplitPanel",
          "declaration": {
            "name": "default",
            "module": "./split-panel/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaTab",
          "declaration": {
            "name": "default",
            "module": "./tab/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaSwitch",
          "declaration": {
            "name": "default",
            "module": "./switch/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaTabGroup",
          "declaration": {
            "name": "default",
            "module": "./tab-group/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaTabPanel",
          "declaration": {
            "name": "default",
            "module": "./tab-panel/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaTextarea",
          "declaration": {
            "name": "default",
            "module": "./textarea/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaTooltip",
          "declaration": {
            "name": "default",
            "module": "./tooltip/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaTree",
          "declaration": {
            "name": "default",
            "module": "./tree/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaTag",
          "declaration": {
            "name": "default",
            "module": "./tag/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaTreeItem",
          "declaration": {
            "name": "default",
            "module": "./tree-item/index.js"
          }
        },
        {
          "kind": "js",
          "name": "WaZoomableFrame",
          "declaration": {
            "name": "default",
            "module": "./zoomable-frame/index.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/ar.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'ar', $name: 'العربية', $dir: 'rtl', carousel: 'كاروسيل', clearEntry: 'حذف الخيارات', close: 'اغلاق', copied: 'تم النسخ', copy: 'نسخ', currentValue: 'القيمة الحالية', error: 'خطأ', goToSlide: (slide, count) => `عرض شريحة رقم ${slide} من ${count}`, hidePassword: 'اخفاء كلمة المرور', loading: 'جاري التحميل', nextSlide: 'الشريحة التالية', numOptionsSelected: num => { if (num === 0) return 'لم يتم تحديد أي خيارات'; if (num === 1) return 'تم تحديد خيار واحد'; if (num === 2) return 'تم تحديد خياران'; if (num > 2 && num < 11) return `تم تحديد ${num} خيارات`; return `تم تحديد ${num} خيار`; }, previousSlide: 'الشريحة السابقة', progress: 'مقدار التقدم', remove: 'حذف', resize: 'تغيير الحجم', scrollableRegion: 'منطقة قابلة للتمرير', scrollToEnd: 'الانتقال الى النهاية', scrollToStart: 'الانتقال الى البداية', selectAColorFromTheScreen: 'اختر لون من الشاشة', showPassword: 'عرض كلمة المرور', slideNum: slide => `شريحة ${slide}`, toggleColorFormat: 'تغيير صيغة عرض اللون', zoomIn: 'تكبير', zoomOut: 'تصغير', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/ar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/cs.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'cs', $name: 'Čeština', $dir: 'ltr', carousel: 'Karusel', clearEntry: 'Smazat položku', close: 'Zavřít', copied: 'Zkopírováno', copy: 'Kopírovat', currentValue: 'Současná hodnota', error: 'Chyba', goToSlide: (slide, count) => `Přejít na slide ${slide} z ${count}`, hidePassword: 'Skrýt heslo', loading: 'Nahrává se', nextSlide: 'Další slide', numOptionsSelected: num => { if (num === 0) return 'Nejsou vybrány žádné možnosti'; if (num === 1) return 'Je vybrána jedna možnost'; return `Počet vybraných možností: ${num}`; }, previousSlide: 'Předchozí slide', progress: 'Průběh', remove: 'Odstranit', resize: 'Změnit velikost', scrollableRegion: 'Posunovatelná oblast', scrollToEnd: 'Scrollovat na konec', scrollToStart: 'Scrollovat na začátek', selectAColorFromTheScreen: 'Vybrat barvu z obrazovky', showPassword: 'Zobrazit heslo', slideNum: slide => `Slide ${slide}`, toggleColorFormat: 'Přepnout formát barvy', zoomIn: 'Přiblížit', zoomOut: 'Oddálit', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/cs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/da.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'da', $name: 'Dansk', $dir: 'ltr', carousel: 'Karrusel', clearEntry: 'Ryd indtastning', close: 'Luk', copied: 'Kopieret', copy: 'Kopier', currentValue: 'Nuværende værdi', error: 'Fejl', goToSlide: (slide, count) => `Gå til dias ${slide} af ${count}`, hidePassword: 'Skjul adgangskode', loading: 'Indlæser', nextSlide: 'Næste slide', numOptionsSelected: (num: number) => { if (num === 0) return 'Ingen valgt'; if (num === 1) return '1 valgt'; return `${num} valgt`; }, previousSlide: 'Forrige dias', progress: 'Status', remove: 'Fjern', resize: 'Tilpas størrelse', scrollableRegion: 'Rullebar region', scrollToEnd: 'Scroll til slut', scrollToStart: 'Scroll til start', selectAColorFromTheScreen: 'Vælg en farve fra skærmen', showPassword: 'Vis adgangskode', slideNum: slide => `Slide ${slide}`, toggleColorFormat: 'Skift farveformat', zoomIn: 'Zoom ind', zoomOut: 'Zoom ud', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/da.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/de-ch.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ ...baseTranslation, $code: 'de-CH', $name: 'Deutsch (Schweiz)', close: 'Schliessen', resize: 'Grösse ändern', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/de-ch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/de.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'de', $name: 'Deutsch', $dir: 'ltr', carousel: 'Karussell', clearEntry: 'Eingabe löschen', close: 'Schließen', copied: 'Kopiert', copy: 'Kopieren', currentValue: 'Aktueller Wert', error: 'Fehler', goToSlide: (slide, count) => `Zu Folie ${slide} von ${count} gehen`, hidePassword: 'Passwort verbergen', loading: 'Wird geladen', nextSlide: 'Nächste Folie', numOptionsSelected: num => { if (num === 0) return 'Keine Optionen ausgewählt'; if (num === 1) return '1 Option ausgewählt'; return `${num} Optionen ausgewählt`; }, previousSlide: 'Vorherige Folie', progress: 'Fortschritt', remove: 'Entfernen', resize: 'Größe ändern', scrollableRegion: 'Scrollbarer Bereich', scrollToEnd: 'Zum Ende scrollen', scrollToStart: 'Zum Anfang scrollen', selectAColorFromTheScreen: 'Farbe vom Bildschirm auswählen', showPassword: 'Passwort anzeigen', slideNum: slide => `Folie ${slide}`, toggleColorFormat: 'Farbformat umschalten', zoomIn: 'Hineinzoomen', zoomOut: 'Herauszoomen', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/de.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/en-gb.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ ...baseTranslation, $code: 'en-GB', $name: 'English (United Kingdom)', selectAColorFromTheScreen: 'Select a colour from the screen', toggleColorFormat: 'Toggle colour format', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/en-gb.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/en.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'en', $name: 'English', $dir: 'ltr', carousel: 'Carousel', clearEntry: 'Clear entry', close: 'Close', copied: 'Copied', copy: 'Copy', currentValue: 'Current value', error: 'Error', goToSlide: (slide, count) => `Go to slide ${slide} of ${count}`, hidePassword: 'Hide password', loading: 'Loading', nextSlide: 'Next slide', numOptionsSelected: num => { if (num === 0) return 'No options selected'; if (num === 1) return '1 option selected'; return `${num} options selected`; }, previousSlide: 'Previous slide', progress: 'Progress', remove: 'Remove', resize: 'Resize', scrollableRegion: 'Scrollable region', scrollToEnd: 'Scroll to end', scrollToStart: 'Scroll to start', selectAColorFromTheScreen: 'Select a color from the screen', showPassword: 'Show password', slideNum: slide => `Slide ${slide}`, toggleColorFormat: 'Toggle color format', zoomIn: 'Zoom in', zoomOut: 'Zoom out', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/en.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/es.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'es', $name: 'Español', $dir: 'ltr', carousel: 'Carrusel', clearEntry: 'Borrar entrada', close: 'Cerrar', copied: 'Copiado', copy: 'Copiar', currentValue: 'Valor actual', error: 'Error', goToSlide: (slide, count) => `Ir a la diapositiva ${slide} de ${count}`, hidePassword: 'Ocultar contraseña', loading: 'Cargando', nextSlide: 'Siguiente diapositiva', numOptionsSelected: num => { if (num === 0) return 'No hay opciones seleccionadas'; if (num === 1) return '1 opción seleccionada'; return `${num} opción seleccionada`; }, previousSlide: 'Diapositiva anterior', progress: 'Progreso', remove: 'Eliminar', resize: 'Cambiar el tamaño', scrollableRegion: 'Región desplazable', scrollToEnd: 'Desplazarse hasta el final', scrollToStart: 'Desplazarse al inicio', selectAColorFromTheScreen: 'Seleccione un color de la pantalla', showPassword: 'Mostrar contraseña', slideNum: slide => `Diapositiva ${slide}`, toggleColorFormat: 'Alternar formato de color', zoomIn: 'Acercar', zoomOut: 'Alejar', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/es.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/fa.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'fa', $name: 'فارسی', $dir: 'rtl', carousel: 'چرخ فلک', clearEntry: 'پاک کردن ورودی', close: 'بستن', copied: 'کپی شد', copy: 'رونوشت', currentValue: 'مقدار فعلی', error: 'خطا', goToSlide: (slide, count) => `رفتن به اسلاید ${slide} از ${count}`, hidePassword: 'پنهان کردن رمز', loading: 'بارگذاری', nextSlide: 'اسلاید بعدی', numOptionsSelected: num => { if (num === 0) return 'هیچ گزینه ای انتخاب نشده است'; if (num === 1) return '1 گزینه انتخاب شده است'; return `${num} گزینه انتخاب شده است`; }, previousSlide: 'اسلاید قبلی', progress: 'پیشرفت', remove: 'حذف', resize: 'تغییر اندازه', scrollableRegion: 'ناحیه قابل اسکرول', scrollToEnd: 'پیمایش به انتها', scrollToStart: 'پیمایش به ابتدا', selectAColorFromTheScreen: 'انتخاب یک رنگ از صفحه نمایش', showPassword: 'نمایش رمز', slideNum: slide => `اسلاید ${slide}`, toggleColorFormat: 'تغییر قالب رنگ', zoomIn: 'بزرگ‌نمایی', zoomOut: 'کوچک‌نمایی', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/fa.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/fi.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'fi', $name: 'Suomi', $dir: 'ltr', carousel: 'Karuselli', clearEntry: 'Poista merkintä', close: 'Sulje', copied: 'Kopioitu', copy: 'Kopioi', currentValue: 'Nykyinen arvo', error: 'Virhe', goToSlide: (slide, count) => `Siirry diaan ${slide} / ${count}`, hidePassword: 'Piilota salasana', loading: 'Ladataan', nextSlide: 'Seuraava dia', numOptionsSelected: num => { if (num === 0) return 'Ei valittuja vaihtoehtoja'; if (num === 1) return 'Yksi vaihtoehto valittu'; return `${num} vaihtoehtoa valittu`; }, previousSlide: 'Edellinen dia', progress: 'Edistyminen', remove: 'Poista', resize: 'Muuta kokoa', scrollableRegion: 'Vieritettävä alue', scrollToEnd: 'Vieritä loppuun', scrollToStart: 'Vieritä alkuun', selectAColorFromTheScreen: 'Valitse väri näytöltä', showPassword: 'Näytä salasana', slideNum: slide => `Dia ${slide}`, toggleColorFormat: 'Vaihda väriformaattia', zoomIn: 'Lähennä', zoomOut: 'Loitonna', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/fi.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/fr.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'fr', $name: 'Français', $dir: 'ltr', carousel: 'Carrousel', clearEntry: `Effacer l'entrée`, close: 'Fermer', copied: 'Copié', copy: 'Copier', currentValue: 'Valeur actuelle', error: 'Erreur', goToSlide: (slide, count) => `Aller à la diapositive ${slide} de ${count}`, hidePassword: 'Masquer le mot de passe', loading: 'Chargement', nextSlide: 'Diapositive suivante', numOptionsSelected: num => { if (num === 0) return 'Aucune option sélectionnée'; if (num === 1) return '1 option sélectionnée'; return `${num} options sélectionnées`; }, previousSlide: 'Diapositive précédente', progress: 'Progrès', remove: 'Retirer', resize: 'Redimensionner', scrollableRegion: 'Région défilante', scrollToEnd: `Faire défiler jusqu'à la fin`, scrollToStart: `Faire défiler jusqu'au début`, selectAColorFromTheScreen: `Sélectionnez une couleur à l'écran`, showPassword: 'Montrer le mot de passe', slideNum: slide => `Diapositive ${slide}`, toggleColorFormat: 'Changer le format de couleur', zoomIn: 'Zoomer', zoomOut: 'Dézoomer', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/fr.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/he.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'he', $name: 'עברית', $dir: 'rtl', carousel: 'קרוסלה', clearEntry: 'נקה קלט', close: 'סגור', copied: 'מוּעֲתָק', copy: 'העתק', currentValue: 'ערך נוכחי', error: 'שְׁגִיאָה', goToSlide: (slide, count) => `עבור לשקופית ${slide} של ${count}`, hidePassword: 'הסתר סיסמא', loading: 'טוען', nextSlide: 'Next slide', numOptionsSelected: num => { if (num === 0) return 'לא נבחרו אפשרויות'; if (num === 1) return 'נבחרה אפשרות אחת'; return `נבחרו ${num} אפשרויות`; }, previousSlide: 'Previous slide', progress: 'התקדמות', remove: 'לְהַסִיר', resize: 'שנה גודל', scrollableRegion: 'אזור גלילה', scrollToEnd: 'גלול עד הסוף', scrollToStart: 'גלול להתחלה', selectAColorFromTheScreen: 'בחור צבע מהמסך', showPassword: 'הראה סיסמה', slideNum: slide => `שקופית ${slide}`, toggleColorFormat: 'החלף פורמט צבע', zoomIn: 'התקרב', zoomOut: 'התרחק', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/he.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/hr.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'hr', $name: 'Hrvatski', $dir: 'ltr', carousel: 'Vrtuljak', clearEntry: 'Očisti unos', close: 'Zatvori', copied: 'Kopirano', copy: 'Kopiraj', currentValue: 'Trenutna vrijednost', error: 'Greška', goToSlide: (slide, count) => `Idi na slajd ${slide} od ${count}`, hidePassword: 'Sakrij lozinku', loading: 'Učitavanje', nextSlide: 'Sljedeći slajd', numOptionsSelected: num => { if (num === 0) return 'Nije odabrana nijedna opcija'; if (num === 1) return '1 opcija je odabrana'; return `${num} odabranih opcija`; }, previousSlide: 'Prethodni slajd', progress: 'Napredak', remove: 'Makni', resize: 'Promijeni veličinu', scrollableRegion: 'Područje s mogućnošću pomicanja', scrollToEnd: 'Skrolaj do kraja', scrollToStart: 'Skrolaj na početak', selectAColorFromTheScreen: 'Odaberi boju sa ekrana', showPassword: 'Pokaži lozinku', slideNum: slide => `Slajd ${slide}`, toggleColorFormat: 'Zamijeni format boje', zoomIn: 'Povećaj', zoomOut: 'Smanji', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/hr.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/hu.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'hu', $name: 'Magyar', $dir: 'ltr', carousel: 'Körhinta', clearEntry: 'Bejegyzés törlése', close: 'Bezárás', copied: 'Másolva', copy: 'Másolás', currentValue: 'Aktuális érték', error: 'Hiba', goToSlide: (slide, count) => `Ugrás a ${count}/${slide}. diára`, hidePassword: 'Jelszó elrejtése', loading: 'Betöltés', nextSlide: 'Következő dia', numOptionsSelected: num => { if (num === 0) return 'Nincsenek kiválasztva opciók'; if (num === 1) return '1 lehetőség kiválasztva'; return `${num} lehetőség kiválasztva`; }, previousSlide: 'Előző dia', progress: 'Folyamat', remove: 'Eltávolítás', resize: 'Átméretezés', scrollableRegion: 'Görgethető terület', scrollToEnd: 'Görgessen a végére', scrollToStart: 'Görgessen az elejére', selectAColorFromTheScreen: 'Szín választása a képernyőről', showPassword: 'Jelszó megjelenítése', slideNum: slide => `${slide}. dia`, toggleColorFormat: 'Színformátum változtatása', zoomIn: 'Nagyítás', zoomOut: 'Kicsinyítés', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/hu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/id.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'id', $name: 'Bahasa Indonesia', $dir: 'ltr', carousel: 'Karousel', clearEntry: 'Hapus entri', close: 'Tutup', copied: 'Disalin', copy: 'Salin', currentValue: 'Nilai saat ini', error: 'Kesalahan', goToSlide: (slide, count) => `Pergi ke slide ${slide} dari ${count}`, hidePassword: 'Sembunyikan sandi', loading: 'Memuat', nextSlide: 'Slide berikutnya', numOptionsSelected: num => { if (num === 0) return 'Tidak ada opsi yang dipilih'; if (num === 1) return '1 opsi yang dipilih'; return `${num} opsi yang dipilih`; }, previousSlide: 'Slide sebelumnya', progress: 'Kemajuan', remove: 'Hapus', resize: 'Ubah ukuran', scrollableRegion: 'Area yang dapat digulir', scrollToEnd: 'Gulir ke akhir', scrollToStart: 'Gulir ke awal', selectAColorFromTheScreen: 'Pilih warna dari layar', showPassword: 'Tampilkan sandi', slideNum: slide => `Slide ${slide}`, toggleColorFormat: 'Beralih format warna', zoomIn: 'Perbesar', zoomOut: 'Perkecil', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/id.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/it.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'it', $name: 'Italian', $dir: 'ltr', carousel: 'Carosello', clearEntry: 'Cancella inserimento', close: 'Chiudi', copied: 'Copiato', copy: 'Copia', currentValue: 'Valore attuale', error: 'Errore', goToSlide: (slide, count) => `Vai alla diapositiva ${slide} di ${count}`, hidePassword: 'Nascondi password', loading: 'In caricamento', nextSlide: 'Prossima diapositiva', numOptionsSelected: num => { if (num === 0) return 'Nessuna opzione selezionata'; if (num === 1) return '1 opzione selezionata'; return `${num} opzioni selezionate`; }, previousSlide: 'Diapositiva precedente', progress: 'Avanzamento', remove: 'Rimuovi', resize: 'Ridimensiona', scrollableRegion: 'Area scorrevole', scrollToEnd: 'Scorri alla fine', scrollToStart: \"Scorri all'inizio\", selectAColorFromTheScreen: 'Seleziona un colore dalla schermo', showPassword: 'Mostra password', slideNum: slide => `Diapositiva ${slide}`, toggleColorFormat: 'Cambia formato colore', zoomIn: 'Ingrandire', zoomOut: 'Rimpicciolire', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/it.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/ja.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'ja', $name: '日本語', $dir: 'ltr', carousel: 'カルーセル', clearEntry: 'クリア', close: '閉じる', copied: 'コピーしました', copy: 'コピー', currentValue: '現在の値', error: 'エラー', goToSlide: (slide, count) => `${count} 枚中 ${slide} 枚のスライドに移動`, hidePassword: 'パスワードを隠す', loading: '読み込み中', nextSlide: '次のスライド', numOptionsSelected: num => { if (num === 0) return '項目が選択されていません'; return `${num} 個の項目が選択されました`; }, previousSlide: '前のスライド', progress: '進行', remove: '削除', resize: 'サイズ変更', scrollableRegion: 'スクロール可能領域', scrollToEnd: '最後にスクロールする', scrollToStart: '最初にスクロールする', selectAColorFromTheScreen: '画面から色を選択してください', showPassword: 'パスワードを表示', slideNum: slide => `スライド ${slide}`, toggleColorFormat: '色のフォーマットを切り替える', zoomIn: 'ズームイン', zoomOut: 'ズームアウト', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/ja.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/nb.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'nb', $name: 'Norwegian Bokmål', $dir: 'ltr', carousel: 'Karusell', clearEntry: 'Tøm felt', close: 'Lukk', copied: 'Kopiert', copy: 'Kopier', currentValue: 'Nåværende verdi', error: 'Feil', goToSlide: (slide, count) => `Gå til visning ${slide} av ${count}`, hidePassword: 'Skjul passord', loading: 'Laster', nextSlide: 'Neste visning', numOptionsSelected: num => { if (num === 0) return 'Ingen alternativer valgt'; if (num === 1) return 'Ett alternativ valgt'; return `${num} alternativer valgt`; }, previousSlide: 'Forrige visning', progress: 'Fremdrift', remove: 'Fjern', resize: 'Endre størrelse', scrollableRegion: 'Rullbar region', scrollToEnd: 'Rull til slutten', scrollToStart: 'Rull til starten', selectAColorFromTheScreen: 'Velg en farge fra skjermen', showPassword: 'Vis passord', slideNum: slide => `Visning ${slide}`, toggleColorFormat: 'Bytt fargeformat', zoomIn: 'Zoom inn', zoomOut: 'Zoom ut', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/nb.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/nl.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'nl', $name: 'Nederlands', $dir: 'ltr', carousel: 'Carrousel', clearEntry: 'Invoer wissen', close: 'Sluiten', copied: 'Gekopieerd', copy: 'Kopiëren', currentValue: 'Huidige waarde', error: 'Fout', goToSlide: (slide, count) => `Ga naar slide ${slide} van ${count}`, hidePassword: 'Verberg wachtwoord', loading: 'Bezig met laden', nextSlide: 'Volgende dia', numOptionsSelected: num => { if (num === 0) return 'Geen optie geselecteerd'; if (num === 1) return '1 optie geselecteerd'; return `${num} opties geselecteerd`; }, previousSlide: 'Vorige dia', progress: 'Voortgang', remove: 'Verwijderen', resize: 'Formaat wijzigen', scrollableRegion: 'Scrollbaar gebied', scrollToEnd: 'Scroll naar einde', scrollToStart: 'Scroll naar begin', selectAColorFromTheScreen: 'Selecteer een kleur van het scherm', showPassword: 'Laat wachtwoord zien', slideNum: slide => `Schuif ${slide}`, toggleColorFormat: 'Wissel kleurnotatie', zoomIn: 'Inzoomen', zoomOut: 'Uitzoomen', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/nl.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/nn.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'nn', $name: 'Norwegian Nynorsk', $dir: 'ltr', carousel: 'Karusell', clearEntry: 'Tøm felt', close: 'Lukk', copied: 'Kopiert', copy: 'Kopier', currentValue: 'Nåverande verdi', error: 'Feil', goToSlide: (slide, count) => `Gå til visning ${slide} av ${count}`, hidePassword: 'Gøym passord', loading: 'Lastar', nextSlide: 'Neste visning', numOptionsSelected: num => { if (num === 0) return 'Ingen alternativ valt'; if (num === 1) return 'Eitt alternativ valt'; return `${num} alternativ valt`; }, previousSlide: 'Førre visning', progress: 'Framdrift', remove: 'Fjern', resize: 'Endre storleik', scrollableRegion: 'Rullbar region', scrollToEnd: 'Rull til slutten', scrollToStart: 'Rull til starten', selectAColorFromTheScreen: 'Vel ein farge frå skjermen', showPassword: 'Vis passord', slideNum: slide => `Visning ${slide}`, toggleColorFormat: 'Byt fargeformat', zoomIn: 'Zoom inn', zoomOut: 'Zoom ut', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/nn.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/pl.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'pl', $name: 'Polski', $dir: 'ltr', carousel: 'Karuzela', clearEntry: 'Wyczyść wpis', close: 'Zamknij', copied: 'Skopiowane', copy: 'Kopiuj', currentValue: 'Aktualna wartość', error: 'Błąd', goToSlide: (slide, count) => `Przejdź do slajdu ${slide} z ${count}`, hidePassword: 'Ukryj hasło', loading: 'Ładowanie', nextSlide: 'Następny slajd', numOptionsSelected: num => { if (num === 0) return 'Nie wybrano opcji'; if (num === 1) return 'Wybrano 1 opcję'; return `Wybrano ${num} opcje`; }, previousSlide: 'Poprzedni slajd', progress: 'Postęp', remove: 'Usunąć', resize: 'Zmień rozmiar', scrollableRegion: 'Obszar przewijalny', scrollToEnd: 'Przewiń do końca', scrollToStart: 'Przewiń do początku', selectAColorFromTheScreen: 'Próbkuj z ekranu', showPassword: 'Pokaż hasło', slideNum: slide => `Slajd ${slide}`, toggleColorFormat: 'Przełącz format', zoomIn: 'Powiększ', zoomOut: 'Pomniejsz', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/pl.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/pt.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'pt', $name: 'Português', $dir: 'ltr', carousel: 'Carrossel', clearEntry: 'Limpar entrada', close: 'Fechar', copied: 'Copiado', copy: 'Copiar', currentValue: 'Valor atual', error: 'Erro', goToSlide: (slide, count) => `Vá para o slide ${slide} de ${count}`, hidePassword: 'Esconder a senha', loading: 'Carregando', nextSlide: 'Próximo slide', numOptionsSelected: num => { if (num === 0) return 'Nenhuma opção selecionada'; if (num === 1) return '1 opção selecionada'; return `${num} opções selecionadas`; }, previousSlide: 'Slide anterior', progress: 'Progresso', remove: 'Remover', resize: 'Mudar o tamanho', scrollableRegion: 'Região rolável', scrollToEnd: 'Rolar até o final', scrollToStart: 'Rolar até o início', selectAColorFromTheScreen: 'Selecionar uma cor da tela', showPassword: 'Mostrar senha', slideNum: slide => `Slide ${slide}`, toggleColorFormat: 'Trocar o formato de cor', zoomIn: 'Aumentar zoom', zoomOut: 'Diminuir zoom', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/pt.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/ru.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'ru', $name: 'Русский', $dir: 'ltr', carousel: 'Карусель', clearEntry: 'Очистить запись', close: 'Закрыть', copied: 'Скопировано', copy: 'Скопировать', currentValue: 'Текущее значение', error: 'Ошибка', goToSlide: (slide, count) => `Перейти к слайду ${slide} из ${count}`, hidePassword: 'Скрыть пароль', loading: 'Загрузка', nextSlide: 'Следующий слайд', numOptionsSelected: num => { if (num === 0) return 'выбрано 0 вариантов'; if (num === 1) return 'Выбран 1 вариант'; return `выбрано ${num} варианта`; }, previousSlide: 'Предыдущий слайд', progress: 'Прогресс', remove: 'Удалить', resize: 'Изменить размер', scrollableRegion: 'Scrollable region', scrollToEnd: 'Пролистать до конца', scrollToStart: 'Пролистать к началу', selectAColorFromTheScreen: 'Выберите цвет на экране', showPassword: 'Показать пароль', slideNum: slide => `Слайд ${slide}`, toggleColorFormat: 'Переключить цветовую модель', zoomIn: 'Увеличить', zoomOut: 'Уменьшить', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/ru.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/sl.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'sl', $name: 'Slovenski', $dir: 'ltr', carousel: 'Vrtiljak', clearEntry: 'Počisti vnos', close: 'Zapri', copied: 'Kopirano', copy: 'Kopiraj', currentValue: 'Trenutna vrednost', error: 'Napaka', goToSlide: (slide, count) => `Pojdi na diapozitiv ${slide} od ${count}`, hidePassword: 'Skrij geslo', loading: 'Nalaganje', nextSlide: 'Naslednji diapozitiv', numOptionsSelected: num => { if (num === 0) return 'Nobena možnost ni izbrana'; if (num === 1) return '1 možnost izbrana'; if (num === 2) return '2 možnosti izbrani'; if (num === 3 || num === 4) return `${num} možnosti izbrane`; return `${num} možnosti izbranih`; }, previousSlide: 'Prejšnji diapozitiv', progress: 'Napredek', remove: 'Odstrani', resize: 'Spremeni velikost', scrollableRegion: 'Področje za drsenje', scrollToEnd: 'Pomakni se na konec', scrollToStart: 'Pomakni se na začetek', selectAColorFromTheScreen: 'Izberite barvo z zaslona', showPassword: 'Prikaži geslo', slideNum: slide => `Diapozitiv ${slide}`, toggleColorFormat: 'Preklopi format barve', zoomIn: 'Povečaj', zoomOut: 'Pomanjšaj', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/sl.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/sv.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'sv', $name: 'Svenska', $dir: 'ltr', carousel: 'Karusell', clearEntry: 'Återställ val', close: 'Stäng', copied: 'Kopierade', copy: 'Kopiera', currentValue: 'Nuvarande värde', error: 'Fel', goToSlide: (slide, count) => `Gå till bild ${slide} av ${count}`, hidePassword: 'Dölj lösenord', loading: 'Läser in', nextSlide: 'Nästa bild', numOptionsSelected: num => { if (num === 0) return 'Inga alternativ har valts'; if (num === 1) return '1 alternativ valt'; return `${num} alternativ valda`; }, previousSlide: 'Föregående bild', progress: 'Framsteg', remove: 'Ta bort', resize: 'Ändra storlek', scrollableRegion: 'Scrollbart område', scrollToEnd: 'Skrolla till slutet', scrollToStart: 'Skrolla till början', selectAColorFromTheScreen: 'Välj en färg från skärmen', showPassword: 'Visa lösenord', slideNum: slide => `Bild ${slide}`, toggleColorFormat: 'Växla färgformat', zoomIn: 'Zooma in', zoomOut: 'Zooma ut', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/sv.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/tr.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'tr', $name: 'Türkçe', $dir: 'ltr', carousel: 'Atlıkarınca', clearEntry: 'Girişi sil', close: 'Kapat', copied: 'Kopyalandı', copy: 'Kopya', currentValue: 'Mevcut değer', error: 'Hata', goToSlide: (slide, count) => `${count} slayttan ${slide} slayta gidin`, hidePassword: 'Şifreyi sakla', loading: 'Yükleme', nextSlide: 'Sonraki slayt', numOptionsSelected: num => { if (num === 0) return 'Hiçbir seçenek seçilmedi'; if (num === 1) return '1 seçenek seçildi'; return `${num} seçenek seçildi`; }, previousSlide: 'Bir onceki slayt', progress: 'İlerleme', remove: 'Kaldır', resize: 'Yeniden boyutlandır', scrollableRegion: 'Kaydırılabilir alan', scrollToEnd: 'Sona kay', scrollToStart: 'Başa kay', selectAColorFromTheScreen: 'Ekrandan bir renk seçin', showPassword: 'Şifreyi göster', slideNum: slide => `Slayt ${slide}`, toggleColorFormat: 'Renk biçimini değiştir', zoomIn: 'Yakınlaştır', zoomOut: 'Uzaklaştır', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/tr.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/uk.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'uk', $name: 'Українська', $dir: 'ltr', carousel: 'Карусель', clearEntry: 'Очистити поле', close: 'Закрити', copied: 'Скопійовано', copy: 'Скопіювати', currentValue: 'Поточне значення', error: 'Збій', goToSlide: (slide, count) => `Перейти до слайда №${slide} з ${count}`, hidePassword: 'Приховати пароль', loading: 'Завантаження', nextSlide: 'Наступний слайд', numOptionsSelected: num => { const n = num % 10; if (n === 0) return 'не вибрано варіантів'; if (n === 1) return 'вибрано 1 варіант'; if (n === 2 || n === 3 || n === 4) return `вибрано ${num} варіанти`; return `вибрано ${num} варіантів`; }, previousSlide: 'Попередній слайд', progress: 'Поступ', remove: 'Видалити', resize: 'Змінити розмір', scrollableRegion: 'Область з можливістю прокрутки', scrollToEnd: 'Прокрутити в кінець', scrollToStart: 'Прокрутити на початок', selectAColorFromTheScreen: 'Виберіть колір на екрані', showPassword: 'Показати пароль', slideNum: slide => `Слайд ${slide}`, toggleColorFormat: 'Переключити кольорову модель', zoomIn: 'Збільшити', zoomOut: 'Зменшити', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/uk.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/zh-cn.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'zh-cn', $name: '简体中文', $dir: 'ltr', carousel: '跑马灯', clearEntry: '清空', close: '关闭', copied: '已复制', copy: '复制', currentValue: '当前值', error: '错误', goToSlide: (slide, count) => `转到第 ${slide} 张幻灯片，共 ${count} 张`, hidePassword: '隐藏密码', loading: '加载中', nextSlide: '下一张幻灯片', numOptionsSelected: num => { if (num === 0) return '未选择任何项目'; if (num === 1) return '已选择 1 个项目'; return `${num} 选择项目`; }, previousSlide: '上一张幻灯片', progress: '进度', remove: '删除', resize: '调整大小', scrollableRegion: '可滚动区域', scrollToEnd: '滚动至页尾', scrollToStart: '滚动至页首', selectAColorFromTheScreen: '从屏幕中选择一种颜色', showPassword: '显示密码', slideNum: slide => `幻灯片 ${slide}`, toggleColorFormat: '切换颜色模式', zoomIn: '放大', zoomOut: '缩小', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/zh-cn.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/translations/zh-tw.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "translation",
          "type": {
            "text": "Translation"
          },
          "default": "{ $code: 'zh-tw', $name: '正體中文', $dir: 'ltr', carousel: '幻燈片', clearEntry: '清空', close: '關閉', copied: '已複製', copy: '複製', currentValue: '當前值', error: '錯誤', goToSlide: (slide, count) => `轉到第 ${slide} 張幻燈片，共 ${count} 張`, hidePassword: '隱藏密碼', loading: '載入中', nextSlide: '下一張幻燈片', numOptionsSelected: num => { if (num === 0) return '未選擇任何項目'; if (num === 1) return '已選擇 1 個項目'; return `${num} 選擇項目`; }, previousSlide: '上一張幻燈片', progress: '進度', remove: '移除', resize: '調整大小', scrollableRegion: '可捲動区域', scrollToEnd: '捲至頁尾', scrollToStart: '捲至頁首', selectAColorFromTheScreen: '從螢幕中選擇一種顏色', showPassword: '顯示密碼', slideNum: slide => `幻燈片 ${slide}`, toggleColorFormat: '切換顏色格式', zoomIn: '放大', zoomOut: '縮小', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "translation",
            "module": "src/translations/zh-tw.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/animation.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "getAnimationNames",
          "declaration": {
            "name": "getAnimationNames",
            "module": "../components/animation/animations.js"
          }
        },
        {
          "kind": "js",
          "name": "getEasingNames",
          "declaration": {
            "name": "getEasingNames",
            "module": "../components/animation/animations.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/autoloader.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "startLoader",
          "description": "Starts the autoloader."
        },
        {
          "kind": "function",
          "name": "stopLoader",
          "description": "Stops the autoloader"
        },
        {
          "kind": "function",
          "name": "discover",
          "parameters": [
            {
              "name": "root",
              "type": {
                "text": "Document | Element | ShadowRoot"
              }
            }
          ],
          "description": "Checks a node for undefined elements and attempts to register them."
        },
        {
          "kind": "function",
          "name": "preventTurboFouce",
          "parameters": [
            {
              "name": "timeout",
              "default": "2000"
            }
          ],
          "description": "Acts as a middleware for Turbo's `turbo:before-render` event to ensure components are auto-loaded before showing the\nnext page, eliminating page-to-page FOUCE in a Turbo environment."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "startLoader",
          "declaration": {
            "name": "startLoader",
            "module": "src/utilities/autoloader.ts"
          }
        },
        {
          "kind": "js",
          "name": "stopLoader",
          "declaration": {
            "name": "stopLoader",
            "module": "src/utilities/autoloader.ts"
          }
        },
        {
          "kind": "js",
          "name": "discover",
          "declaration": {
            "name": "discover",
            "module": "src/utilities/autoloader.ts"
          }
        },
        {
          "kind": "js",
          "name": "preventTurboFouce",
          "declaration": {
            "name": "preventTurboFouce",
            "module": "src/utilities/autoloader.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/base-path.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "setBasePath",
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Sets the library's base path to the specified directory or URL."
        },
        {
          "kind": "function",
          "name": "getBasePath",
          "parameters": [
            {
              "name": "subpath",
              "default": "''",
              "description": "An optional path to append to the base path."
            }
          ],
          "description": "Gets the library's base path.\n\nThe base path is used to load assets such as icons and images, so it needs to be set for components to work properly.\nBy default, this script will look for a script ending in webawesome.js or webawesome.loader.js and set the base path\nto the directory that contains that file. To override this behavior, you can add the data-webawesome attribute to any\nelement on the page to point to a local path or a CORS-enabled endpoint, such as a CDN.\n\n  <script src=\"bundle.js\" data-webawesome=\"/custom/base/path\"></script>\n\nAlternatively, you can set the base path manually using the exported setBasePath() function."
        },
        {
          "kind": "function",
          "name": "setKitCode",
          "parameters": [
            {
              "name": "code",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Sets the library's Web Awesome kit code."
        },
        {
          "kind": "function",
          "name": "getKitCode",
          "description": "Gets the library's Web Awesome kit code.\n\nThe kit code is used to fetch premium assets, so it needs to be set for certain components to work correctly. This\nisn't something we can infer, so the user will need to provide it using the `data-fa-kit-code` attribute. This can\nbe on any element, but ideally it should exist on the script that imports Web Awesome.\n\n  <script src=\"bundle.js\" data-fa-kit-code=\"abc123\"></script>\n\nAlternatively, you can set the kit code manually using the exported `setKitCode()` function."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "setBasePath",
          "declaration": {
            "name": "setBasePath",
            "module": "src/utilities/base-path.ts"
          }
        },
        {
          "kind": "js",
          "name": "getBasePath",
          "declaration": {
            "name": "getBasePath",
            "module": "src/utilities/base-path.ts"
          }
        },
        {
          "kind": "js",
          "name": "setKitCode",
          "declaration": {
            "name": "setKitCode",
            "module": "src/utilities/base-path.ts"
          }
        },
        {
          "kind": "js",
          "name": "getKitCode",
          "declaration": {
            "name": "getKitCode",
            "module": "src/utilities/base-path.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/defined.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "allDefined",
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "Partial<AllDefinedOptions>"
              }
            }
          ],
          "description": "Waits for custom elements that are currently on the page to be registered before resolving. This is sugar for\nawaiting `customElements.whenDefined()` multiple times. By default, the function waits for all undefined Web Awesome\nelements, but you can pass a custom match function to wait for other custom elements instead.\n\nThe function returns with `Promise.all()`, so any loading errors will cause it to reject. Make sure you handle errors\naccordingly using a try/catch block or a `.catch()`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "allDefined",
          "declaration": {
            "name": "allDefined",
            "module": "src/utilities/defined.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/form.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "serialize",
          "parameters": [
            {
              "name": "form",
              "type": {
                "text": "HTMLFormElement"
              }
            }
          ],
          "description": "Serializes a form and returns a plain object. If a form control with the same name appears more than once, the\nproperty will be converted to an array."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "serialize",
          "declaration": {
            "name": "serialize",
            "module": "src/utilities/form.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/localize.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LocalizeController",
          "superclass": {
            "name": "DefaultLocalizationController",
            "package": "@shoelace-style/localize"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LocalizeController",
          "declaration": {
            "name": "LocalizeController",
            "module": "src/utilities/localize.ts"
          }
        },
        {
          "kind": "js",
          "name": "registerTranslation",
          "declaration": {
            "name": "registerTranslation",
            "package": "@shoelace-style/localize"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/animation/animation.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaAnimation",
          "slots": [
            {
              "description": "The element to animate. Avoid slotting in more than one element, as subsequent ones will be ignored. To animate multiple elements, either wrap them in a single container or use multiple `<wa-animation>` elements.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "animation",
              "type": {
                "text": "Animation | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasStarted",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "Promise<HTMLSlotElement>"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'none'",
              "description": "The name of the built-in animation to use. For custom animations, use the `keyframes` prop."
            },
            {
              "kind": "field",
              "name": "play",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Plays the animation. When omitted, the animation will be paused. This attribute will be automatically removed when\nthe animation finishes or gets canceled."
            },
            {
              "kind": "field",
              "name": "delay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of milliseconds to delay the start of the animation."
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "PlaybackDirection"
              },
              "default": "'normal'",
              "description": "Determines the direction of playback as well as the behavior when reaching the end of an iteration.\n[Learn more](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-direction)"
            },
            {
              "kind": "field",
              "name": "duration",
              "type": {
                "text": "number"
              },
              "default": "1000",
              "description": "The number of milliseconds each iteration of the animation takes to complete."
            },
            {
              "kind": "field",
              "name": "easing",
              "type": {
                "text": "string"
              },
              "default": "'linear'",
              "description": "The easing function to use for the animation. This can be a Web Awesome easing function or a custom easing function\nsuch as `cubic-bezier(0, 1, .76, 1.14)`."
            },
            {
              "kind": "field",
              "name": "endDelay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of milliseconds to delay after the active period of an animation sequence."
            },
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "FillMode"
              },
              "default": "'auto'",
              "description": "Sets how the animation applies styles to its target before and after its execution."
            },
            {
              "kind": "field",
              "name": "iterations",
              "type": {
                "text": "number"
              },
              "default": "Infinity",
              "description": "The number of iterations to run before the animation completes. Defaults to `Infinity`, which loops."
            },
            {
              "kind": "field",
              "name": "iterationStart",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The offset at which to start the animation, usually between 0 (start) and 1 (end)."
            },
            {
              "kind": "field",
              "name": "keyframes",
              "type": {
                "text": "Keyframe[] | undefined"
              },
              "description": "The keyframes to use for the animation. If this is set, `name` will be ignored."
            },
            {
              "kind": "field",
              "name": "playbackRate",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Sets the animation's playback rate. The default is `1`, which plays the animation at a normal speed. Setting this\nto `2`, for example, will double the animation's speed. A negative value can be used to reverse the animation. This\nvalue can be changed without causing the animation to restart."
            },
            {
              "kind": "field",
              "name": "currentTime",
              "type": {
                "text": "CSSNumberish"
              },
              "description": "Gets and sets the current animation time."
            },
            {
              "kind": "field",
              "name": "handleAnimationFinish",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleAnimationCancel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "createAnimation",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "destroyAnimation",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleAnimationChange"
            },
            {
              "kind": "method",
              "name": "handlePlayChange"
            },
            {
              "kind": "method",
              "name": "handlePlaybackRateChange"
            },
            {
              "kind": "method",
              "name": "cancel",
              "description": "Clears all keyframe effects caused by this animation and aborts its playback."
            },
            {
              "kind": "method",
              "name": "finish",
              "description": "Sets the playback time to the end of the animation corresponding to the current playback direction."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "description": "Emitted when the animation is canceled.",
              "name": "wa-cancel"
            },
            {
              "description": "Emitted when the animation finishes.",
              "name": "wa-finish"
            },
            {
              "description": "Emitted when the animation starts or restarts.",
              "name": "wa-start"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Animate elements declaratively with nearly 100 baked-in presets, or roll your own with custom keyframes. Powered by the [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API)."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaAnimation",
            "module": "src/components/animation/animation.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/animation/animations.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getAnimationNames",
          "description": "Gets a list of all supported animation names."
        },
        {
          "kind": "function",
          "name": "getEasingNames",
          "description": "Gets a list of all supported easing function names."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "animations",
          "declaration": {
            "name": "animations",
            "module": "src/components/animation/animations.ts"
          }
        },
        {
          "kind": "js",
          "name": "getAnimationNames",
          "declaration": {
            "name": "getAnimationNames",
            "module": "src/components/animation/animations.ts"
          }
        },
        {
          "kind": "js",
          "name": "getEasingNames",
          "declaration": {
            "name": "getEasingNames",
            "module": "src/components/animation/animations.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/animated-image/animated-image.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaAnimatedImage",
          "cssProperties": [
            {
              "description": "The size of the icon box.",
              "name": "--control-box-size"
            },
            {
              "description": "The size of the play/pause icons.",
              "name": "--icon-size"
            }
          ],
          "cssParts": [
            {
              "description": "The container that surrounds the pause/play icons and provides their background.",
              "name": "control-box"
            }
          ],
          "slots": [
            {
              "description": "Optional play icon to use instead of the default. Works best with `<wa-icon>`.",
              "name": "play-icon"
            },
            {
              "description": "Optional pause icon to use instead of the default. Works best with `<wa-icon>`.",
              "name": "pause-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "animatedImage",
              "type": {
                "text": "HTMLImageElement"
              }
            },
            {
              "kind": "field",
              "name": "frozenFrame",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "isLoaded",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "The path to the image to load."
            },
            {
              "kind": "field",
              "name": "alt",
              "type": {
                "text": "string"
              },
              "description": "A description of the image used by assistive devices."
            },
            {
              "kind": "field",
              "name": "play",
              "type": {
                "text": "boolean"
              },
              "description": "Plays the animation. When this attribute is remove, the animation will pause."
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleLoad",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleError",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handlePlayChange"
            },
            {
              "kind": "method",
              "name": "handleSrcChange"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "description": "Emitted when the image loads successfully.",
              "name": "wa-load"
            },
            {
              "description": "Emitted when the image fails to load.",
              "name": "wa-error"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "A component for displaying animated GIFs and WEBPs that play and pause on interaction."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaAnimatedImage",
            "module": "src/components/animated-image/animated-image.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/avatar/avatar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaAvatar",
          "cssProperties": [
            {
              "description": "The size of the avatar.",
              "name": "--size"
            }
          ],
          "cssParts": [
            {
              "description": "The container that wraps the avatar's icon.",
              "name": "icon"
            },
            {
              "description": "The container that wraps the avatar's initials.",
              "name": "initials"
            },
            {
              "description": "The avatar image. Only shown when the `image` attribute is set.",
              "name": "image"
            }
          ],
          "slots": [
            {
              "description": "The default icon to use when no image or initials are present. Works best with `<wa-icon>`.",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "image",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The image source to use for the avatar."
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A label to use to describe the avatar to assistive devices."
            },
            {
              "kind": "field",
              "name": "initials",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Initials to use as a fallback when no image is available (1-2 characters max recommended)."
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "'eager' | 'lazy'"
              },
              "default": "'eager'",
              "description": "Indicates how the browser should load the image."
            },
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "'circle' | 'square' | 'rounded'"
              },
              "default": "'circle'",
              "description": "The shape of the avatar."
            },
            {
              "kind": "method",
              "name": "handleImageChange"
            },
            {
              "kind": "method",
              "name": "handleImageLoadError",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "description": "The image could not be loaded. This may because of an invalid URL, a temporary network condition, or some unknown cause.",
              "name": "wa-error"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Avatars are used to represent a person or object."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaAvatar",
            "module": "src/components/avatar/avatar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/badge/badge.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaBadge",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The badge's content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "[variantStyles, styles]",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'brand' | 'neutral' | 'success' | 'warning' | 'danger'"
              },
              "default": "'brand'",
              "description": "The badge's theme variant. Defaults to `brand` if not within another element with a variant."
            },
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "'accent' | 'filled' | 'outlined'"
              },
              "default": "'accent'",
              "description": "The badge's visual appearance."
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style badge with rounded edges."
            },
            {
              "kind": "field",
              "name": "attention",
              "type": {
                "text": "'none' | 'pulse'"
              },
              "default": "'none'",
              "description": "Makes the badge pulsate to draw attention."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Badges are used to draw attention and display statuses or counts.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaBadge",
            "module": "src/components/badge/badge.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumb/breadcrumb.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaBreadcrumb",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "One or more breadcrumb items to display.",
              "name": ""
            },
            {
              "description": "The separator to use between breadcrumb items. Works best with `<wa-icon>`.",
              "name": "separator"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "separatorDir",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "separatorSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label to use for the breadcrumb control. This will not be shown on the screen, but it will be announced by\nscreen readers and other assistive devices to provide more context for users."
            },
            {
              "kind": "method",
              "name": "getSeparator",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Breadcrumbs provide a group of links so users can easily navigate a website's hierarchy.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaBreadcrumb",
            "module": "src/components/breadcrumb/breadcrumb.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumb-item/breadcrumb-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaBreadcrumbItem",
          "cssParts": [
            {
              "description": "The breadcrumb item's label.",
              "name": "label"
            },
            {
              "description": "The container that wraps the `start` slot.",
              "name": "start"
            },
            {
              "description": "The container that wraps the `end` slot.",
              "name": "end"
            },
            {
              "description": "The container that wraps the separator.",
              "name": "separator"
            }
          ],
          "slots": [
            {
              "description": "The breadcrumb item's label.",
              "name": ""
            },
            {
              "description": "An element, such as `<wa-icon>`, placed before the label.",
              "name": "start"
            },
            {
              "description": "An element, such as `<wa-icon>`, placed after the label.",
              "name": "end"
            },
            {
              "description": "The separator to use for the breadcrumb item. This will only change the separator for this item. If you want to change it for all items in the group, set the separator on `<wa-breadcrumb>` instead.",
              "name": "separator"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "renderType",
              "type": {
                "text": "'button' | 'link' | 'dropdown'"
              },
              "privacy": "private",
              "default": "'button'"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "Optional URL to direct the user to when the breadcrumb item is activated. When set, a link will be rendered\ninternally. When unset, a button will be rendered instead."
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is set."
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "'noreferrer noopener'",
              "description": "The `rel` attribute to use on the link. Only used when `href` is set."
            },
            {
              "kind": "method",
              "name": "setRenderType",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hrefChanged"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Breadcrumb Items are used inside breadcrumbs to represent different links.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaBreadcrumbItem",
            "module": "src/components/breadcrumb-item/breadcrumb-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaButton",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The container that wraps the `start` slot.",
              "name": "start"
            },
            {
              "description": "The button's label.",
              "name": "label"
            },
            {
              "description": "The container that wraps the `end` slot.",
              "name": "end"
            },
            {
              "description": "The button's caret icon, a `<wa-icon>` element.",
              "name": "caret"
            },
            {
              "description": "The spinner that shows when the button is in the loading state.",
              "name": "spinner"
            }
          ],
          "slots": [
            {
              "description": "The button's label.",
              "name": ""
            },
            {
              "description": "An element, such as `<wa-icon>`, placed before the label.",
              "name": "start"
            },
            {
              "description": "An element, such as `<wa-icon>`, placed after the label.",
              "name": "end"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              },
              "default": "[styles, variantStyles, sizeStyles]"
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "default": "[]",
              "static": true,
              "description": "Validators are static because they have `observedAttributes`, essentially attributes to \"watch\"\nfor changes. Whenever these attributes change, we want to be notified and update the validator.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "assumeInteractionOn",
              "type": {
                "text": "string[]"
              },
              "default": "['click']",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, '[default]', 'start', 'end')"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | HTMLLinkElement"
              }
            },
            {
              "kind": "field",
              "name": "labelSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isIconButton",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'neutral' | 'brand' | 'success' | 'warning' | 'danger'"
              },
              "default": "'neutral'",
              "description": "The button's theme variant. Defaults to `neutral` if not within another element with a variant."
            },
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "'accent' | 'filled' | 'outlined' | 'plain'"
              },
              "default": "'accent'",
              "description": "The button's visual appearance."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The button's size."
            },
            {
              "kind": "field",
              "name": "withCaret",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the button with a caret. Used to indicate that the button triggers a dropdown menu or similar behavior."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button. Does not apply to link buttons.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the button in a loading state."
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style button with rounded edges."
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'button' | 'submit' | 'reset'"
              },
              "default": "'button'",
              "description": "The type of button. Note that the default value is `button` instead of `submit`, which is opposite of how native\n`<button>` elements behave. When the type is `submit`, the button will submit the surrounding form."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "The name of the button, submitted as a name/value pair with form data, but only when this button is the submitter.\nThis attribute is ignored when `href` is present.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value of the button, submitted as a pair with the button's name as part of the form data, but only when this\nbutton is the submitter. This attribute is ignored when `href` is present."
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`."
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top'"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is present."
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string | undefined"
              },
              "description": "When using `href`, this attribute will map to the underlying link's `rel` attribute."
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is present."
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "The \"form owner\" to associate the button with. If omitted, the closest containing form will be used instead. The\nvalue of this attribute must be an id of a form in the same document or shadow root as the button."
            },
            {
              "kind": "field",
              "name": "formAction",
              "type": {
                "text": "string"
              },
              "description": "Used to override the form owner's `action` attribute."
            },
            {
              "kind": "field",
              "name": "formEnctype",
              "type": {
                "text": "'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain'"
              },
              "description": "Used to override the form owner's `enctype` attribute."
            },
            {
              "kind": "field",
              "name": "formMethod",
              "type": {
                "text": "'post' | 'get'"
              },
              "description": "Used to override the form owner's `method` attribute."
            },
            {
              "kind": "field",
              "name": "formNoValidate",
              "type": {
                "text": "boolean"
              },
              "description": "Used to override the form owner's `novalidate` attribute."
            },
            {
              "kind": "field",
              "name": "formTarget",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | string"
              },
              "description": "Used to override the form owner's `target` attribute."
            },
            {
              "kind": "method",
              "name": "constructLightDOMButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleLabelSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isLink",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "_args",
                  "type": {
                    "text": "Parameters<WebAwesomeFormAssociatedElement['setValue']>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the button."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the button."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the button."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "(HTMLElement & { value: unknown }) | HTMLInputElement | HTMLTextAreaElement | undefined"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueHasChanged",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasInteracted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customError",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emittedEvents",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "states",
              "type": {
                "text": "CustomStateSet"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emitInvalid",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInteraction",
              "privacy": "private",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationTarget",
              "type": {
                "text": "undefined | HTMLElement"
              },
              "description": "Override this to change where constraint validation popups are anchored.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setValidity>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomStates",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Do not use this when creating a \"Validator\". This is intended for end users of components.\nWe track manually defined custom errors so we don't clear them on accident in our validators.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "isDisabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "reason",
                  "type": {
                    "text": "'autocomplete' | 'restore'"
                  }
                }
              ],
              "description": "Called when the browser is trying to restore element’s state to state in which case reason is \"restore\", or when\nthe browser is trying to fulfill autofill on behalf of user in which case reason is \"autocomplete\". In the case of\n\"restore\", state is a string, File, or FormData object previously set as the second argument to setFormValue.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "allValidators",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidity",
              "description": "Reset validity is a way of removing manual custom errors and native validation.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "description": "Emitted when the button loses focus.",
              "name": "blur"
            },
            {
              "description": "Emitted when the button gains focus.",
              "name": "focus"
            },
            {
              "description": "Emitted when the form control has been checked for validity and its constraints aren't satisfied.",
              "name": "wa-invalid"
            }
          ],
          "superclass": {
            "name": "WebAwesomeFormAssociatedElement",
            "module": "/src/internal/webawesome-form-associated-element.js"
          },
          "summary": "Buttons represent actions that are available to the user."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaButton",
            "module": "src/components/button/button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button-group/button-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaButtonGroup",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "One or more `<wa-button>` elements to display in the button group.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "[sizeStyles, variantStyles, styles]",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "disableRole",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasOutlined",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A label to use for the button group. This won't be displayed on the screen, but it will be announced by assistive\ndevices when interacting with the control and is strongly recommended."
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "description": "The button group's orientation."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "description": "The component's size."
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'neutral' | 'brand' | 'success' | 'warning' | 'danger'"
              },
              "default": "'neutral'",
              "description": "The button group's theme variant. Defaults to `neutral` if not within another element with a variant."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseOver",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseOut",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateClassNames",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Button groups can be used to group related buttons into sections.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaButtonGroup",
            "module": "src/components/button-group/button-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/callout/callout.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaCallout",
          "cssParts": [
            {
              "description": "The container that wraps the optional icon.",
              "name": "icon"
            },
            {
              "description": "The container that wraps the callout's main content.",
              "name": "message"
            }
          ],
          "slots": [
            {
              "description": "The callout's main content.",
              "name": ""
            },
            {
              "description": "An icon to show in the callout. Works best with `<wa-icon>`.",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "[styles, variantStyles, sizeStyles]",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'brand' | 'neutral' | 'success' | 'warning' | 'danger'"
              },
              "default": "'brand'",
              "description": "The callout's theme variant. Defaults to `brand` if not within another element with a variant."
            },
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "| 'accent'\n    | 'filled'\n    | 'outlined'\n    | 'plain'\n    | 'outlined filled'\n    | 'outlined accent'"
              },
              "default": "'outlined filled'",
              "description": "The callout's visual appearance."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The callout's size."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Callouts are used to display important messages inline.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaCallout",
            "module": "src/components/callout/callout.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaCard",
          "cssProperties": [
            {
              "description": "The amount of space around and between sections of the card. Expects a single value.",
              "name": "--spacing",
              "default": "var(--wa-space-l)"
            }
          ],
          "cssParts": [
            {
              "description": "The container that wraps the card's media.",
              "name": "media"
            },
            {
              "description": "The container that wraps the card's header.",
              "name": "header"
            },
            {
              "description": "The container that wraps the card's main content.",
              "name": "body"
            },
            {
              "description": "The container that wraps the card's footer.",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "The card's main content.",
              "name": ""
            },
            {
              "description": "An optional header for the card.",
              "name": "header"
            },
            {
              "description": "An optional footer for the card.",
              "name": "footer"
            },
            {
              "description": "An optional media section to render at the start of the card.",
              "name": "media"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "[sizeStyles, styles]",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'footer', 'header', 'media')"
            },
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "'accent' | 'filled' | 'outlined' | 'plain'"
              },
              "default": "'outlined'",
              "description": "The card's visual appearance."
            },
            {
              "kind": "field",
              "name": "withHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Renders the card with a header. Only needed for SSR, otherwise is automatically added."
            },
            {
              "kind": "field",
              "name": "withMedia",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Renders the card with an image. Only needed for SSR, otherwise is automatically added."
            },
            {
              "kind": "field",
              "name": "withFooter",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Renders the card with a footer. Only needed for SSR, otherwise is automatically added."
            },
            {
              "kind": "method",
              "name": "updated"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Cards can be used to group related subjects in a container.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaCard",
            "module": "src/components/card/card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/carousel/autoplay-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A controller that repeatedly calls the specified callback with the provided interval time.\nThe timer is automatically paused while the user is interacting with the component.",
          "name": "AutoplayController",
          "members": [
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveElement"
              },
              "privacy": "private",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "timerId",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "tickCallback",
              "type": {
                "text": "() => void"
              },
              "privacy": "private",
              "default": "tickCallback"
            },
            {
              "kind": "field",
              "name": "activeInteractions",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "paused",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "stopped",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "start",
              "parameters": [
                {
                  "name": "interval",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "stop"
            },
            {
              "kind": "field",
              "name": "pause"
            },
            {
              "kind": "field",
              "name": "resume"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AutoplayController",
          "declaration": {
            "name": "AutoplayController",
            "module": "src/components/carousel/autoplay-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/carousel/carousel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaCarousel",
          "cssProperties": [
            {
              "description": "The aspect ratio of each slide.",
              "name": "--aspect-ratio",
              "default": "16/9"
            },
            {
              "description": "The amount of padding to apply to the scroll area, allowing adjacent slides to become partially visible as a scroll hint.",
              "name": "--scroll-hint"
            },
            {
              "description": "The space between each slide.",
              "name": "--slide-gap",
              "default": "var(--wa-space-m)"
            }
          ],
          "cssParts": [
            {
              "description": "The carousel's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The scroll container that wraps the slides.",
              "name": "scroll-container"
            },
            {
              "description": "The pagination indicators wrapper.",
              "name": "pagination"
            },
            {
              "description": "The pagination indicator.",
              "name": "pagination-item"
            },
            {
              "description": "Applied when the item is active.",
              "name": "pagination-item-active"
            },
            {
              "description": "The navigation wrapper.",
              "name": "navigation"
            },
            {
              "description": "The navigation button.",
              "name": "navigation-button"
            },
            {
              "description": "Applied to the previous button.",
              "name": "navigation-button-previous"
            },
            {
              "description": "Applied to the next button.",
              "name": "navigation-button-next"
            }
          ],
          "slots": [
            {
              "description": "The carousel's main content, one or more `<wa-carousel-item>` elements.",
              "name": ""
            },
            {
              "description": "Optional next icon to use instead of the default. Works best with `<wa-icon>`.",
              "name": "next-icon"
            },
            {
              "description": "Optional previous icon to use instead of the default. Works best with `<wa-icon>`.",
              "name": "previous-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "loop",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set, allows the user to navigate the carousel in the same direction indefinitely."
            },
            {
              "kind": "field",
              "name": "slides",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "currentSlide",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "navigation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set, show the carousel's navigation."
            },
            {
              "kind": "field",
              "name": "pagination",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set, show the carousel's pagination indicators."
            },
            {
              "kind": "field",
              "name": "autoplay",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set, the slides will scroll automatically when the user is not interacting with them."
            },
            {
              "kind": "field",
              "name": "autoplayInterval",
              "type": {
                "text": "number"
              },
              "default": "3000",
              "description": "Specifies the amount of time, in milliseconds, between each automatic scroll."
            },
            {
              "kind": "field",
              "name": "slidesPerPage",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Specifies how many slides should be shown at a given time."
            },
            {
              "kind": "field",
              "name": "slidesPerMove",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Specifies the number of slides the carousel will advance when scrolling, useful when specifying a `slides-per-page`\ngreater than one. It can't be higher than `slides-per-page`."
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "description": "Specifies the orientation in which the carousel will lay out."
            },
            {
              "kind": "field",
              "name": "mouseDragging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set, it is possible to scroll through the slides by dragging them with the mouse."
            },
            {
              "kind": "field",
              "name": "scrollContainer",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "paginationContainer",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "activeSlide",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "scrolling",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "dragging",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "autoplayController",
              "privacy": "private",
              "default": "new AutoplayController(this, () => this.next())"
            },
            {
              "kind": "field",
              "name": "dragStartPosition",
              "type": {
                "text": "[number, number]"
              },
              "privacy": "private",
              "default": "[-1, -1]"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "mutationObserver",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "pendingSlideChange",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValueMap<WaCarousel> | Map<PropertyKey, unknown>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "getPageCount",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getCurrentPage",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "canScrollNext",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "canScrollPrev",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseDragStart",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleMouseDrag",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleMouseDragEnd",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleScroll",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleScrollEnd",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isCarouselItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "node is WaCarouselItem"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "Node"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "initializeSlides"
            },
            {
              "kind": "method",
              "name": "createClones",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSlideChange"
            },
            {
              "kind": "method",
              "name": "updateSlidesSnap"
            },
            {
              "kind": "method",
              "name": "handleAutoplayChange"
            },
            {
              "kind": "method",
              "name": "previous",
              "parameters": [
                {
                  "name": "behavior",
                  "default": "'smooth'",
                  "type": {
                    "text": "ScrollBehavior"
                  },
                  "description": "The behavior used for scrolling."
                }
              ],
              "description": "Move the carousel backward by `slides-per-move` slides."
            },
            {
              "kind": "method",
              "name": "next",
              "parameters": [
                {
                  "name": "behavior",
                  "default": "'smooth'",
                  "type": {
                    "text": "ScrollBehavior"
                  },
                  "description": "The behavior used for scrolling."
                }
              ],
              "description": "Move the carousel forward by `slides-per-move` slides."
            },
            {
              "kind": "method",
              "name": "goToSlide",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "The slide index."
                },
                {
                  "name": "behavior",
                  "default": "'smooth'",
                  "type": {
                    "text": "ScrollBehavior"
                  },
                  "description": "The behavior used for scrolling."
                }
              ],
              "description": "Scrolls the carousel to the slide specified by `index`."
            },
            {
              "kind": "method",
              "name": "scrollToSlide",
              "privacy": "private",
              "parameters": [
                {
                  "name": "slide",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "behavior",
                  "default": "'smooth'",
                  "type": {
                    "text": "ScrollBehavior"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "type": {
                "text": "{ index: number, slide: WaCarouselItem }"
              },
              "description": "Emitted when the active slide changes.",
              "name": "wa-slide-change"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Carousels display an arbitrary number of content slides along a horizontal or vertical axis."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaCarousel",
            "module": "src/components/carousel/carousel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/carousel/scroll-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A controller for handling scrolling and mouse dragging.",
          "name": "ScrollController",
          "members": [
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "T"
              },
              "privacy": "private",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "dragging",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "scrolling",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "mouseDragging",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "handleScroll"
            },
            {
              "kind": "field",
              "name": "handleScrollEnd"
            },
            {
              "kind": "field",
              "name": "handlePointerDown"
            },
            {
              "kind": "field",
              "name": "handlePointerMove"
            },
            {
              "kind": "field",
              "name": "handlePointerUp"
            },
            {
              "kind": "method",
              "name": "handleDragStart"
            },
            {
              "kind": "method",
              "name": "handleDrag",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDragEnd"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ScrollController",
          "declaration": {
            "name": "ScrollController",
            "module": "src/components/carousel/scroll-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/carousel-item/carousel-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaCarouselItem",
          "cssProperties": [
            {
              "description": "The slide's aspect ratio. Inherited from the carousel by default.",
              "name": "--aspect-ratio"
            }
          ],
          "slots": [
            {
              "description": "The carousel item's content..",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "A carousel item represent a slide within a carousel.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaCarouselItem",
            "module": "src/components/carousel-item/carousel-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/color-picker/color-picker.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaColorPicker",
          "cssProperties": [
            {
              "description": "The width of the color grid.",
              "name": "--grid-width"
            },
            {
              "description": "The height of the color grid.",
              "name": "--grid-height"
            },
            {
              "description": "The size of the color grid's handle.",
              "name": "--grid-handle-size"
            },
            {
              "description": "The height of the hue and alpha sliders.",
              "name": "--slider-height"
            },
            {
              "description": "The diameter of the slider's handle.",
              "name": "--slider-handle-size"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The color picker's dropdown trigger.",
              "name": "trigger"
            },
            {
              "description": "The container that holds the swatches.",
              "name": "swatches"
            },
            {
              "description": "Each individual swatch.",
              "name": "swatch"
            },
            {
              "description": "The color grid.",
              "name": "grid"
            },
            {
              "description": "The color grid's handle.",
              "name": "grid-handle"
            },
            {
              "description": "Hue and opacity sliders.",
              "name": "slider"
            },
            {
              "description": "Hue and opacity slider handles.",
              "name": "slider-handle"
            },
            {
              "description": "The hue slider.",
              "name": "hue-slider"
            },
            {
              "description": "The hue slider's handle.",
              "name": "hue-slider-handle"
            },
            {
              "description": "The opacity slider.",
              "name": "opacity-slider"
            },
            {
              "description": "The opacity slider's handle.",
              "name": "opacity-slider-handle"
            },
            {
              "description": "The preview color.",
              "name": "preview"
            },
            {
              "description": "The text input.",
              "name": "input"
            },
            {
              "description": "The eye dropper button.",
              "name": "eyedropper-button"
            },
            {
              "description": "The eye dropper button's exported `button` part.",
              "name": "eyedropper-button__base"
            },
            {
              "description": "The eye dropper button's exported `start` part.",
              "name": "eyedropper-button__start"
            },
            {
              "description": "The eye dropper button's exported `label` part.",
              "name": "eyedropper-button__label"
            },
            {
              "description": "The eye dropper button's exported `end` part.",
              "name": "eyedropper-button__end"
            },
            {
              "description": "The eye dropper button's exported `caret` part.",
              "name": "eyedropper-button__caret"
            },
            {
              "description": "The format button.",
              "name": "format-button"
            },
            {
              "description": "The format button's exported `button` part.",
              "name": "format-button__base"
            },
            {
              "description": "The format button's exported `start` part.",
              "name": "format-button__start"
            },
            {
              "description": "The format button's exported `label` part.",
              "name": "format-button__label"
            },
            {
              "description": "The format button's exported `end` part.",
              "name": "format-button__end"
            },
            {
              "description": "The format button's exported `caret` part.",
              "name": "format-button__caret"
            }
          ],
          "slots": [
            {
              "description": "The color picker's form label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "The color picker's form hint. Alternatively, you can use the `hint` attribute.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              },
              "default": "[visuallyHidden, sizeStyles, formControlStyles, styles]"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...WebAwesomeFormAssociatedElement.shadowRootOptions, delegatesFocus: true }"
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "default": "[]",
              "static": true,
              "description": "Validators are static because they have `observedAttributes`, essentially attributes to \"watch\"\nfor changes. Whenever these attributes change, we want to be notified and update the validator.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'hint', 'label')"
            },
            {
              "kind": "field",
              "name": "isSafeValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "base",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "(HTMLElement & { value: unknown }) | HTMLInputElement | HTMLTextAreaElement | undefined"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "triggerLabel",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "triggerButton",
              "type": {
                "text": "HTMLButtonElement"
              }
            },
            {
              "kind": "field",
              "name": "validationTarget",
              "type": {
                "text": "undefined | HTMLElement"
              },
              "description": "Override this to change where constraint validation popups are anchored.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "WaPopup"
              }
            },
            {
              "kind": "field",
              "name": "previewButton",
              "type": {
                "text": "HTMLButtonElement"
              }
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "HTMLButtonElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isDraggingGridHandle",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isEmpty",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "inputValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "hue",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "saturation",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "100"
            },
            {
              "kind": "field",
              "name": "brightness",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "100"
            },
            {
              "kind": "field",
              "name": "alpha",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "100"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The current value of the color picker. The value's format will vary based the `format` attribute. To get the value\nin a specific format, use the `getFormattedValue()` method. The value is submitted as a name/value pair with form\ndata."
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string | null"
              },
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "withLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "withHint",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasEyeDropper",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The color picker's label. This will not be displayed, but it will be announced by assistive devices. If you need to\ndisplay HTML, you can use the `label` slot` instead."
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The color picker's hint. If you need to display HTML, use the `hint` slot instead."
            },
            {
              "kind": "field",
              "name": "format",
              "type": {
                "text": "'hex' | 'rgb' | 'hsl' | 'hsv'"
              },
              "default": "'hex'",
              "description": "The format to use. If opacity is enabled, these will translate to HEXA, RGBA, HSLA, and HSVA respectively. The color\npicker will accept user input in any format (including CSS color names) and convert it to the desired format."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "Determines the size of the color picker's trigger"
            },
            {
              "kind": "field",
              "name": "withoutFormatToggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes the button that lets users toggle between format."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "The name of the form control, submitted as a name/value pair with form data.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the color picker.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the popup is open. You can toggle this attribute to show and hide the popup, or you\ncan use the `show()` and `hide()` methods and this attribute will reflect the popup's open state."
            },
            {
              "kind": "field",
              "name": "opacity",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Shows the opacity slider. Enabling this will cause the formatted value to be HEXA, RGBA, or HSLA."
            },
            {
              "kind": "field",
              "name": "uppercase",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, values are lowercase. With this attribute, values will be uppercase instead."
            },
            {
              "kind": "field",
              "name": "swatches",
              "type": {
                "text": "string | string[]"
              },
              "default": "''",
              "description": "One or more predefined color swatches to display as presets in the color picker. Can include any format the color\npicker can parse, including HEX(A), RGB(A), HSL(A), HSV(A), and CSS color names. Each color must be separated by a\nsemicolon (`;`). Alternatively, you can pass an array of color values to this property using JavaScript."
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "null"
              },
              "default": "null",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work."
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the color picker a required field.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleCopy",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleFocusIn",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleFocusOut",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFormatToggle",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleAlphaDrag",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleHueDrag",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleGridDrag",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleAlphaKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleHueKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleGridKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInputChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInputInput",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInputKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTouchMove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "parseColor",
              "privacy": "private",
              "parameters": [
                {
                  "name": "colorString",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setColor",
              "privacy": "private",
              "parameters": [
                {
                  "name": "colorString",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setLetterCase",
              "privacy": "private",
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "syncValues",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleAfterHide",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleAfterShow",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleEyeDropper",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "selectSwatch",
              "privacy": "private",
              "parameters": [
                {
                  "name": "color",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getHexString",
              "parameters": [
                {
                  "name": "hue",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "saturation",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "brightness",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "alpha",
                  "default": "100"
                }
              ],
              "description": "Generates a hex string from HSV values. Hue must be 0-360. All other arguments must be 0-100."
            },
            {
              "kind": "method",
              "name": "stopNestedEventPropagation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFormatChange"
            },
            {
              "kind": "method",
              "name": "handleOpacityChange"
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleValueChange",
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the color picker."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the color picker."
            },
            {
              "kind": "method",
              "name": "getFormattedValue",
              "parameters": [
                {
                  "name": "format",
                  "default": "'hex'",
                  "type": {
                    "text": "'hex' | 'hexa' | 'rgb' | 'rgba' | 'hsl' | 'hsla' | 'hsv' | 'hsva'"
                  }
                }
              ],
              "description": "Returns the current value as a string in the specified format."
            },
            {
              "kind": "field",
              "name": "reportValidityAfterShow",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleKeyDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentMouseDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleTriggerClick"
            },
            {
              "kind": "method",
              "name": "handleTriggerKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTriggerKeyUp",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateAccessibleTrigger"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the color picker panel."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the color picker panel"
            },
            {
              "kind": "method",
              "name": "addOpenListeners"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "assumeInteractionOn",
              "type": {
                "text": "string[]"
              },
              "default": "['input']",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueHasChanged",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasInteracted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customError",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emittedEvents",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "states",
              "type": {
                "text": "CustomStateSet"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emitInvalid",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInteraction",
              "privacy": "private",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setValidity>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomStates",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Do not use this when creating a \"Validator\". This is intended for end users of components.\nWe track manually defined custom errors so we don't clear them on accident in our validators.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "isDisabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "reason",
                  "type": {
                    "text": "'autocomplete' | 'restore'"
                  }
                }
              ],
              "description": "Called when the browser is trying to restore element’s state to state in which case reason is \"restore\", or when\nthe browser is trying to fulfill autofill on behalf of user in which case reason is \"autocomplete\". In the case of\n\"restore\", state is a string, File, or FormData object previously set as the second argument to setFormValue.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setFormValue>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "allValidators",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidity",
              "description": "Reset validity is a way of removing manual custom errors and native validation.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "description": "Emitted when the color picker's value changes."
            },
            {
              "name": "input",
              "type": {
                "text": "InputEvent"
              },
              "description": "Emitted when the color picker receives input."
            },
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "name": "wa-show",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "wa-after-show",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "wa-hide",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "wa-after-hide",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "Emitted when the color picker loses focus.",
              "name": "blur"
            },
            {
              "description": "Emitted when the color picker receives focus.",
              "name": "focus"
            },
            {
              "description": "Emitted when the form control has been checked for validity and its constraints aren't satisfied.",
              "name": "wa-invalid"
            }
          ],
          "superclass": {
            "name": "WebAwesomeFormAssociatedElement",
            "module": "/src/internal/webawesome-form-associated-element.js"
          },
          "summary": "Color pickers allow the user to select a color."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaColorPicker",
            "module": "src/components/color-picker/color-picker.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaCheckbox",
          "cssProperties": [
            {
              "description": "The color of the checked and indeterminate icons.",
              "name": "--checked-icon-color"
            },
            {
              "description": "The size of the checked and indeterminate icons relative to the checkbox.",
              "name": "--checked-icon-scale"
            }
          ],
          "cssParts": [
            {
              "description": "The component's label .",
              "name": "base"
            },
            {
              "description": "The square container that wraps the checkbox's checked state.",
              "name": "control"
            },
            {
              "description": "The checked icon, a `<wa-icon>` element.",
              "name": "checked-icon"
            },
            {
              "description": "The indeterminate icon, a `<wa-icon>` element.",
              "name": "indeterminate-icon"
            },
            {
              "description": "The container that wraps the checkbox's label.",
              "name": "label"
            },
            {
              "description": "The hint's wrapper.",
              "name": "hint"
            }
          ],
          "slots": [
            {
              "description": "The checkbox's label.",
              "name": ""
            },
            {
              "description": "Text that describes how to use the checkbox. Alternatively, you can use the `hint` attribute.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              },
              "default": "[formControlStyles, sizeStyles, styles]"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...WebAwesomeFormAssociatedElement.shadowRootOptions, delegatesFocus: true }"
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "default": "[]",
              "static": true,
              "description": "Validators are static because they have `observedAttributes`, essentially attributes to \"watch\"\nfor changes. Whenever these attributes change, we want to be notified and update the validator.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'hint')"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "(HTMLElement & { value: unknown }) | HTMLInputElement | HTMLTextAreaElement | undefined"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | null"
              },
              "default": "''",
              "description": "The name of the checkbox, submitted as a name/value pair with form data.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | null"
              },
              "description": "The value of the checkbox, submitted as a name/value pair with form data."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The checkbox's size."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the checkbox.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in an indeterminate state. This is usually applied to checkboxes that represents a \"select\nall/none\" behavior when associated checkboxes have a mix of checked and unchecked states."
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "description": "Draws the checkbox in a checked state."
            },
            {
              "kind": "field",
              "name": "defaultChecked",
              "type": {
                "text": "boolean"
              },
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "null"
              },
              "default": "null",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work."
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the checkbox a required field.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The checkbox's hint. If you need to display HTML, use the `hint` slot instead."
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDefaultCheckedChange"
            },
            {
              "kind": "method",
              "name": "handleValueOrCheckedChange"
            },
            {
              "kind": "method",
              "name": "handleStateChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the checkbox."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the checkbox."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the checkbox."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "assumeInteractionOn",
              "type": {
                "text": "string[]"
              },
              "default": "['input']",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueHasChanged",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasInteracted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customError",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emittedEvents",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "states",
              "type": {
                "text": "CustomStateSet"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emitInvalid",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInteraction",
              "privacy": "private",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationTarget",
              "type": {
                "text": "undefined | HTMLElement"
              },
              "description": "Override this to change where constraint validation popups are anchored.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setValidity>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomStates",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Do not use this when creating a \"Validator\". This is intended for end users of components.\nWe track manually defined custom errors so we don't clear them on accident in our validators.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "isDisabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "reason",
                  "type": {
                    "text": "'autocomplete' | 'restore'"
                  }
                }
              ],
              "description": "Called when the browser is trying to restore element’s state to state in which case reason is \"restore\", or when\nthe browser is trying to fulfill autofill on behalf of user in which case reason is \"autocomplete\". In the case of\n\"restore\", state is a string, File, or FormData object previously set as the second argument to setFormValue.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setFormValue>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "allValidators",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidity",
              "description": "Reset validity is a way of removing manual custom errors and native validation.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "description": "Emitted when the checked state changes."
            },
            {
              "description": "Emitted when the checkbox loses focus.",
              "name": "blur"
            },
            {
              "description": "Emitted when the checkbox gains focus.",
              "name": "focus"
            },
            {
              "description": "Emitted when the checkbox receives input.",
              "name": "input"
            },
            {
              "description": "Emitted when the form control has been checked for validity and its constraints aren't satisfied.",
              "name": "wa-invalid"
            },
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "cssStates": [
            {
              "description": "Applied when the checkbox is checked.",
              "name": "checked"
            },
            {
              "description": "Applied when the checkbox is disabled.",
              "name": "disabled"
            },
            {
              "description": "Applied when the checkbox is in an indeterminate state.",
              "name": "indeterminate"
            }
          ],
          "superclass": {
            "name": "WebAwesomeFormAssociatedElement",
            "module": "/src/internal/webawesome-form-associated-element.js"
          },
          "summary": "Checkboxes allow the user to toggle an option on or off."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaCheckbox",
            "module": "src/components/checkbox/checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/comparison/comparison.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaComparison",
          "cssProperties": [
            {
              "description": "The width of the dividing line.",
              "name": "--divider-width"
            },
            {
              "description": "The size of the compare handle.",
              "name": "--handle-size"
            }
          ],
          "cssParts": [
            {
              "description": "The container that wraps the before and after content.",
              "name": "base"
            },
            {
              "description": "The container that wraps the before content.",
              "name": "before"
            },
            {
              "description": "The container that wraps the after content.",
              "name": "after"
            },
            {
              "description": "The divider that separates the before and after content.",
              "name": "divider"
            },
            {
              "description": "The handle that the user drags to expose the after content.",
              "name": "handle"
            }
          ],
          "slots": [
            {
              "description": "The before content, often an `<img>` or `<svg>` element.",
              "name": "before"
            },
            {
              "description": "The after content, often an `<img>` or `<svg>` element.",
              "name": "after"
            },
            {
              "description": "The icon used inside the handle.",
              "name": "handle"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "handle",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "number"
              },
              "default": "50",
              "description": "The position of the divider as a percentage."
            },
            {
              "kind": "method",
              "name": "handleDrag",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePositionChange"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "description": "Emitted when the position changes."
            },
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "cssStates": [
            {
              "description": "Applied when the comparison is being dragged.",
              "name": "dragging"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Compare visual differences between similar content with a sliding panel."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaComparison",
            "module": "src/components/comparison/comparison.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/copy-button/copy-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaCopyButton",
          "cssParts": [
            {
              "description": "The internal `<button>` element.",
              "name": "button"
            },
            {
              "description": "The container that holds the copy icon.",
              "name": "copy-icon"
            },
            {
              "description": "The container that holds the success icon.",
              "name": "success-icon"
            },
            {
              "description": "The container that holds the error icon.",
              "name": "error-icon"
            },
            {
              "description": "The tooltip's exported `base` part.",
              "name": "tooltip__base"
            },
            {
              "description": "The tooltip's exported `popup` part.",
              "name": "tooltip__base__popup"
            },
            {
              "description": "The tooltip's exported `arrow` part.",
              "name": "tooltip__base__arrow"
            },
            {
              "description": "The tooltip's exported `body` part.",
              "name": "tooltip__body"
            }
          ],
          "slots": [
            {
              "description": "The icon to show in the default copy state. Works best with `<wa-icon>`.",
              "name": "copy-icon"
            },
            {
              "description": "The icon to show when the content is copied. Works best with `<wa-icon>`.",
              "name": "success-icon"
            },
            {
              "description": "The icon to show when a copy error occurs. Works best with `<wa-icon>`.",
              "name": "error-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "[visuallyHidden, styles]",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "copyIcon",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "successIcon",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "errorIcon",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "tooltip",
              "type": {
                "text": "WaTooltip"
              }
            },
            {
              "kind": "field",
              "name": "isCopying",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "'rest' | 'success' | 'error'"
              },
              "default": "'rest'"
            },
            {
              "kind": "field",
              "name": "currentLabel",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The text value to copy."
            },
            {
              "kind": "field",
              "name": "from",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An id that references an element in the same document from which data will be copied. If both this and `value` are\npresent, this value will take precedence. By default, the target element's `textContent` will be copied. To copy an\nattribute, append the attribute name wrapped in square brackets, e.g. `from=\"el[value]\"`. To copy a property,\nappend a dot and the property name, e.g. `from=\"el.value\"`."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the copy button."
            },
            {
              "kind": "field",
              "name": "copyLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A custom label to show in the tooltip."
            },
            {
              "kind": "field",
              "name": "successLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A custom label to show in the tooltip after copying."
            },
            {
              "kind": "field",
              "name": "errorLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A custom label to show in the tooltip when a copy error occurs."
            },
            {
              "kind": "field",
              "name": "feedbackDuration",
              "type": {
                "text": "number"
              },
              "default": "1000",
              "description": "The length of time to show feedback before restoring the default trigger."
            },
            {
              "kind": "field",
              "name": "tooltipPlacement",
              "type": {
                "text": "'top' | 'right' | 'bottom' | 'left'"
              },
              "default": "'top'",
              "description": "The preferred placement of the tooltip."
            },
            {
              "kind": "method",
              "name": "handleCopy",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "showStatus",
              "privacy": "private",
              "parameters": [
                {
                  "name": "status",
                  "type": {
                    "text": "'success' | 'error'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "description": "Emitted when the data has been copied.",
              "name": "wa-copy"
            },
            {
              "description": "Emitted when the data could not be copied.",
              "name": "wa-error"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Copies text data to the clipboard when the user clicks the trigger."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaCopyButton",
            "module": "src/components/copy-button/copy-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/details/details.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaDetails",
          "cssProperties": [
            {
              "description": "The amount of space around and between the details' content. Expects a single value.",
              "name": "--spacing"
            },
            {
              "description": "The show duration to use when applying built-in animation classes.",
              "name": "--show-duration",
              "default": "200ms"
            },
            {
              "description": "The hide duration to use when applying built-in animation classes.",
              "name": "--hide-duration",
              "default": "200ms"
            }
          ],
          "cssParts": [
            {
              "description": "The inner `<details>` element used to render the component. Styles you apply to the component are automatically applied to this part, so you usually don't need to deal with it unless you need to set the `display` property.",
              "name": "base"
            },
            {
              "description": "The header that wraps both the summary and the expand/collapse icon.",
              "name": "header"
            },
            {
              "description": "The container that wraps the summary.",
              "name": "summary"
            },
            {
              "description": "The container that wraps the expand/collapse icons.",
              "name": "icon"
            },
            {
              "description": "The details content.",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "The details' main content.",
              "name": ""
            },
            {
              "description": "The details' summary. Alternatively, you can use the `summary` attribute.",
              "name": "summary"
            },
            {
              "description": "Optional expand icon to use instead of the default. Works best with `<wa-icon>`.",
              "name": "expand-icon"
            },
            {
              "description": "Optional collapse icon to use instead of the default. Works best with `<wa-icon>`.",
              "name": "collapse-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "detailsObserver",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "details",
              "type": {
                "text": "HTMLDetailsElement"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "expandIconSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the details is open. You can toggle this attribute to show and hide the details, or you\ncan use the `show()` and `hide()` methods and this attribute will reflect the details' open state."
            },
            {
              "kind": "field",
              "name": "summary",
              "type": {
                "text": "string"
              },
              "description": "The summary to show in the header. If you need to display HTML, use the `summary` slot instead."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "Groups related details elements. When one opens, others with the same name will close."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the details so it can't be toggled."
            },
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "'filled' | 'outlined' | 'plain'"
              },
              "default": "'outlined'",
              "description": "The element's visual appearance."
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSummaryClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSummaryKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "closeOthersWithSameName",
              "privacy": "private",
              "description": "Closes other <wa-details> elements in the same document when they have the same name."
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the details."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the details"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "description": "Emitted when the details opens.",
              "name": "wa-show"
            },
            {
              "description": "Emitted after the details opens and all animations are complete.",
              "name": "wa-after-show"
            },
            {
              "description": "Emitted when the details closes.",
              "name": "wa-hide"
            },
            {
              "description": "Emitted after the details closes and all animations are complete.",
              "name": "wa-after-hide"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Details show a brief summary and expand to show additional content."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaDetails",
            "module": "src/components/details/details.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/divider/divider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaDivider",
          "cssProperties": [
            {
              "description": "The color of the divider.",
              "name": "--color"
            },
            {
              "description": "The width of the divider.",
              "name": "--width"
            },
            {
              "description": "The spacing of the divider.",
              "name": "--spacing"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "description": "Sets the divider's orientation."
            },
            {
              "kind": "method",
              "name": "handleVerticalChange"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Dividers are used to visually separate or group elements.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaDivider",
            "module": "src/components/divider/divider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/drawer/drawer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaDrawer",
          "cssProperties": [
            {
              "description": "The amount of space around and between the drawer's content.",
              "name": "--spacing"
            },
            {
              "description": "The preferred size of the drawer. This will be applied to the drawer's width or height depending on its `placement`. Note that the drawer will shrink to accommodate smaller screens.",
              "name": "--size"
            },
            {
              "description": "The animation duration when showing the drawer.",
              "name": "--show-duration",
              "default": "200ms"
            },
            {
              "description": "The animation duration when hiding the drawer.",
              "name": "--hide-duration",
              "default": "200ms"
            }
          ],
          "cssParts": [
            {
              "description": "The drawer's header. This element wraps the title and header actions.",
              "name": "header"
            },
            {
              "description": "Optional actions to add to the header. Works best with `<wa-button>`.",
              "name": "header-actions"
            },
            {
              "description": "The drawer's title.",
              "name": "title"
            },
            {
              "description": "The close button, a `<wa-button>`.",
              "name": "close-button"
            },
            {
              "description": "The close button's exported `base` part.",
              "name": "close-button__base"
            },
            {
              "description": "The drawer's body.",
              "name": "body"
            },
            {
              "description": "The drawer's footer.",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "The drawer's main content.",
              "name": ""
            },
            {
              "description": "The drawer's label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "Optional actions to add to the header. Works best with `<wa-button>`.",
              "name": "header-actions"
            },
            {
              "description": "The drawer's footer, usually one or more buttons representing various options.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'footer', 'header-actions', 'label')"
            },
            {
              "kind": "field",
              "name": "originalTrigger",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "drawer",
              "type": {
                "text": "HTMLDialogElement"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the drawer is open. Toggle this attribute to show and hide the drawer."
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The drawer's label as displayed in the header. You should always include a relevant label, as it is required for\nproper accessibility. If you need to display HTML, use the `label` slot instead."
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'end' | 'bottom' | 'start'"
              },
              "default": "'end'",
              "description": "The direction from which the drawer will open."
            },
            {
              "kind": "field",
              "name": "withoutHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the header. This will also remove the default close button."
            },
            {
              "kind": "field",
              "name": "lightDismiss",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "When enabled, the drawer will be closed when the user clicks outside of it."
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "requestClose",
              "privacy": "private",
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDialogCancel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDialogClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDialogPointerDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "private",
              "description": "Shows the drawer."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "description": "Exposes the internal modal utility that controls focus trapping. To temporarily disable focus trapping and allow third-party modals spawned from an active Shoelace modal, call `modal.activateExternal()` when the third-party modal opens. Upon closing, call `modal.deactivateExternal()` to restore Shoelace's focus trapping.",
              "name": "modal",
              "kind": "field"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "description": "Emitted when the drawer opens.",
              "name": "wa-show"
            },
            {
              "description": "Emitted after the drawer opens and all animations are complete.",
              "name": "wa-after-show"
            },
            {
              "description": "Emitted when the drawer is requesting to close. Calling `event.preventDefault()` will prevent the drawer from closing. You can inspect `event.detail.source` to see which element caused the drawer to close. If the source is the drawer element itself, the user has pressed [[Escape]] or the drawer has been closed programmatically. Avoid using this unless closing the drawer will result in destructive behavior such as data loss.",
              "name": "wa-hide",
              "type": {
                "text": "{ source: Element }"
              }
            },
            {
              "description": "Emitted after the drawer closes and all animations are complete.",
              "name": "wa-after-hide"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Drawers slide in from a container to expose additional options and information."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaDrawer",
            "module": "src/components/drawer/drawer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dialog/dialog.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaDialog",
          "cssProperties": [
            {
              "description": "The amount of space around and between the dialog's content.",
              "name": "--spacing"
            },
            {
              "description": "The preferred width of the dialog. Note that the dialog will shrink to accommodate smaller screens.",
              "name": "--width"
            },
            {
              "description": "The animation duration when showing the dialog.",
              "name": "--show-duration",
              "default": "200ms"
            },
            {
              "description": "The animation duration when hiding the dialog.",
              "name": "--hide-duration",
              "default": "200ms"
            }
          ],
          "cssParts": [
            {
              "description": "The dialog's header. This element wraps the title and header actions.",
              "name": "header"
            },
            {
              "description": "Optional actions to add to the header. Works best with `<wa-button>`.",
              "name": "header-actions"
            },
            {
              "description": "The dialog's title.",
              "name": "title"
            },
            {
              "description": "The close button, a `<wa-button>`.",
              "name": "close-button"
            },
            {
              "description": "The close button's exported `base` part.",
              "name": "close-button__base"
            },
            {
              "description": "The dialog's body.",
              "name": "body"
            },
            {
              "description": "The dialog's footer.",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "The dialog's main content.",
              "name": ""
            },
            {
              "description": "The dialog's label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "Optional actions to add to the header. Works best with `<wa-button>`.",
              "name": "header-actions"
            },
            {
              "description": "The dialog's footer, usually one or more buttons representing various options.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'footer', 'header-actions', 'label')"
            },
            {
              "kind": "field",
              "name": "originalTrigger",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "dialog",
              "type": {
                "text": "HTMLDialogElement"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the dialog is open. Toggle this attribute to show and hide the dialog."
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The dialog's label as displayed in the header. You should always include a relevant label, as it is required for\nproper accessibility. If you need to display HTML, use the `label` slot instead."
            },
            {
              "kind": "field",
              "name": "withoutHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the header. This will also remove the default close button."
            },
            {
              "kind": "field",
              "name": "lightDismiss",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When enabled, the dialog will be closed when the user clicks outside of it."
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "requestClose",
              "privacy": "private",
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDialogCancel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDialogClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDialogPointerDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "private",
              "description": "Shows the dialog."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "description": "Emitted when the dialog opens.",
              "name": "wa-show"
            },
            {
              "description": "Emitted after the dialog opens and all animations are complete.",
              "name": "wa-after-show"
            },
            {
              "type": {
                "text": "{ source: Element }"
              },
              "description": "Emitted when the dialog is requested to close. Calling `event.preventDefault()` will prevent the dialog from closing. You can inspect `event.detail.source` to see which element caused the dialog to close. If the source is the dialog element itself, the user has pressed [[Escape]] or the dialog has been closed programmatically. Avoid using this unless closing the dialog will result in destructive behavior such as data loss.",
              "name": "wa-hide"
            },
            {
              "description": "Emitted after the dialog closes and all animations are complete.",
              "name": "wa-after-hide"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Dialogs, sometimes called \"modals\", appear above the page and require the user's immediate attention."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaDialog",
            "module": "src/components/dialog/dialog.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown-item/dropdown-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaDropdownItem",
          "cssParts": [
            {
              "description": "The checkmark icon (a `<wa-icon>` element) when the item is a checkbox.",
              "name": "checkmark"
            },
            {
              "description": "The container for the icon slot.",
              "name": "icon"
            },
            {
              "description": "The container for the label slot.",
              "name": "label"
            },
            {
              "description": "The container for the details slot.",
              "name": "details"
            },
            {
              "description": "The submenu indicator icon (a `<wa-icon>` element).",
              "name": "submenu-icon"
            },
            {
              "description": "The submenu container.",
              "name": "submenu"
            }
          ],
          "slots": [
            {
              "description": "The dropdown item's label.",
              "name": ""
            },
            {
              "description": "An optional icon to display before the label.",
              "name": "icon"
            },
            {
              "description": "Additional content or details to display after the label.",
              "name": "details"
            },
            {
              "description": "Submenu items, typically `<wa-dropdown-item>` elements, to create a nested menu.",
              "name": "submenu"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, '[default]', 'start', 'end')"
            },
            {
              "kind": "field",
              "name": "submenuElement",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'danger' | 'default'"
              },
              "default": "'default'",
              "description": "The type of menu item to render."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "An optional value for the menu item. This is useful for determining which item was selected when listening to the\ndropdown's `wa-select` event."
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'normal' | 'checkbox'"
              },
              "default": "'normal'",
              "description": "Set to `checkbox` to make the item a checkbox."
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Set to true to check the dropdown item. Only valid when `type` is `checkbox`."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the dropdown item."
            },
            {
              "kind": "field",
              "name": "submenuOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the submenu is currently open."
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateHasSubmenuState",
              "privacy": "private",
              "description": "Update the has-submenu custom state"
            },
            {
              "kind": "method",
              "name": "openSubmenu",
              "description": "Opens the submenu."
            },
            {
              "kind": "method",
              "name": "notifyParentOfOpening",
              "privacy": "private",
              "description": "Notifies the parent dropdown that this item is opening its submenu"
            },
            {
              "kind": "method",
              "name": "closeSubmenu",
              "description": "Closes the submenu."
            },
            {
              "kind": "method",
              "name": "getSubmenuItems",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "WaDropdownItem[]"
                }
              },
              "description": "Gets all dropdown items in the submenu."
            },
            {
              "kind": "method",
              "name": "handleMouseEnter",
              "privacy": "private",
              "description": "Handles mouse enter to open the submenu"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the dropdown item loses focus.",
              "name": "blur"
            },
            {
              "description": "Emitted when the dropdown item gains focus.",
              "name": "focus"
            },
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Represents an individual item within a dropdown menu, supporting standard items, checkboxes, and submenus."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaDropdownItem",
            "module": "src/components/dropdown-item/dropdown-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaDropdown",
          "cssProperties": [
            {
              "description": "The duration of the show animation.",
              "name": "--show-duration"
            },
            {
              "description": "The duration of the hide animation.",
              "name": "--hide-duration"
            }
          ],
          "cssParts": [
            {
              "description": "The component's host element.",
              "name": "base"
            },
            {
              "description": "The dropdown menu container.",
              "name": "menu"
            }
          ],
          "slots": [
            {
              "description": "The dropdown's items, typically `<wa-dropdown-item>` elements.",
              "name": ""
            },
            {
              "description": "The element that triggers the dropdown, such as a `<wa-button>` or `<button>`.",
              "name": "trigger"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "[sizeStyles, styles]",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "submenuCleanups",
              "type": {
                "text": "Map<WaDropdownItem, ReturnType<typeof autoUpdate>>"
              },
              "privacy": "private",
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "userTypedQuery",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "userTypedTimeout",
              "type": {
                "text": "ReturnType<typeof setTimeout>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "openSubmenuStack",
              "type": {
                "text": "WaDropdownItem[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "WaPopup"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Opens or closes the dropdown."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The dropdown's size."
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
              },
              "default": "'bottom-start'",
              "description": "The placement of the dropdown menu in reference to the trigger. The menu will shift to a more optimal location if\nthe preferred placement doesn't have enough room."
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance of the dropdown menu from its trigger."
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The offset of the dropdown menu along its trigger."
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getItems",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "WaDropdownItem[]"
                }
              },
              "parameters": [
                {
                  "name": "includeDisabled",
                  "default": "false"
                }
              ],
              "description": "Gets all <wa-dropdown-item> elements slotted in the menu that aren't disabled."
            },
            {
              "kind": "method",
              "name": "getSubmenuItems",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "WaDropdownItem[]"
                }
              },
              "parameters": [
                {
                  "name": "parentItem",
                  "type": {
                    "text": "WaDropdownItem"
                  }
                },
                {
                  "name": "includeDisabled",
                  "default": "false"
                }
              ],
              "description": "Gets all dropdown items in a specific submenu."
            },
            {
              "kind": "method",
              "name": "syncItemSizes",
              "privacy": "private",
              "description": "Syncs item sizes with the dropdown's size property."
            },
            {
              "kind": "method",
              "name": "addToSubmenuStack",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "WaDropdownItem"
                  }
                }
              ],
              "description": "Handles the submenu navigation stack"
            },
            {
              "kind": "method",
              "name": "removeFromSubmenuStack",
              "privacy": "private",
              "description": "Removes the last item from the submenu stack"
            },
            {
              "kind": "method",
              "name": "getCurrentSubmenuItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "WaDropdownItem | undefined"
                }
              },
              "description": "Gets the current active submenu item"
            },
            {
              "kind": "method",
              "name": "closeAllSubmenus",
              "privacy": "private",
              "description": "Closes all submenus in the dropdown."
            },
            {
              "kind": "method",
              "name": "closeSiblingSubmenus",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "WaDropdownItem"
                  }
                }
              ],
              "description": "Closes sibling submenus at the same level as the specified item."
            },
            {
              "kind": "method",
              "name": "getTrigger",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLButtonElement | WaButton | null"
                }
              },
              "description": "Get the slotted trigger button, a <wa-button> or <button> element"
            },
            {
              "kind": "method",
              "name": "showMenu",
              "privacy": "private",
              "description": "Shows the dropdown menu. This should only be called from within updated()."
            },
            {
              "kind": "method",
              "name": "hideMenu",
              "privacy": "private",
              "description": "Hides the dropdown menu. This should only be called from within updated()."
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private",
              "description": "Handles key down events when the menu is open"
            },
            {
              "kind": "field",
              "name": "handleDocumentPointerDown",
              "privacy": "private",
              "description": "Handles pointer down events when the dropdown is open."
            },
            {
              "kind": "method",
              "name": "handleMenuClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Handles clicks on the menu."
            },
            {
              "kind": "method",
              "name": "handleMenuSlotChange",
              "privacy": "private",
              "description": "Prepares dropdown items when they get added or removed"
            },
            {
              "kind": "method",
              "name": "handleTriggerClick",
              "privacy": "private",
              "description": "Toggles the dropdown menu"
            },
            {
              "kind": "method",
              "name": "handleSubmenuOpening",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Handles submenu opening events"
            },
            {
              "kind": "method",
              "name": "setupSubmenuPosition",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "WaDropdownItem"
                  }
                }
              ],
              "description": "Sets up submenu positioning with autoUpdate"
            },
            {
              "kind": "method",
              "name": "handleSubmenuSlotChange",
              "privacy": "private",
              "static": true,
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "processSubmenuItems",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "WaDropdownItem"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "cleanupSubmenuPosition",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "WaDropdownItem"
                  }
                }
              ],
              "description": "Cleans up submenu positioning"
            },
            {
              "kind": "method",
              "name": "positionSubmenu",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "WaDropdownItem"
                  }
                }
              ],
              "description": "Positions a submenu relative to its parent item"
            },
            {
              "kind": "method",
              "name": "updateSafeTriangleCoordinates",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "WaDropdownItem"
                  }
                }
              ],
              "description": "Updates the safe triangle coordinates for a submenu"
            },
            {
              "kind": "field",
              "name": "handleGlobalMouseMove",
              "privacy": "private",
              "description": "Handle global mouse movement for safe triangle logic"
            },
            {
              "kind": "method",
              "name": "makeSelection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "WaDropdownItem"
                  }
                }
              ],
              "description": "Makes a selection, emits the wa-select event, and closes the dropdown."
            },
            {
              "kind": "method",
              "name": "syncAriaAttributes",
              "privacy": "private",
              "description": "Syncs aria attributes on the slotted trigger element and the menu based on the dropdown's current state"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "description": "Emitted when the dropdown is about to show.",
              "name": "wa-show"
            },
            {
              "description": "Emitted after the dropdown has been shown.",
              "name": "wa-after-show"
            },
            {
              "description": "Emitted when the dropdown is about to hide.",
              "name": "wa-hide"
            },
            {
              "description": "Emitted after the dropdown has been hidden.",
              "name": "wa-after-hide"
            },
            {
              "description": "Emitted when an item in the dropdown is selected.",
              "name": "wa-select"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Dropdowns display a list of options that can be triggered by a button or other element. They support\nkeyboard navigation, submenus, and various customization options."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaDropdown",
            "module": "src/components/dropdown/dropdown.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/format-bytes/format-bytes.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaFormatBytes",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number to format in bytes."
            },
            {
              "kind": "field",
              "name": "unit",
              "type": {
                "text": "'byte' | 'bit'"
              },
              "default": "'byte'",
              "description": "The type of unit to display."
            },
            {
              "kind": "field",
              "name": "display",
              "type": {
                "text": "'long' | 'short' | 'narrow'"
              },
              "default": "'short'",
              "description": "Determines how to display the result, e.g. \"100 bytes\", \"100 b\", or \"100b\"."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Formats a number as a human readable bytes value.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaFormatBytes",
            "module": "src/components/format-bytes/format-bytes.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/format-date/format-date.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaFormatDate",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "Date | string"
              },
              "default": "new Date()",
              "description": "The date/time to format. If not set, the current date and time will be used. When passing a string, it's strongly\nrecommended to use the ISO 8601 format to ensure timezones are handled correctly. To convert a date to this format\nin JavaScript, use [`date.toISOString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)."
            },
            {
              "kind": "field",
              "name": "weekday",
              "type": {
                "text": "'narrow' | 'short' | 'long'"
              },
              "description": "The format for displaying the weekday."
            },
            {
              "kind": "field",
              "name": "era",
              "type": {
                "text": "'narrow' | 'short' | 'long'"
              },
              "description": "The format for displaying the era."
            },
            {
              "kind": "field",
              "name": "year",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the year."
            },
            {
              "kind": "field",
              "name": "month",
              "type": {
                "text": "'numeric' | '2-digit' | 'narrow' | 'short' | 'long'"
              },
              "description": "The format for displaying the month."
            },
            {
              "kind": "field",
              "name": "day",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the day."
            },
            {
              "kind": "field",
              "name": "hour",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the hour."
            },
            {
              "kind": "field",
              "name": "minute",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the minute."
            },
            {
              "kind": "field",
              "name": "second",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the second."
            },
            {
              "kind": "field",
              "name": "timeZoneName",
              "type": {
                "text": "'short' | 'long'"
              },
              "description": "The format for displaying the time."
            },
            {
              "kind": "field",
              "name": "timeZone",
              "type": {
                "text": "string"
              },
              "description": "The time zone to express the time in."
            },
            {
              "kind": "field",
              "name": "hourFormat",
              "type": {
                "text": "'auto' | '12' | '24'"
              },
              "default": "'auto'",
              "description": "The format for displaying the hour."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Formats a date/time using the specified locale and options.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaFormatDate",
            "module": "src/components/format-date/format-date.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/format-number/format-number.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaFormatNumber",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number to format."
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'currency' | 'decimal' | 'percent'"
              },
              "default": "'decimal'",
              "description": "The formatting style to use."
            },
            {
              "kind": "field",
              "name": "withoutGrouping",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Turns off grouping separators."
            },
            {
              "kind": "field",
              "name": "currency",
              "type": {
                "text": "string"
              },
              "default": "'USD'",
              "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code to use when formatting."
            },
            {
              "kind": "field",
              "name": "currencyDisplay",
              "type": {
                "text": "'symbol' | 'narrowSymbol' | 'code' | 'name'"
              },
              "default": "'symbol'",
              "description": "How to display the currency."
            },
            {
              "kind": "field",
              "name": "minimumIntegerDigits",
              "type": {
                "text": "number"
              },
              "description": "The minimum number of integer digits to use. Possible values are 1-21."
            },
            {
              "kind": "field",
              "name": "minimumFractionDigits",
              "type": {
                "text": "number"
              },
              "description": "The minimum number of fraction digits to use. Possible values are 0-100."
            },
            {
              "kind": "field",
              "name": "maximumFractionDigits",
              "type": {
                "text": "number"
              },
              "description": "The maximum number of fraction digits to use. Possible values are 0-100."
            },
            {
              "kind": "field",
              "name": "minimumSignificantDigits",
              "type": {
                "text": "number"
              },
              "description": "The minimum number of significant digits to use. Possible values are 1-21."
            },
            {
              "kind": "field",
              "name": "maximumSignificantDigits",
              "type": {
                "text": "number"
              },
              "description": "The maximum number of significant digits to use,. Possible values are 1-21."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Formats a number using the specified locale and options.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaFormatNumber",
            "module": "src/components/format-number/format-number.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaIcon",
          "cssProperties": [
            {
              "description": "Sets a duotone icon's primary color.",
              "name": "--primary-color",
              "default": "currentColor"
            },
            {
              "description": "Sets a duotone icon's primary opacity.",
              "name": "--primary-opacity",
              "default": "1"
            },
            {
              "description": "Sets a duotone icon's secondary color.",
              "name": "--secondary-color",
              "default": "currentColor"
            },
            {
              "description": "Sets a duotone icon's secondary opacity.",
              "name": "--secondary-opacity",
              "default": "0.4"
            }
          ],
          "cssParts": [
            {
              "description": "The internal SVG element.",
              "name": "svg"
            },
            {
              "description": "The `<use>` element generated when using `spriteSheet: true`",
              "name": "use"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "svg",
              "type": {
                "text": "SVGElement | HTMLTemplateResult | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon to draw. Available names depend on the icon library being used."
            },
            {
              "kind": "field",
              "name": "family",
              "type": {
                "text": "string"
              },
              "description": "The family of icons to choose from. For Font Awesome Free, valid options include `classic` and `brands`. For\nFont Awesome Pro subscribers, valid options include, `classic`, `sharp`, `duotone`, `sharp-duotone`, and `brands`.\nA valid kit code must be present to show pro icons via CDN. You can set `<html data-fa-kit-code=\"...\">` to provide\none."
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "string"
              },
              "description": "The name of the icon's variant. For Font Awesome, valid options include `thin`, `light`, `regular`, and `solid` for\nthe `classic` and `sharp` families. Some variants require a Font Awesome Pro subscription. Custom icon libraries\nmay or may not use this property."
            },
            {
              "kind": "field",
              "name": "fixedWidth",
              "type": {
                "text": "false"
              },
              "description": "Draws the icon in a fixed-width both."
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "An external URL of an SVG file. Be sure you trust the content you are including, as it will be executed as code and\ncan result in XSS attacks."
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An alternate description to use for assistive devices. If omitted, the icon will be considered presentational and\nignored by assistive devices."
            },
            {
              "kind": "field",
              "name": "library",
              "type": {
                "text": "string"
              },
              "default": "'default'",
              "description": "The name of a registered custom icon library."
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "getIconSource",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "IconSource"
                }
              }
            },
            {
              "kind": "method",
              "name": "resolveIcon",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<SVGResult>"
                }
              },
              "parameters": [
                {
                  "name": "url",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "library",
                  "optional": true,
                  "type": {
                    "text": "IconLibrary"
                  }
                }
              ],
              "description": "Given a URL, this function returns the resulting SVG element or an appropriate error symbol."
            },
            {
              "kind": "method",
              "name": "handleLabelChange"
            },
            {
              "kind": "method",
              "name": "setIcon"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "description": "Emitted when the icon has loaded. When using `spriteSheet: true` this will not emit.",
              "name": "wa-load"
            },
            {
              "description": "Emitted when the icon fails to load due to an error. When using `spriteSheet: true` this will not emit.",
              "name": "wa-error"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Icons are symbols that can be used to represent various options within an application."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaIcon",
            "module": "src/components/icon/icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/library.default.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "library",
          "type": {
            "text": "IconLibrary"
          },
          "default": "{ name: 'default', resolver: (name: string, family = 'classic', variant = 'solid') => { return getIconUrl(name, family, variant); }, }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "library",
            "module": "src/components/icon/library.default.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/library.system.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "icons",
          "type": {
            "text": "{ [key: string]: { [key: string]: string } }"
          },
          "default": "{ // // Solid variant // solid: { check: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"14\" viewBox=\"0 0 448 512\"><path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"/></svg>`, 'chevron-down': `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"16\" viewBox=\"0 0 512 512\"><path d=\"M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z\"/></svg>`, 'chevron-left': `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"10\" viewBox=\"0 0 320 512\"><path d=\"M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l192 192c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L77.3 256 246.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-192 192z\"/></svg>`, 'chevron-right': `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"10\" viewBox=\"0 0 320 512\"><path d=\"M310.6 233.4c12.5 12.5 12.5 32.8 0 45.3l-192 192c-12.5 12.5-32.8 12.5-45.3 0s12.5-32.8 0-45.3L242.7 256 73.4 86.6c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0l192 192z\"/></svg>`, circle: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"16\" viewBox=\"0 0 512 512\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z\"/></svg>`, eyedropper: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"16\" viewBox=\"0 0 512 512\"><path d=\"M341.6 29.2L240.1 130.8l-9.4-9.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-9.4-9.4L482.8 170.4c39-39 39-102.2 0-141.1s-102.2-39-141.1 0zM55.4 323.3c-15 15-23.4 35.4-23.4 56.6v42.4L5.4 462.2c-8.5 12.7-6.8 29.6 4 40.4s27.7 12.5 40.4 4L89.7 480h42.4c21.2 0 41.6-8.4 56.6-23.4L309.4 335.9l-45.3-45.3L143.4 411.3c-3 3-7.1 4.7-11.3 4.7H96V379.9c0-4.2 1.7-8.3 4.7-11.3L221.4 247.9l-45.3-45.3L55.4 323.3z\"/></svg>`, 'grip-vertical': `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"10\" viewBox=\"0 0 320 512\"><path d=\"M40 352l48 0c22.1 0 40 17.9 40 40l0 48c0 22.1-17.9 40-40 40l-48 0c-22.1 0-40-17.9-40-40l0-48c0-22.1 17.9-40 40-40zm192 0l48 0c22.1 0 40 17.9 40 40l0 48c0 22.1-17.9 40-40 40l-48 0c-22.1 0-40-17.9-40-40l0-48c0-22.1 17.9-40 40-40zM40 320c-22.1 0-40-17.9-40-40l0-48c0-22.1 17.9-40 40-40l48 0c22.1 0 40 17.9 40 40l0 48c0 22.1-17.9 40-40 40l-48 0zM232 192l48 0c22.1 0 40 17.9 40 40l0 48c0 22.1-17.9 40-40 40l-48 0c-22.1 0-40-17.9-40-40l0-48c0-22.1 17.9-40 40-40zM40 160c-22.1 0-40-17.9-40-40L0 72C0 49.9 17.9 32 40 32l48 0c22.1 0 40 17.9 40 40l0 48c0 22.1-17.9 40-40 40l-48 0zM232 32l48 0c22.1 0 40 17.9 40 40l0 48c0 22.1-17.9 40-40 40l-48 0c-22.1 0-40-17.9-40-40l0-48c0-22.1 17.9-40 40-40z\"/></svg>`, indeterminate: `<svg part=\"indeterminate-icon\" class=\"icon\" viewBox=\"0 0 16 16\"><g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\"><g stroke=\"currentColor\" stroke-width=\"2\"><g transform=\"translate(2.285714, 6.857143)\"><path d=\"M10.2857143,1.14285714 L1.14285714,1.14285714\"></path></g></g></g></svg>`, minus: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"14\" viewBox=\"0 0 448 512\"><path d=\"M432 256c0 17.7-14.3 32-32 32L48 288c-17.7 0-32-14.3-32-32s14.3-32 32-32l352 0c17.7 0 32 14.3 32 32z\"/></svg>`, pause: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"10\" viewBox=\"0 0 320 512\"><path d=\"M48 64C21.5 64 0 85.5 0 112V400c0 26.5 21.5 48 48 48H80c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48H48zm192 0c-26.5 0-48 21.5-48 48V400c0 26.5 21.5 48 48 48h32c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48H240z\"/></svg>`, play: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"12\" viewBox=\"0 0 384 512\"><path d=\"M73 39c-14.8-9.1-33.4-9.4-48.5-.9S0 62.6 0 80V432c0 17.4 9.4 33.4 24.5 41.9s33.7 8.1 48.5-.9L361 297c14.3-8.7 23-24.2 23-41s-8.7-32.2-23-41L73 39z\"/></svg>`, star: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"18\" viewBox=\"0 0 576 512\"><path d=\"M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z\"/></svg>`, user: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"14\" viewBox=\"0 0 448 512\"><path d=\"M224 256A128 128 0 1 0 224 0a128 128 0 1 0 0 256zm-45.7 48C79.8 304 0 383.8 0 482.3C0 498.7 13.3 512 29.7 512H418.3c16.4 0 29.7-13.3 29.7-29.7C448 383.8 368.2 304 269.7 304H178.3z\"/></svg>`, xmark: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"12\" viewBox=\"0 0 384 512\"><path d=\"M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z\"/></svg>`, }, // // Regular variant // regular: { 'circle-question': `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--><path d=\"M464 256A208 208 0 1 0 48 256a208 208 0 1 0 416 0zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zm169.8-90.7c7.9-22.3 29.1-37.3 52.8-37.3l58.3 0c34.9 0 63.1 28.3 63.1 63.1c0 22.6-12.1 43.5-31.7 54.8L280 264.4c-.2 13-10.9 23.6-24 23.6c-13.3 0-24-10.7-24-24l0-13.5c0-8.6 4.6-16.5 12.1-20.8l44.3-25.4c4.7-2.7 7.6-7.7 7.6-13.1c0-8.4-6.8-15.1-15.1-15.1l-58.3 0c-3.4 0-6.4 2.1-7.5 5.3l-.4 1.2c-4.4 12.5-18.2 19-30.6 14.6s-19-18.2-14.6-30.6l.4-1.2zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`, 'circle-xmark': `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"16\" viewBox=\"0 0 512 512\"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.--><path d=\"M256 48a208 208 0 1 1 0 416 208 208 0 1 1 0-416zm0 464A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM175 175c-9.4 9.4-9.4 24.6 0 33.9l47 47-47 47c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l47-47 47 47c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-47-47 47-47c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-47 47-47-47c-9.4-9.4-24.6-9.4-33.9 0z\"/></svg>`, copy: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"14\" viewBox=\"0 0 448 512\"><path d=\"M384 336H192c-8.8 0-16-7.2-16-16V64c0-8.8 7.2-16 16-16l140.1 0L400 115.9V320c0 8.8-7.2 16-16 16zM192 384H384c35.3 0 64-28.7 64-64V115.9c0-12.7-5.1-24.9-14.1-33.9L366.1 14.1c-9-9-21.2-14.1-33.9-14.1H192c-35.3 0-64 28.7-64 64V320c0 35.3 28.7 64 64 64zM64 128c-35.3 0-64 28.7-64 64V448c0 35.3 28.7 64 64 64H256c35.3 0 64-28.7 64-64V416H272v32c0 8.8-7.2 16-16 16H64c-8.8 0-16-7.2-16-16V192c0-8.8 7.2-16 16-16H96V128H64z\"/></svg>`, eye: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"18\" viewBox=\"0 0 576 512\"><path d=\"M288 80c-65.2 0-118.8 29.6-159.9 67.7C89.6 183.5 63 226 49.4 256c13.6 30 40.2 72.5 78.6 108.3C169.2 402.4 222.8 432 288 432s118.8-29.6 159.9-67.7C486.4 328.5 513 286 526.6 256c-13.6-30-40.2-72.5-78.6-108.3C406.8 109.6 353.2 80 288 80zM95.4 112.6C142.5 68.8 207.2 32 288 32s145.5 36.8 192.6 80.6c46.8 43.5 78.1 95.4 93 131.1c3.3 7.9 3.3 16.7 0 24.6c-14.9 35.7-46.2 87.7-93 131.1C433.5 443.2 368.8 480 288 480s-145.5-36.8-192.6-80.6C48.6 356 17.3 304 2.5 268.3c-3.3-7.9-3.3-16.7 0-24.6C17.3 208 48.6 156 95.4 112.6zM288 336c44.2 0 80-35.8 80-80s-35.8-80-80-80c-.7 0-1.3 0-2 0c1.3 5.1 2 10.5 2 16c0 35.3-28.7 64-64 64c-5.5 0-10.9-.7-16-2c0 .7 0 1.3 0 2c0 44.2 35.8 80 80 80zm0-208a128 128 0 1 1 0 256 128 128 0 1 1 0-256z\"/></svg>`, 'eye-slash': `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"20\" viewBox=\"0 0 640 512\"><path d=\"M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L525.6 386.7c39.6-40.6 66.4-86.1 79.9-118.4c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C465.5 68.8 400.8 32 320 32c-68.2 0-125 26.3-169.3 60.8L38.8 5.1zm151 118.3C226 97.7 269.5 80 320 80c65.2 0 118.8 29.6 159.9 67.7C518.4 183.5 545 226 558.6 256c-12.6 28-36.6 66.8-70.9 100.9l-53.8-42.2c9.1-17.6 14.2-37.5 14.2-58.7c0-70.7-57.3-128-128-128c-32.2 0-61.7 11.9-84.2 31.5l-46.1-36.1zM394.9 284.2l-81.5-63.9c4.2-8.5 6.6-18.2 6.6-28.3c0-5.5-.7-10.9-2-16c.7 0 1.3 0 2 0c44.2 0 80 35.8 80 80c0 9.9-1.8 19.4-5.1 28.2zm51.3 163.3l-41.9-33C378.8 425.4 350.7 432 320 432c-65.2 0-118.8-29.6-159.9-67.7C121.6 328.5 95 286 81.4 256c8.3-18.4 21.5-41.5 39.4-64.8L83.1 161.5C60.3 191.2 44 220.8 34.5 243.7c-3.3 7.9-3.3 16.7 0 24.6c14.9 35.7 46.2 87.7 93 131.1C174.5 443.2 239.2 480 320 480c47.8 0 89.9-12.9 126.2-32.5zm-88-69.3L302 334c-23.5-5.4-43.1-21.2-53.7-42.3l-56.1-44.2c-.2 2.8-.3 5.6-.3 8.5c0 70.7 57.3 128 128 128c13.3 0 26.1-2 38.2-5.8z\"/></svg>`, star: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M287.9 0c9.2 0 17.6 5.2 21.6 13.5l68.6 141.3 153.2 22.6c9 1.3 16.5 7.6 19.3 16.3s.5 18.1-5.9 24.5L433.6 328.4l26.2 155.6c1.5 9-2.2 18.1-9.7 23.5s-17.3 6-25.3 1.7l-137-73.2L151 509.1c-8.1 4.3-17.9 3.7-25.3-1.7s-11.2-14.5-9.7-23.5l26.2-155.6L31.1 218.2c-6.5-6.4-8.7-15.9-5.9-24.5s10.3-14.9 19.3-16.3l153.2-22.6L266.3 13.5C270.4 5.2 278.7 0 287.9 0zm0 79L235.4 187.2c-3.5 7.1-10.2 12.1-18.1 13.3L99 217.9 184.9 303c5.5 5.5 8.1 13.3 6.8 21L171.4 443.7l105.2-56.2c7.1-3.8 15.6-3.8 22.6 0l105.2 56.2L384.2 324.1c-1.3-7.7 1.2-15.5 6.8-21l85.9-85.1L358.6 200.5c-7.8-1.2-14.6-6.1-18.1-13.3L287.9 79z\"/></svg>', }, }"
        },
        {
          "kind": "variable",
          "name": "systemLibrary",
          "type": {
            "text": "IconLibrary"
          },
          "default": "{ name: 'system', resolver: (name: string, _family = 'classic', variant = 'solid') => { let collection = icons[variant]; // Fall back to a question mark if the icon is missing let svg = collection[name] ?? icons.regular[name] ?? icons.regular['circle-question']; if (svg) { return dataUri(svg); } return ''; }, }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "icons",
          "declaration": {
            "name": "icons",
            "module": "src/components/icon/library.system.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "systemLibrary",
            "module": "src/components/icon/library.system.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/library.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "watchIcon",
          "parameters": [
            {
              "name": "icon",
              "type": {
                "text": "WaIcon"
              }
            }
          ],
          "description": "Adds an icon to the list of watched icons."
        },
        {
          "kind": "function",
          "name": "unwatchIcon",
          "parameters": [
            {
              "name": "icon",
              "type": {
                "text": "WaIcon"
              }
            }
          ],
          "description": "Removes an icon from the list of watched icons."
        },
        {
          "kind": "function",
          "name": "getIconLibrary",
          "parameters": [
            {
              "name": "name",
              "optional": true,
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Returns a library from the registry."
        },
        {
          "kind": "function",
          "name": "registerIconLibrary",
          "parameters": [
            {
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "Omit<IconLibrary, 'name'>"
              }
            }
          ],
          "description": "Adds an icon library to the registry, or overrides an existing one."
        },
        {
          "kind": "function",
          "name": "unregisterIconLibrary",
          "parameters": [
            {
              "name": "name",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Removes an icon library from the registry."
        },
        {
          "kind": "function",
          "name": "setDefaultIconFamily",
          "parameters": [
            {
              "name": "family",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Sets the default icon family."
        },
        {
          "kind": "function",
          "name": "getDefaultIconFamily",
          "description": "Gets the default icon family."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "watchIcon",
          "declaration": {
            "name": "watchIcon",
            "module": "src/components/icon/library.ts"
          }
        },
        {
          "kind": "js",
          "name": "unwatchIcon",
          "declaration": {
            "name": "unwatchIcon",
            "module": "src/components/icon/library.ts"
          }
        },
        {
          "kind": "js",
          "name": "getIconLibrary",
          "declaration": {
            "name": "getIconLibrary",
            "module": "src/components/icon/library.ts"
          }
        },
        {
          "kind": "js",
          "name": "registerIconLibrary",
          "declaration": {
            "name": "registerIconLibrary",
            "module": "src/components/icon/library.ts"
          }
        },
        {
          "kind": "js",
          "name": "unregisterIconLibrary",
          "declaration": {
            "name": "unregisterIconLibrary",
            "module": "src/components/icon/library.ts"
          }
        },
        {
          "kind": "js",
          "name": "setDefaultIconFamily",
          "declaration": {
            "name": "setDefaultIconFamily",
            "module": "src/components/icon/library.ts"
          }
        },
        {
          "kind": "js",
          "name": "getDefaultIconFamily",
          "declaration": {
            "name": "getDefaultIconFamily",
            "module": "src/components/icon/library.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input/input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaInput",
          "cssParts": [
            {
              "description": "The label",
              "name": "label"
            },
            {
              "description": "The hint's wrapper.",
              "name": "hint"
            },
            {
              "description": "The wrapper being rendered as an input",
              "name": "input"
            },
            {
              "description": "The internal `<input>` control.",
              "name": "base"
            },
            {
              "description": "The container that wraps the `start` slot.",
              "name": "start"
            },
            {
              "description": "The clear button.",
              "name": "clear-button"
            },
            {
              "description": "The password toggle button.",
              "name": "password-toggle-button"
            },
            {
              "description": "The container that wraps the `end` slot.",
              "name": "end"
            }
          ],
          "slots": [
            {
              "description": "The input's label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "An element, such as `<wa-icon>`, placed at the start of the input control.",
              "name": "start"
            },
            {
              "description": "An element, such as `<wa-icon>`, placed at the end of the input control.",
              "name": "end"
            },
            {
              "description": "An icon to use in lieu of the default clear icon.",
              "name": "clear-icon"
            },
            {
              "description": "An icon to use in lieu of the default show password icon.",
              "name": "show-password-icon"
            },
            {
              "description": "An icon to use in lieu of the default hide password icon.",
              "name": "hide-password-icon"
            },
            {
              "description": "Text that describes how to use the input. Alternatively, you can use the `hint` attribute.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              },
              "default": "[sizeStyles, formControlStyles, styles]"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...WebAwesomeFormAssociatedElement.shadowRootOptions, delegatesFocus: true }"
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "default": "[]",
              "static": true,
              "description": "Validators are static because they have `observedAttributes`, essentially attributes to \"watch\"\nfor changes. Whenever these attributes change, we want to be notified and update the validator.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "assumeInteractionOn",
              "type": {
                "text": "string[]"
              },
              "default": "['blur', 'input']",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'hint', 'label')"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "(HTMLElement & { value: unknown }) | HTMLInputElement | HTMLTextAreaElement | undefined"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "| 'date'\n    | 'datetime-local'\n    | 'email'\n    | 'number'\n    | 'password'\n    | 'search'\n    | 'tel'\n    | 'text'\n    | 'time'\n    | 'url'"
              },
              "default": "'text'",
              "description": "The type of input. Works the same as a native `<input>` element, but only a subset of types are supported. Defaults\nto `text`."
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The current value of the input, submitted as a name/value pair with form data."
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string | null"
              },
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The input's size."
            },
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "'filled' | 'outlined'"
              },
              "default": "'outlined'",
              "description": "The input's visual appearance."
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style input with rounded edges."
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's label. If you need to display HTML, use the `label` slot instead."
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's hint. If you need to display HTML, use the `hint` slot instead."
            },
            {
              "kind": "field",
              "name": "withClear",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the input is not empty."
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the input is empty."
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input readonly."
            },
            {
              "kind": "field",
              "name": "passwordToggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a button to toggle the password's visibility. Only applies to password types."
            },
            {
              "kind": "field",
              "name": "passwordVisible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether or not the password is currently visible. Only applies to password input types."
            },
            {
              "kind": "field",
              "name": "withoutSpinButtons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the browser's built-in increment/decrement spin buttons for number inputs."
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "null"
              },
              "default": "null",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work."
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a required field.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A regular expression pattern to validate input against."
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid."
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid."
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number | string"
              },
              "description": "The input's minimum value. Only applies to date and number input types."
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number | string"
              },
              "description": "The input's maximum value. Only applies to date and number input types."
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number | 'any'"
              },
              "description": "Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\nimplied, allowing any numeric value. Only applies to date and number input types."
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user."
            },
            {
              "kind": "field",
              "name": "autocorrect",
              "type": {
                "text": "'off' | 'on'"
              },
              "description": "Indicates whether the browser's autocorrect feature is on or off."
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\n[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values."
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the input should receive focus on page load."
            },
            {
              "kind": "field",
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards."
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Enables spell checking on the input."
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\nkeyboard on supportive devices."
            },
            {
              "kind": "field",
              "name": "withLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used for SSR. Will determine if the SSRed component will have the label slot rendered on initial paint."
            },
            {
              "kind": "field",
              "name": "withHint",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used for SSR. Will determine if the SSRed component will have the hint slot rendered on initial paint."
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePasswordToggle",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleStepChange"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the input."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the input."
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects all the text in the input."
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "parameters": [
                {
                  "name": "selectionStart",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionEnd",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionDirection",
                  "default": "'none'",
                  "type": {
                    "text": "'forward' | 'backward' | 'none'"
                  }
                }
              ],
              "description": "Sets the start and end positions of the text selection (0-based)."
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "'preserve'",
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces a range of text with a new string."
            },
            {
              "kind": "method",
              "name": "showPicker",
              "description": "Displays the browser picker for an input element (only works if the browser supports it for the input type)."
            },
            {
              "kind": "method",
              "name": "stepUp",
              "description": "Increments the value of a numeric input type by the value of the step attribute."
            },
            {
              "kind": "method",
              "name": "stepDown",
              "description": "Decrements the value of a numeric input type by the value of the step attribute."
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "The name of the input, submitted as a name/value pair with form data.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the form control.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueHasChanged",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasInteracted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customError",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emittedEvents",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "states",
              "type": {
                "text": "CustomStateSet"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emitInvalid",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInteraction",
              "privacy": "private",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationTarget",
              "type": {
                "text": "undefined | HTMLElement"
              },
              "description": "Override this to change where constraint validation popups are anchored.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setValidity>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomStates",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Do not use this when creating a \"Validator\". This is intended for end users of components.\nWe track manually defined custom errors so we don't clear them on accident in our validators.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "isDisabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "reason",
                  "type": {
                    "text": "'autocomplete' | 'restore'"
                  }
                }
              ],
              "description": "Called when the browser is trying to restore element’s state to state in which case reason is \"restore\", or when\nthe browser is trying to fulfill autofill on behalf of user in which case reason is \"autocomplete\". In the case of\n\"restore\", state is a string, File, or FormData object previously set as the second argument to setFormValue.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setFormValue>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "allValidators",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidity",
              "description": "Reset validity is a way of removing manual custom errors and native validation.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "name": "input",
              "type": {
                "text": "InputEvent"
              },
              "description": "Emitted when the control receives input."
            },
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "description": "Emitted when an alteration to the control's value is committed by the user."
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "blur"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "focus"
            },
            {
              "description": "Emitted when the clear button is activated.",
              "name": "wa-clear"
            },
            {
              "description": "Emitted when the form control has been checked for validity and its constraints aren't satisfied.",
              "name": "wa-invalid"
            }
          ],
          "cssStates": [
            {
              "description": "The input is empty.",
              "name": "blank"
            }
          ],
          "superclass": {
            "name": "WebAwesomeFormAssociatedElement",
            "module": "/src/internal/webawesome-form-associated-element.js"
          },
          "summary": "Inputs collect data from the user."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaInput",
            "module": "src/components/input/input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/mutation-observer/mutation-observer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaMutationObserver",
          "slots": [
            {
              "description": "The content to watch for mutations.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "mutationObserver",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "attr",
              "type": {
                "text": "string"
              },
              "description": "Watches for changes to attributes. To watch only specific attributes, separate them by a space, e.g.\n`attr=\"class id title\"`. To watch all attributes, use `*`."
            },
            {
              "kind": "field",
              "name": "attrOldValue",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the attribute's previous value should be recorded when monitoring changes."
            },
            {
              "kind": "field",
              "name": "charData",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Watches for changes to the character data contained within the node."
            },
            {
              "kind": "field",
              "name": "charDataOldValue",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the previous value of the node's text should be recorded."
            },
            {
              "kind": "field",
              "name": "childList",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Watches for the addition or removal of new child nodes."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the observer."
            },
            {
              "kind": "field",
              "name": "handleMutation",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "startObserver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "stopObserver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleChange"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "{ mutationList: MutationRecord[] }"
              },
              "description": "Emitted when a mutation occurs.",
              "name": "wa-mutation"
            },
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "The Mutation Observer component offers a thin, declarative interface to the [`MutationObserver API`](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaMutationObserver",
            "module": "src/components/mutation-observer/mutation-observer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/include/include.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaInclude",
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "The location of the HTML file to include. Be sure you trust the content you are including as it will be executed as\ncode and can result in XSS attacks."
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "'cors' | 'no-cors' | 'same-origin'"
              },
              "default": "'cors'",
              "description": "The fetch mode to use."
            },
            {
              "kind": "field",
              "name": "allowScripts",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows included scripts to be executed. Be sure you trust the content you are including as it will be executed as\ncode and can result in XSS attacks."
            },
            {
              "kind": "method",
              "name": "executeScript",
              "privacy": "private",
              "parameters": [
                {
                  "name": "script",
                  "type": {
                    "text": "HTMLScriptElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSrcChange"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "description": "Emitted when the included file is loaded.",
              "name": "wa-load"
            },
            {
              "type": {
                "text": "{ status: number }"
              },
              "description": "Emitted when the included file fails to load due to an error.",
              "name": "wa-error"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Includes give you the power to embed external HTML files into the page."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaInclude",
            "module": "src/components/include/include.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/include/request.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "requestInclude",
          "return": {
            "type": {
              "text": "Promise<IncludeFile>"
            }
          },
          "parameters": [
            {
              "name": "src",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "mode",
              "default": "'cors'",
              "type": {
                "text": "'cors' | 'no-cors' | 'same-origin'"
              }
            }
          ],
          "description": "Fetches an include file from a remote source. Caching is enabled so the origin is only pinged once."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "requestInclude",
          "declaration": {
            "name": "requestInclude",
            "module": "src/components/include/request.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/option/option.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaOption",
          "cssParts": [
            {
              "description": "The checked icon, a `<wa-icon>` element.",
              "name": "checked-icon"
            },
            {
              "description": "The option's label.",
              "name": "label"
            },
            {
              "description": "The container that wraps the `start` slot.",
              "name": "start"
            },
            {
              "description": "The container that wraps the `end` slot.",
              "name": "end"
            }
          ],
          "slots": [
            {
              "description": "The option's label.",
              "name": ""
            },
            {
              "description": "An element, such as `<wa-icon>`, placed before the label.",
              "name": "start"
            },
            {
              "description": "An element, such as `<wa-icon>`, placed after the label.",
              "name": "end"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "isInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "current",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The option's value. When selected, the containing form control will receive this value. The value must be unique\nfrom other options in the same group. Values may not contain spaces, as spaces are used as delimiters when listing\nmultiple values."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the option in a disabled state, preventing selection."
            },
            {
              "kind": "field",
              "name": "defaultSelected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Selects an option initially."
            },
            {
              "kind": "field",
              "name": "_label",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "label",
              "description": "The option’s plain text label.\nUsually automatically generated, but can be useful to provide manually for cases involving complex content.",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "defaultLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The default label, generated from the element contents. Will be equal to `label` in most cases."
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleHover",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateDefaultLabel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "cssStates": [
            {
              "description": "The user has keyed into the option, but hasn't selected it yet (shows a highlight)",
              "name": "current"
            },
            {
              "description": "The option is selected and has aria-selected=\"true\"",
              "name": "selected"
            },
            {
              "description": "Like `:hover` but works while dragging in Safari",
              "name": "hover"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Options define the selectable items within a select component.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaOption",
            "module": "src/components/option/option.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/page/page.mobile.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/page/page.mobile.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/page/page.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaPage",
          "cssProperties": [
            {
              "description": "The width of the page's \"menu\" section.",
              "name": "--menu-width",
              "default": "auto"
            },
            {
              "description": "The width of the page's \"main\" section.",
              "name": "--main-width",
              "default": "1fr"
            },
            {
              "description": "The wide of the page's \"aside\" section.",
              "name": "--aside-width",
              "default": "auto"
            },
            {
              "description": "The height of the banner. This gets calculated when the page initializes. If the height is known, you can set it here to prevent shifting when the page loads.",
              "name": "--banner-height",
              "default": "0px"
            },
            {
              "description": "The height of the header. This gets calculated when the page initializes. If the height is known, you can set it here to prevent shifting when the page loads.",
              "name": "--header-height",
              "default": "0px"
            },
            {
              "description": "The height of the subheader. This gets calculated when the page initializes. If the height is known, you can set it here to prevent shifting when the page loads.",
              "name": "--subheader-height",
              "default": "0px"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The banner to show above header.",
              "name": "banner"
            },
            {
              "description": "The header, usually for top level navigation / branding.",
              "name": "header"
            },
            {
              "description": "Shown below the header, usually intended for things like breadcrumbs and other page level navigation.",
              "name": "subheader"
            },
            {
              "description": "The wrapper around menu, main, and aside.",
              "name": "body"
            },
            {
              "description": "The left hand side of the page. Generally intended for navigation.",
              "name": "menu"
            },
            {
              "description": "The `<nav>` that wraps the navigation slots on desktop viewports.",
              "name": "navigation"
            },
            {
              "description": "The header for a navigation area. On mobile this will be the header for `<wa-drawer>`.",
              "name": "navigation-header"
            },
            {
              "description": "The footer for a navigation area. On mobile this will be the footer for `<wa-drawer>`.",
              "name": "navigation-footer"
            },
            {
              "description": "The default `<wa-button>` that will toggle the `<wa-drawer>` for mobile viewports.",
              "name": "navigation-toggle"
            },
            {
              "description": "The default `<wa-icon>` displayed inside of the navigation-toggle button.",
              "name": "navigation-toggle-icon"
            },
            {
              "description": "The header above main content.",
              "name": "main-header"
            },
            {
              "description": "The main content.",
              "name": "main-content"
            },
            {
              "description": "The footer below main content.",
              "name": "main-footer"
            },
            {
              "description": "The right hand side of the page. Used for things like table of contents, ads, etc.",
              "name": "aside"
            },
            {
              "description": "Wrapper around skip-link",
              "name": "skip-links"
            },
            {
              "description": "The \"skip to main content\" link",
              "name": "skip-link"
            },
            {
              "description": "The footer of the page. This is always below the initial viewport size.",
              "name": "footer"
            },
            {
              "description": "A wrapper around elements such as dialogs or other modal-like elements.",
              "name": "dialog-wrapper"
            }
          ],
          "slots": [
            {
              "description": "The page's main content.",
              "name": ""
            },
            {
              "description": "The banner that gets display above the header. The banner will not be shown if no content is provided.",
              "name": "banner"
            },
            {
              "description": "The header to display at the top of the page. If a banner is present, the header will appear below the banner. The header will not be shown if there is no content.",
              "name": "header"
            },
            {
              "description": "A subheader to display below the `header`. This is a good place to put things like breadcrumbs.",
              "name": "subheader"
            },
            {
              "description": "The left side of the page. If you slot an element in here, you will override the default `navigation` slot and will be handling navigation on your own. This also will not disable the fallback behavior of the navigation button. This section \"sticks\" to the top as the page scrolls.",
              "name": "menu"
            },
            {
              "description": "The header for a navigation area. On mobile this will be the header for `<wa-drawer>`.",
              "name": "navigation-header"
            },
            {
              "description": "The main content to display in the navigation area. This is displayed on the left side of the page, if `menu` is not used. This section \"sticks\" to the top as the page scrolls.",
              "name": "navigation"
            },
            {
              "description": "The footer for a navigation area. On mobile this will be the footer for `<wa-drawer>`.",
              "name": "navigation-footer"
            },
            {
              "description": "Use this slot to slot in your own button + icon for toggling the navigation drawer. By default it is a `<wa-button>` + a 3 bars `<wa-icon>`",
              "name": "navigation-toggle"
            },
            {
              "description": "Use this to slot in your own icon for toggling the navigation drawer. By default it is 3 bars `<wa-icon>`.",
              "name": "navigation-toggle-icon"
            },
            {
              "description": "Header to display inline above the main content.",
              "name": "main-header"
            },
            {
              "description": "Footer to display inline below the main content.",
              "name": "main-footer"
            },
            {
              "description": "Content to be shown on the right side of the page. Typically contains a table of contents, ads, etc. This section \"sticks\" to the top as the page scrolls.",
              "name": "aside"
            },
            {
              "description": "The \"skip to content\" slot. You can override this If you would like to override the `Skip to content` button and add additional \"Skip to X\", they can be inserted here.",
              "name": "skip-to-content"
            },
            {
              "description": "The content to display in the footer. This is always displayed underneath the viewport so will always make the page \"scrollable\".",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "[visuallyHidden, styles]",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "headerResizeObserver",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "subheaderResizeObserver",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "bannerResizeObserver",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "footerResizeObserver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "slotResizeObserver",
              "privacy": "private",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleNavigationToggle",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "subheader",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "footer",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "banner",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "navigationDrawer",
              "type": {
                "text": "WaDrawer"
              }
            },
            {
              "kind": "field",
              "name": "navigationToggleSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "view",
              "type": {
                "text": "'mobile' | 'desktop'"
              },
              "default": "'desktop'",
              "description": "The view is a reflection of the \"mobileBreakpoint\", when the page is larger than the `mobile-breakpoint` (768px by\ndefault), it is considered to be a \"desktop\" view. The view is merely a way to distinguish when to show/hide the\nnavigation. You can use additional media queries to make other adjustments to content as necessary.\nThe default is \"desktop\" because the \"mobile navigation drawer\" isn't accessible via SSR due to drawer requiring JS."
            },
            {
              "kind": "field",
              "name": "navOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the navigation drawer is open. Note, the navigation drawer is only \"open\" on mobile views."
            },
            {
              "kind": "field",
              "name": "mobileBreakpoint",
              "type": {
                "text": "string"
              },
              "default": "'768px'",
              "description": "At what page width to hide the \"navigation\" slot and collapse into a hamburger button.\nAccepts both numbers (interpreted as px) and CSS lengths (e.g. `50em`), which are resolved based on the root element."
            },
            {
              "kind": "field",
              "name": "navigationPlacement",
              "type": {
                "text": "'start' | 'end'"
              },
              "default": "'start'",
              "description": "Where to place the navigation when in the mobile viewport."
            },
            {
              "kind": "field",
              "name": "disableNavigationToggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether or not to hide the default hamburger button.\nThis will automatically flip to \"true\" if you add an element with `data-toggle-nav` anywhere in the element light DOM.\nGenerally this will be set for you and you don't need to do anything, unless you're using SSR, in which case you should set this manually for initial page loads."
            },
            {
              "kind": "field",
              "name": "pageResizeObserver",
              "default": "new ResizeObserver(entries => { for (const entry of entries) { if (entry.contentBoxSize) { const contentBoxSize = entry.borderBoxSize[0]; const pageWidth = contentBoxSize.inlineSize; const oldView = this.view; if (pageWidth >= toPx(this.mobileBreakpoint)) { this.view = 'desktop'; } else { this.view = 'mobile'; } this.requestUpdate('view', oldView); } } })"
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "showNavigation",
              "description": "Shows the mobile navigation drawer"
            },
            {
              "kind": "method",
              "name": "hideNavigation",
              "description": "Hides the mobile navigation drawer"
            },
            {
              "kind": "method",
              "name": "toggleNavigation",
              "description": "Toggles the mobile navigation drawer"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Pages offer an easy way to scaffold entire page layouts using minimal markup.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaPage",
            "module": "src/components/page/page.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/popup/popup.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaPopup",
          "cssProperties": [
            {
              "description": "The size of the arrow. Note that an arrow won't be shown unless the `arrow` attribute is used.",
              "name": "--arrow-size",
              "default": "6px"
            },
            {
              "description": "The color of the arrow.",
              "name": "--arrow-color",
              "default": "black"
            },
            {
              "description": "A read-only custom property that determines the amount of width the popup can be before overflowing. Useful for positioning child elements that need to overflow. This property is only available when using `auto-size`.",
              "name": "--auto-size-available-width"
            },
            {
              "description": "A read-only custom property that determines the amount of height the popup can be before overflowing. Useful for positioning child elements that need to overflow. This property is only available when using `auto-size`.",
              "name": "--auto-size-available-height"
            },
            {
              "description": "The show duration to use when applying built-in animation classes.",
              "name": "--show-duration",
              "default": "100ms"
            },
            {
              "description": "The hide duration to use when applying built-in animation classes.",
              "name": "--hide-duration",
              "default": "100ms"
            }
          ],
          "cssParts": [
            {
              "description": "The arrow's container. Avoid setting `top|bottom|left|right` properties, as these values are assigned dynamically as the popup moves. This is most useful for applying a background color to match the popup, and maybe a border or box shadow.",
              "name": "arrow"
            },
            {
              "description": "The popup's container. Useful for setting a background color, box shadow, etc.",
              "name": "popup"
            },
            {
              "description": "The hover bridge element. Only available when the `hover-bridge` option is enabled.",
              "name": "hover-bridge"
            }
          ],
          "slots": [
            {
              "description": "The popup's content.",
              "name": ""
            },
            {
              "description": "The element the popup will be anchored to. If the anchor lives outside of the popup, you can use the `anchor` attribute or property instead.",
              "name": "anchor"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "anchorEl",
              "type": {
                "text": "Element | VirtualElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "cleanup",
              "type": {
                "text": "ReturnType<typeof autoUpdate> | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "HTMLElement"
              },
              "description": "A reference to the internal popup container. Useful for animating and styling the popup with JavaScript."
            },
            {
              "kind": "field",
              "name": "arrowEl",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "Element | string | VirtualElement"
              },
              "description": "The element the popup will be anchored to. If the anchor lives outside of the popup, you can provide the anchor\nelement `id`, a DOM element reference, or a `VirtualElement`. If the anchor lives inside the popup, use the\n`anchor` slot instead."
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Activates the positioning logic and shows the popup. When this attribute is removed, the positioning logic is torn\ndown and the popup will be hidden."
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
              },
              "default": "'top'",
              "description": "The preferred placement of the popup. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport."
            },
            {
              "kind": "field",
              "name": "boundary",
              "type": {
                "text": "'viewport' | 'scroll'"
              },
              "default": "'viewport'",
              "description": "The bounding box to use for flipping, shifting, and auto-sizing."
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel away from its anchor."
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel along its anchor."
            },
            {
              "kind": "field",
              "name": "arrow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Attaches an arrow to the popup. The arrow's size and color can be customized using the `--arrow-size` and\n`--arrow-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet."
            },
            {
              "kind": "field",
              "name": "arrowPlacement",
              "type": {
                "text": "'start' | 'end' | 'center' | 'anchor'"
              },
              "default": "'anchor'",
              "description": "The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead."
            },
            {
              "kind": "field",
              "name": "arrowPadding",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "The amount of padding between the arrow and the edges of the popup. If the popup has a border-radius, for example,\nthis will prevent it from overflowing the corners."
            },
            {
              "kind": "field",
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set, placement of the popup will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined."
            },
            {
              "kind": "field",
              "name": "flipFallbackPlacements",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "If the preferred placement doesn't fit, popup will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. \"top bottom left\". If no placement fits, the flip\nfallback strategy will be used instead."
            },
            {
              "kind": "field",
              "name": "flipFallbackStrategy",
              "type": {
                "text": "'best-fit' | 'initial'"
              },
              "default": "'best-fit'",
              "description": "When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popup should be positioned using the best available fit based on available space or as it was initially\npreferred."
            },
            {
              "kind": "field",
              "name": "flipBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property."
            },
            {
              "kind": "field",
              "name": "flipPadding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the flip behavior will occur."
            },
            {
              "kind": "field",
              "name": "shift",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Moves the popup along the axis to keep it in view when clipped."
            },
            {
              "kind": "field",
              "name": "shiftBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property."
            },
            {
              "kind": "field",
              "name": "shiftPadding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the shift behavior will occur."
            },
            {
              "kind": "field",
              "name": "autoSize",
              "type": {
                "text": "'horizontal' | 'vertical' | 'both'"
              },
              "description": "When set, this will cause the popup to automatically resize itself to prevent it from overflowing."
            },
            {
              "kind": "field",
              "name": "sync",
              "type": {
                "text": "'width' | 'height' | 'both'"
              },
              "description": "Syncs the popup's width or height to that of the anchor element."
            },
            {
              "kind": "field",
              "name": "autoSizeBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property."
            },
            {
              "kind": "field",
              "name": "autoSizePadding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the auto-size behavior will occur."
            },
            {
              "kind": "field",
              "name": "hoverBridge",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When a gap exists between the anchor and the popup element, this option will add a \"hover bridge\" that fills the\ngap using an invisible element. This makes listening for events such as `mouseenter` and `mouseleave` more sane\nbecause the pointer never technically leaves the element. The hover bridge will only be drawn when the popover is\nactive."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleAnchorChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "start",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "stop",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Forces the popup to recalculate and reposition itself."
            },
            {
              "kind": "field",
              "name": "updateHoverBridge",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "description": "Emitted when the popup is repositioned. This event can fire a lot, so avoid putting expensive operations in your listener or consider debouncing it.",
              "name": "wa-reposition"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Popup is a utility that lets you declaratively anchor \"popup\" containers to another element."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaPopup",
            "module": "src/components/popup/popup.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-bar/progress-bar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaProgressBar",
          "cssProperties": [
            {
              "description": "The color of the track.",
              "name": "--track-color"
            },
            {
              "description": "The color of the indicator.",
              "name": "--indicator-color"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The progress bar's indicator.",
              "name": "indicator"
            },
            {
              "description": "The progress bar's label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "A label to show inside the progress indicator.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The current progress as a percentage, 0 to 100."
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, percentage is ignored, the label is hidden, and the progress bar is drawn in an indeterminate state."
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A custom label for assistive devices."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Progress bars are used to show the status of an ongoing operation.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaProgressBar",
            "module": "src/components/progress-bar/progress-bar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/popover/popover.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaPopover",
          "cssProperties": [
            {
              "description": "The size of the tiny arrow that points to the popover (set to zero to remove).",
              "name": "--arrow-size",
              "default": "0.375rem"
            },
            {
              "description": "The maximum width of the popover's body content.",
              "name": "--max-width",
              "default": "25rem"
            },
            {
              "description": "The speed of the show animation.",
              "name": "--show-duration",
              "default": "100ms"
            },
            {
              "description": "The speed of the hide animation.",
              "name": "--hide-duration",
              "default": "100ms"
            }
          ],
          "cssParts": [
            {
              "description": "The native dialog element that contains the popover content.",
              "name": "dialog"
            },
            {
              "description": "The popover's body where its content is rendered.",
              "name": "body"
            },
            {
              "description": "The internal `<wa-popup>` element that positions the popover.",
              "name": "popup"
            },
            {
              "description": "The popup's exported `popup` part. Use this to target the popover's popup container.",
              "name": "popup__popup"
            },
            {
              "description": "The popup's exported `arrow` part. Use this to target the popover's arrow.",
              "name": "popup__arrow"
            }
          ],
          "slots": [
            {
              "description": "The popover's content. Interactive elements such as buttons and links are supported.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'wa-popup': WaPopup }"
            },
            {
              "kind": "field",
              "name": "dialog",
              "type": {
                "text": "HTMLDialogElement"
              }
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "WaPopup"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "null | Element"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
              },
              "default": "'top'",
              "description": "The preferred placement of the popover. Note that the actual placement may vary as needed to keep the popover\ninside of the viewport."
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Shows or hides the popover."
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "8",
              "description": "The distance in pixels from which to offset the popover away from its target."
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the popover along its target."
            },
            {
              "kind": "field",
              "name": "for",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "The ID of the popover's anchor element. This must be an interactive/focusable element such as a button."
            },
            {
              "kind": "field",
              "name": "eventController",
              "privacy": "private",
              "default": "new AbortController()"
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleAnchorClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleBodyClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "handleForChange"
            },
            {
              "kind": "method",
              "name": "handleOptionsChange"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the popover."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the popover."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "description": "Emitted when the popover begins to show. Canceling this event will stop the popover from showing.",
              "name": "wa-show"
            },
            {
              "description": "Emitted after the popover has shown and all animations are complete.",
              "name": "wa-after-show"
            },
            {
              "description": "Emitted when the popover begins to hide. Canceling this event will stop the popover from hiding.",
              "name": "wa-hide"
            },
            {
              "description": "Emitted after the popover has hidden and all animations are complete.",
              "name": "wa-after-hide"
            }
          ],
          "cssStates": [
            {
              "description": "Applied when the popover is open.",
              "name": "open"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Popovers display contextual content and interactive elements in a floating panel."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaPopover",
            "module": "src/components/popover/popover.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-ring/progress-ring.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaProgressRing",
          "cssProperties": [
            {
              "description": "The diameter of the progress ring (cannot be a percentage).",
              "name": "--size"
            },
            {
              "description": "The width of the track.",
              "name": "--track-width"
            },
            {
              "description": "The color of the track.",
              "name": "--track-color"
            },
            {
              "description": "The width of the indicator. Defaults to the track width.",
              "name": "--indicator-width"
            },
            {
              "description": "The color of the indicator.",
              "name": "--indicator-color"
            },
            {
              "description": "The duration of the indicator's transition when the value changes.",
              "name": "--indicator-transition-duration"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The progress ring label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "A label to show inside the ring.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "indicator",
              "type": {
                "text": "SVGCircleElement"
              }
            },
            {
              "kind": "field",
              "name": "indicatorOffset",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The current progress as a percentage, 0 to 100."
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A custom label for assistive devices."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Progress rings are used to show the progress of a determinate operation in a circular fashion.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaProgressRing",
            "module": "src/components/progress-ring/progress-ring.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio/radio.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaRadio",
          "cssProperties": [
            {
              "description": "The color of the checked icon.",
              "name": "--checked-icon-color"
            },
            {
              "description": "The size of the checked icon relative to the radio.",
              "name": "--checked-icon-scale"
            }
          ],
          "cssParts": [
            {
              "description": "The circular container that wraps the radio's checked state.",
              "name": "control"
            },
            {
              "description": "The checked icon.",
              "name": "checked-icon"
            },
            {
              "description": "The container that wraps the radio's label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The radio's label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              },
              "default": "[formControlStyles, sizeStyles, styles]"
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "The string pointing to a form's id."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The radio's value. When selected, the radio group will receive this value."
            },
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "'default' | 'button'"
              },
              "default": "'default'",
              "description": "The radio's value. When selected, the radio group will receive this value."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The radio's size. When used inside a radio group, the size will be determined by the radio group's size so this\nattribute can typically be omitted."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the radio.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInitialAttributes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setFormValue>"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "default": "[]",
              "static": true,
              "description": "Validators are static because they have `observedAttributes`, essentially attributes to \"watch\"\nfor changes. Whenever these attributes change, we want to be notified and update the validator.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "The name of the input, submitted as a name/value pair with form data.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "assumeInteractionOn",
              "type": {
                "text": "string[]"
              },
              "default": "['input']",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "(HTMLElement & { value: unknown }) | HTMLInputElement | HTMLTextAreaElement | undefined"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueHasChanged",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasInteracted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customError",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emittedEvents",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "states",
              "type": {
                "text": "CustomStateSet"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emitInvalid",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInteraction",
              "privacy": "private",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationTarget",
              "type": {
                "text": "undefined | HTMLElement"
              },
              "description": "Override this to change where constraint validation popups are anchored.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setValidity>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomStates",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Do not use this when creating a \"Validator\". This is intended for end users of components.\nWe track manually defined custom errors so we don't clear them on accident in our validators.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "isDisabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "reason",
                  "type": {
                    "text": "'autocomplete' | 'restore'"
                  }
                }
              ],
              "description": "Called when the browser is trying to restore element’s state to state in which case reason is \"restore\", or when\nthe browser is trying to fulfill autofill on behalf of user in which case reason is \"autocomplete\". In the case of\n\"restore\", state is a string, File, or FormData object previously set as the second argument to setFormValue.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "allValidators",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidity",
              "description": "Reset validity is a way of removing manual custom errors and native validation.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control loses focus.",
              "name": "blur"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "focus"
            },
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "cssStates": [
            {
              "description": "Applied when the control is checked.",
              "name": "checked"
            },
            {
              "description": "Applied when the control is disabled.",
              "name": "disabled"
            }
          ],
          "superclass": {
            "name": "WebAwesomeFormAssociatedElement",
            "module": "/src/internal/webawesome-form-associated-element.js"
          },
          "summary": "Radios allow the user to select a single option from a group."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaRadio",
            "module": "src/components/radio/radio.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/rating/rating.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaRating",
          "cssProperties": [
            {
              "description": "The inactive color for symbols.",
              "name": "--symbol-color"
            },
            {
              "description": "The active color for symbols.",
              "name": "--symbol-color-active"
            },
            {
              "description": "The spacing to use around symbols.",
              "name": "--symbol-spacing"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "[sizeStyles, styles]",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "rating",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "hoverValue",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "isHovering",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A label that describes the rating to assistive devices."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The current rating."
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "5",
              "description": "The highest rating to show."
            },
            {
              "kind": "field",
              "name": "precision",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The precision at which the rating will increase and decrease. For example, to allow half-star ratings, set this\nattribute to `0.5`."
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the rating readonly."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the rating."
            },
            {
              "kind": "field",
              "name": "getSymbol",
              "type": {
                "text": "(value: number, isSelected: boolean) => string"
              },
              "description": "A function that customizes the symbol to be rendered. The first and only argument is the rating's current value.\nThe function should return a string containing trusted HTML of the symbol to render at the specified value. Works\nwell with `<wa-icon>` elements."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The component's size."
            },
            {
              "kind": "method",
              "name": "getValueFromMousePosition",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getValueFromTouchPosition",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getValueFromXCoordinate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "coordinate",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseEnter",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseMove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseLeave",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleTouchStart",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTouchMove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTouchEnd",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "roundToPrecision",
              "privacy": "private",
              "parameters": [
                {
                  "name": "numberToRound",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "precision",
                  "default": "0.5"
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleHoverValueChange"
            },
            {
              "kind": "method",
              "name": "handleIsHoveringChange"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the rating."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the rating."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "description": "Emitted when the rating's value changes."
            },
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "type": {
                "text": "{ phase: 'start' | 'move' | 'end', value: number }"
              },
              "description": "Emitted when the user hovers over a value. The `phase` property indicates when hovering starts, moves to a new value, or ends. The `value` property tells what the rating's value would be if the user were to commit to the hovered value.",
              "name": "wa-hover"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Ratings give users a way to quickly view and provide feedback."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaRating",
            "module": "src/components/rating/rating.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/qr-code/qr-code.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaQrCode",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The QR code's value."
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label for assistive devices to announce. If unspecified, the value will be used instead."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "128",
              "description": "The size of the QR code, in pixels."
            },
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "string"
              },
              "default": "'black'",
              "description": "The fill color. This can be any valid CSS color, but not a CSS custom property."
            },
            {
              "kind": "field",
              "name": "background",
              "type": {
                "text": "string"
              },
              "default": "'white'",
              "description": "The background color. This can be any valid CSS color or `transparent`. It cannot be a CSS custom property."
            },
            {
              "kind": "field",
              "name": "radius",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The edge radius of each module. Must be between 0 and 0.5."
            },
            {
              "kind": "field",
              "name": "errorCorrection",
              "type": {
                "text": "'L' | 'M' | 'Q' | 'H'"
              },
              "default": "'H'",
              "description": "The level of error correction to use. [Learn more](https://www.qrcode.com/en/about/error_correction.html)"
            },
            {
              "kind": "field",
              "name": "generated",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Whether or not the qr-code generated."
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "generate"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Generates a [QR code](https://www.qrcode.com/) and renders it using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaQrCode",
            "module": "src/components/qr-code/qr-code.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio-group/radio-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaRadioGroup",
          "cssParts": [
            {
              "description": "The form control that wraps the label, input, and hint.",
              "name": "form-control"
            },
            {
              "description": "The label's wrapper.",
              "name": "form-control-label"
            },
            {
              "description": "The input's wrapper.",
              "name": "form-control-input"
            },
            {
              "description": "The wrapper than surrounds radio items, styled as a flex container by default.",
              "name": "radios"
            },
            {
              "description": "The hint's wrapper.",
              "name": "hint"
            }
          ],
          "slots": [
            {
              "description": "The default slot where `<wa-radio>` elements are placed.",
              "name": ""
            },
            {
              "description": "The radio group's label. Required for proper accessibility. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "Text that describes how to use the radio group. Alternatively, you can use the `hint` attribute.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              },
              "default": "[sizeStyles, formControlStyles, styles]"
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "default": "[]",
              "static": true,
              "description": "Validators are static because they have `observedAttributes`, essentially attributes to \"watch\"\nfor changes. Whenever these attributes change, we want to be notified and update the validator.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'hint', 'label')"
            },
            {
              "kind": "field",
              "name": "hasRadioButtons",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The radio group's label. Required for proper accessibility. If you need to display HTML, use the `label` slot\ninstead."
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The radio groups's hint. If you need to display HTML, use the `hint` slot instead."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "The name of the radio group, submitted as a name/value pair with form data.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the radio group and all child radios.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'vertical'",
              "description": "The orientation in which to show radio items."
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The current value of the radio group, submitted as a name/value pair with form data."
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string | null"
              },
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The radio group's size. This size will be applied to all child radios and radio buttons, except when explicitly overridden."
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Ensures a child radio is checked before allowing the containing form to submit.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "withLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used for SSR. if true, will show slotted label on initial render."
            },
            {
              "kind": "field",
              "name": "withHint",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used for SSR. if true, will show slotted hint on initial render."
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...WebAwesomeFormAssociatedElement.shadowRootOptions, delegatesFocus: true }"
            },
            {
              "kind": "field",
              "name": "validationTarget",
              "type": {
                "text": "undefined | HTMLElement"
              },
              "description": "We use the first available radio as the validationTarget similar to native HTML that shows the validation popup on\nthe first radio element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<WebAwesomeFormAssociatedElement['formResetCallback']>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleRadioClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getAllRadios",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleLabelClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "syncRadioElements",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the radio group."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "assumeInteractionOn",
              "type": {
                "text": "string[]"
              },
              "default": "['input']",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "(HTMLElement & { value: unknown }) | HTMLInputElement | HTMLTextAreaElement | undefined"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueHasChanged",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasInteracted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customError",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emittedEvents",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "states",
              "type": {
                "text": "CustomStateSet"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emitInvalid",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInteraction",
              "privacy": "private",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setValidity>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomStates",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Do not use this when creating a \"Validator\". This is intended for end users of components.\nWe track manually defined custom errors so we don't clear them on accident in our validators.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "isDisabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "reason",
                  "type": {
                    "text": "'autocomplete' | 'restore'"
                  }
                }
              ],
              "description": "Called when the browser is trying to restore element’s state to state in which case reason is \"restore\", or when\nthe browser is trying to fulfill autofill on behalf of user in which case reason is \"autocomplete\". In the case of\n\"restore\", state is a string, File, or FormData object previously set as the second argument to setFormValue.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setFormValue>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "allValidators",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidity",
              "description": "Reset validity is a way of removing manual custom errors and native validation.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "name": "input",
              "type": {
                "text": "InputEvent"
              },
              "description": "Emitted when the radio group receives user input."
            },
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "description": "Emitted when the radio group's selected value changes."
            },
            {
              "description": "Emitted when the form control has been checked for validity and its constraints aren't satisfied.",
              "name": "wa-invalid"
            },
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeFormAssociatedElement",
            "module": "/src/internal/webawesome-form-associated-element.js"
          },
          "summary": "Radio groups are used to group multiple [radios](/docs/components/radio) so they function as a single form control."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaRadioGroup",
            "module": "src/components/radio-group/radio-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/relative-time/relative-time.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaRelativeTime",
          "members": [
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "updateTimeout",
              "type": {
                "text": "number | ReturnType<typeof setTimeout>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isoTime",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "relativeTime",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "Date | string"
              },
              "default": "new Date()",
              "description": "The date from which to calculate time from. If not set, the current date and time will be used. When passing a\nstring, it's strongly recommended to use the ISO 8601 format to ensure timezones are handled correctly. To convert\na date to this format in JavaScript, use [`date.toISOString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)."
            },
            {
              "kind": "field",
              "name": "format",
              "type": {
                "text": "'long' | 'short' | 'narrow'"
              },
              "default": "'long'",
              "description": "The formatting style to use."
            },
            {
              "kind": "field",
              "name": "numeric",
              "type": {
                "text": "'always' | 'auto'"
              },
              "default": "'auto'",
              "description": "When `auto`, values such as \"yesterday\" and \"tomorrow\" will be shown when possible. When `always`, values such as\n\"1 day ago\" and \"in 1 day\" will be shown."
            },
            {
              "kind": "field",
              "name": "sync",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Keep the displayed value up to date as time passes."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Outputs a localized time phrase relative to the current date and time.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaRelativeTime",
            "module": "src/components/relative-time/relative-time.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/resize-observer/resize-observer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaResizeObserver",
          "slots": [
            {
              "description": "One or more elements to watch for resizing.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "observedElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the observer."
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "startObserver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "stopObserver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "type": {
                "text": "{ entries: ResizeObserverEntry[] }"
              },
              "description": "Emitted when the element is resized.",
              "name": "wa-resize"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "The Resize Observer component offers a thin, declarative interface to the [`ResizeObserver API`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaResizeObserver",
            "module": "src/components/resize-observer/resize-observer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/scroller/scroller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaScroller",
          "cssProperties": [
            {
              "description": "The base color of the shadow.",
              "name": "--shadow-color",
              "default": "var(--wa-color-surface-default)"
            },
            {
              "description": "The size of the shadow.",
              "name": "--shadow-size",
              "default": "2rem"
            }
          ],
          "cssParts": [
            {
              "description": "The container that wraps the slotted content.",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "The content to show inside the scroller.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "[styles]",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(() => this.updateScroll())"
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "canScroll",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "description": "The scroller's orientation."
            },
            {
              "kind": "field",
              "name": "withoutScrollbar",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes the visible scrollbar."
            },
            {
              "kind": "field",
              "name": "withoutShadow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes the shadows."
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateScroll",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Scrollers create an accessible container while providing visual cues that help users identify and navigate\nthrough content that scrolls.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaScroller",
            "module": "src/components/scroller/scroller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skeleton/skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaSkeleton",
          "cssProperties": [
            {
              "description": "The color of the skeleton.",
              "name": "--color"
            },
            {
              "description": "The sheen color when the skeleton is in its loading state.",
              "name": "--sheen-color"
            }
          ],
          "cssParts": [
            {
              "description": "The skeleton's indicator which is responsible for its color and animation.",
              "name": "indicator"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "effect",
              "type": {
                "text": "'pulse' | 'sheen' | 'none'"
              },
              "default": "'none'",
              "description": "Determines which effect the skeleton will use."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Skeletons are used to provide a visual representation of where content will eventually be drawn.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaSkeleton",
            "module": "src/components/skeleton/skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaSelect",
          "cssProperties": [
            {
              "description": "When using `multiple`, the max size of tags before their content is truncated.",
              "name": "--tag-max-size",
              "default": "10ch"
            }
          ],
          "cssParts": [
            {
              "description": "The form control that wraps the label, input, and hint.",
              "name": "form-control"
            },
            {
              "description": "The label's wrapper.",
              "name": "form-control-label"
            },
            {
              "description": "The select's wrapper.",
              "name": "form-control-input"
            },
            {
              "description": "The hint's wrapper.",
              "name": "hint"
            },
            {
              "description": "The container the wraps the start, end, value, clear icon, and expand button.",
              "name": "combobox"
            },
            {
              "description": "The container that wraps the `start` slot.",
              "name": "start"
            },
            {
              "description": "The container that wraps the `end` slot.",
              "name": "end"
            },
            {
              "description": "The element that displays the selected option's label, an `<input>` element.",
              "name": "display-input"
            },
            {
              "description": "The listbox container where options are slotted.",
              "name": "listbox"
            },
            {
              "description": "The container that houses option tags when `multiselect` is used.",
              "name": "tags"
            },
            {
              "description": "The individual tags that represent each multiselect option.",
              "name": "tag"
            },
            {
              "description": "The tag's content part.",
              "name": "tag__content"
            },
            {
              "description": "The tag's remove button.",
              "name": "tag__remove-button"
            },
            {
              "description": "The tag's remove button base part.",
              "name": "tag__remove-button__base"
            },
            {
              "description": "The clear button.",
              "name": "clear-button"
            },
            {
              "description": "The container that wraps the expand icon.",
              "name": "expand-icon"
            }
          ],
          "slots": [
            {
              "description": "The listbox options. Must be `<wa-option>` elements. You can use `<wa-divider>` to group items visually.",
              "name": ""
            },
            {
              "description": "The input's label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "An element, such as `<wa-icon>`, placed at the start of the combobox.",
              "name": "start"
            },
            {
              "description": "An element, such as `<wa-icon>`, placed at the end of the combobox.",
              "name": "end"
            },
            {
              "description": "An icon to use in lieu of the default clear icon.",
              "name": "clear-icon"
            },
            {
              "description": "The icon to show when the control is expanded and collapsed. Rotates on open and close.",
              "name": "expand-icon"
            },
            {
              "description": "Text that describes how to use the input. Alternatively, you can use the `hint` attribute.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              },
              "default": "[styles, formControlStyles, sizeStyles]"
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "default": "[]",
              "static": true,
              "description": "Validators are static because they have `observedAttributes`, essentially attributes to \"watch\"\nfor changes. Whenever these attributes change, we want to be notified and update the validator.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "assumeInteractionOn",
              "type": {
                "text": "string[]"
              },
              "default": "['blur', 'input']",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'hint', 'label')"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "typeToSelectString",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "typeToSelectTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "WaPopup"
              }
            },
            {
              "kind": "field",
              "name": "combobox",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "displayInput",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "valueInput",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "listbox",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "validationTarget",
              "type": {
                "text": "undefined | HTMLElement"
              },
              "description": "Where to anchor native constraint validation",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "displayLabel",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "currentOption",
              "type": {
                "text": "WaOption"
              }
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "type": {
                "text": "WaOption[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "optionValues",
              "type": {
                "text": "Set<string> | undefined"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | null"
              },
              "default": "''",
              "description": "The name of the select, submitted as a name/value pair with form data.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "string | string[]"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "defaultValue"
            },
            {
              "kind": "method",
              "name": "convertDefaultValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "typeof this.defaultValue"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string[] | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The select's value. This will be a string for single select or an array for multi-select."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The select's size."
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the select is empty."
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows more than one option to be selected."
            },
            {
              "kind": "field",
              "name": "maxOptionsVisible",
              "type": {
                "text": "number"
              },
              "default": "3",
              "description": "The maximum number of selected options to show when `multiple` is true. After the maximum, \"+n\" will be shown to\nindicate the number of additional items that are selected. Set to 0 to remove the limit."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the select control.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "withClear",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the select is not empty."
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the select is open. You can toggle this attribute to show and hide the menu, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the select's open state."
            },
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "'filled' | 'outlined'"
              },
              "default": "'outlined'",
              "description": "The select's visual appearance."
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style select with rounded edges."
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The select's label. If you need to display HTML, use the `label` slot instead."
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'bottom'"
              },
              "default": "'bottom'",
              "description": "The preferred placement of the select's menu. Note that the actual placement may vary as needed to keep the listbox\ninside of the viewport."
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The select's hint. If you need to display HTML, use the `hint` slot instead."
            },
            {
              "kind": "field",
              "name": "withLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used for SSR purposes when a label is slotted in. Will show the label on first render."
            },
            {
              "kind": "field",
              "name": "withHint",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used for SSR purposes when hint is slotted in. Will show the hint on first render."
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "null"
              },
              "default": "null",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work."
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The select's required attribute.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "getTag",
              "type": {
                "text": "(option: WaOption, index: number) => TemplateResult | string | HTMLElement"
              },
              "description": "A function that customizes the tags to be rendered when multiple=true. The first argument is the option, the second\nis the current tag's index.  The function should return either a Lit TemplateResult or a string containing trusted\nHTML of the symbol to render at the specified value."
            },
            {
              "kind": "method",
              "name": "addOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentFocusIn",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentMouseDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleLabelClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleComboboxMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleComboboxKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClearMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOptionClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "handleTagRemove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "WaRemoveEvent"
                  }
                },
                {
                  "name": "directOption",
                  "optional": true,
                  "type": {
                    "text": "WaOption"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getAllOptions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getFirstOption",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setCurrentOption",
              "privacy": "private",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "WaOption | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSelectedOptions",
              "privacy": "private",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "WaOption | WaOption[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleOptionSelection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "WaOption"
                  }
                },
                {
                  "name": "force",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectionChanged",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "tags",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the listbox."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the listbox."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the control."
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "(HTMLElement & { value: unknown }) | HTMLInputElement | HTMLTextAreaElement | undefined"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueHasChanged",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasInteracted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customError",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emittedEvents",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "states",
              "type": {
                "text": "CustomStateSet"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emitInvalid",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInteraction",
              "privacy": "private",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setValidity>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomStates",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Do not use this when creating a \"Validator\". This is intended for end users of components.\nWe track manually defined custom errors so we don't clear them on accident in our validators.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "isDisabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "reason",
                  "type": {
                    "text": "'autocomplete' | 'restore'"
                  }
                }
              ],
              "description": "Called when the browser is trying to restore element’s state to state in which case reason is \"restore\", or when\nthe browser is trying to fulfill autofill on behalf of user in which case reason is \"autocomplete\". In the case of\n\"restore\", state is a string, File, or FormData object previously set as the second argument to setFormValue.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setFormValue>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "allValidators",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidity",
              "description": "Reset validity is a way of removing manual custom errors and native validation.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "name": "input",
              "type": {
                "text": "InputEvent"
              },
              "description": "Emitted when the control receives input."
            },
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "description": "Emitted when the control's value changes."
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "focus"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "blur"
            },
            {
              "description": "Emitted when the control's value is cleared.",
              "name": "wa-clear"
            },
            {
              "description": "Emitted when the select's menu opens.",
              "name": "wa-show"
            },
            {
              "description": "Emitted after the select's menu opens and all animations are complete.",
              "name": "wa-after-show"
            },
            {
              "description": "Emitted when the select's menu closes.",
              "name": "wa-hide"
            },
            {
              "description": "Emitted after the select's menu closes and all animations are complete.",
              "name": "wa-after-hide"
            },
            {
              "description": "Emitted when the form control has been checked for validity and its constraints aren't satisfied.",
              "name": "wa-invalid"
            }
          ],
          "cssStates": [
            {
              "description": "The select is empty.",
              "name": "blank"
            }
          ],
          "superclass": {
            "name": "WebAwesomeFormAssociatedElement",
            "module": "/src/internal/webawesome-form-associated-element.js"
          },
          "summary": "Selects allow you to choose items from a menu of predefined options."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaSelect",
            "module": "src/components/select/select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "<wa-slider>",
          "name": "WaSlider",
          "cssProperties": [
            {
              "description": "The height or width of the slider's track.",
              "name": "--track-size",
              "default": "0.75em"
            },
            {
              "description": "The width of each individual marker.",
              "name": "--marker-width",
              "default": "0.1875em"
            },
            {
              "description": "The height of each individual marker.",
              "name": "--marker-height",
              "default": "0.1875em"
            },
            {
              "description": "The width of the thumb.",
              "name": "--thumb-width",
              "default": "1.25em"
            },
            {
              "description": "The height of the thumb.",
              "name": "--thumb-height",
              "default": "1.25em"
            }
          ],
          "cssParts": [
            {
              "description": "The element that contains the sliders's label.",
              "name": "label"
            },
            {
              "description": "The element that contains the slider's description.",
              "name": "hint"
            },
            {
              "description": "The focusable element with `role=\"slider\"`. Contains the track and reference slot.",
              "name": "slider"
            },
            {
              "description": "The slider's track.",
              "name": "track"
            },
            {
              "description": "The colored indicator that shows from the start of the slider to the current value.",
              "name": "indicator"
            },
            {
              "description": "The container that holds all the markers when `with-markers` is used.",
              "name": "markers"
            },
            {
              "description": "The individual markers that are shown when `with-markers` is used.",
              "name": "marker"
            },
            {
              "description": "The container that holds references that get slotted in.",
              "name": "references"
            },
            {
              "description": "The slider's thumb.",
              "name": "thumb"
            },
            {
              "description": "The min value thumb in a range slider.",
              "name": "thumb-min"
            },
            {
              "description": "The max value thumb in a range slider.",
              "name": "thumb-max"
            },
            {
              "description": "The tooltip, a `<wa-tooltip>` element.",
              "name": "tooltip"
            },
            {
              "description": "The tooltip's `tooltip` part.",
              "name": "tooltip__tooltip"
            },
            {
              "description": "The tooltip's `content` part.",
              "name": "tooltip__content"
            },
            {
              "description": "The tooltip's `arrow` part.",
              "name": "tooltip__arrow"
            }
          ],
          "slots": [
            {
              "description": "The slider label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "Text that describes how to use the input. Alternatively, you can use the `hint` attribute. instead.",
              "name": "hint"
            },
            {
              "description": "One or more reference labels to show visually below the slider.",
              "name": "reference"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "observeSlots",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              },
              "default": "[sizeStyles, formControlStyles, styles]"
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "default": "[]",
              "static": true,
              "description": "Validators are static because they have `observedAttributes`, essentially attributes to \"watch\"\nfor changes. Whenever these attributes change, we want to be notified and update the validator.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "draggableTrack",
              "type": {
                "text": "DraggableElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "draggableThumbMin",
              "type": {
                "text": "DraggableElement | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "draggableThumbMax",
              "type": {
                "text": "DraggableElement | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'hint', 'label')"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "trackBoundingClientRect",
              "type": {
                "text": "DOMRect"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "valueWhenDraggingStarted",
              "type": {
                "text": "number | undefined | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "activeThumb",
              "type": {
                "text": "'min' | 'max' | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "lastTrackPosition",
              "type": {
                "text": "number | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "focusableAnchor",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationTarget",
              "type": {
                "text": "undefined | HTMLElement"
              },
              "description": "Override validation target to point to the focusable element",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "slider",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "thumb",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "thumbMin",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "thumbMax",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "track",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "tooltip",
              "type": {
                "text": "WaTooltip"
              }
            },
            {
              "kind": "field",
              "name": "tooltips",
              "type": {
                "text": "NodeListOf<WaTooltip>"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The slider's label. If you need to provide HTML in the label, use the `label` slot instead."
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The slider hint. If you need to display HTML, use the hint slot instead."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "The name of the slider. This will be submitted with the form as a name/value pair.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "minValue",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The minimum value of a range selection. Used only when range attribute is set."
            },
            {
              "kind": "field",
              "name": "maxValue",
              "type": {
                "text": "number"
              },
              "default": "50",
              "description": "The maximum value of a range selection. Used only when range attribute is set."
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "number"
              },
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "description": "The current value of the slider, submitted as a name/value pair with form data."
            },
            {
              "kind": "field",
              "name": "range",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Converts the slider to a range slider with two thumbs."
            },
            {
              "kind": "field",
              "name": "isRange",
              "type": {
                "text": "boolean"
              },
              "description": "Get if this is a range slider",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the slider.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the slider a read-only field."
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "description": "The orientation of the slider."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The slider's size."
            },
            {
              "kind": "field",
              "name": "indicatorOffset",
              "type": {
                "text": "number"
              },
              "description": "The starting value from which to draw the slider's fill, which is based on its current value."
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "null"
              },
              "default": "null",
              "description": "The form to associate this control with. If omitted, the closest containing `<form>` will be used. The value of\nthis attribute must be an ID of a form in the same document or shadow root."
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The minimum value allowed."
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "The maximum value allowed."
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The granularity the value must adhere to when incrementing and decrementing."
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the slider a required field.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "Tells the browser to focus the slider when the page loads or a dialog is shown."
            },
            {
              "kind": "field",
              "name": "tooltipDistance",
              "type": {
                "text": "number"
              },
              "default": "8",
              "description": "The distance of the tooltip from the slider's thumb."
            },
            {
              "kind": "field",
              "name": "tooltipPlacement",
              "type": {
                "text": "'top' | 'right' | 'bottom' | 'left'"
              },
              "default": "'top'",
              "description": "The placement of the tooltip in reference to the slider's thumb."
            },
            {
              "kind": "field",
              "name": "withMarkers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws markers at each step along the slider."
            },
            {
              "kind": "field",
              "name": "withTooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a tooltip above the thumb when the control has focus or is dragged."
            },
            {
              "kind": "field",
              "name": "valueFormatter",
              "type": {
                "text": "(value: number) => string"
              },
              "description": "A custom formatting function to apply to the value. This will be shown in the tooltip and announced by screen\nreaders. Must be set with JavaScript. Property only."
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clampAndRoundToStep",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Clamps a number to min/max while ensuring it's a valid step interval."
            },
            {
              "kind": "method",
              "name": "getPercentageFromValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Given a value, returns its percentage within a range of min/max."
            },
            {
              "kind": "method",
              "name": "getValueFromCoordinates",
              "privacy": "private",
              "parameters": [
                {
                  "name": "x",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "y",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Converts coordinates to slider value"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleLabelPointerDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValueFromCoordinates",
              "privacy": "private",
              "parameters": [
                {
                  "name": "x",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "y",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setThumbValueFromCoordinates",
              "privacy": "private",
              "parameters": [
                {
                  "name": "x",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "y",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "thumb",
                  "type": {
                    "text": "'min' | 'max'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "showTooltip",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hideTooltip",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "showRangeTooltips",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hideRangeTooltips",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateFormValue",
              "privacy": "private",
              "description": "Updates the form value submission for range sliders"
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "description": "Sets focus to the slider."
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the slider."
            },
            {
              "kind": "method",
              "name": "stepDown",
              "privacy": "public",
              "description": "Decreases the slider's value by `step`. This is a programmatic change, so `input` and `change` events will not be\nemitted when this is called."
            },
            {
              "kind": "method",
              "name": "stepUp",
              "privacy": "public",
              "description": "Increases the slider's value by `step`. This is a programmatic change, so `input` and `change` events will not be\nemitted when this is called."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "assumeInteractionOn",
              "type": {
                "text": "string[]"
              },
              "default": "['input']",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "(HTMLElement & { value: unknown }) | HTMLInputElement | HTMLTextAreaElement | undefined"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueHasChanged",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasInteracted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customError",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emittedEvents",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "states",
              "type": {
                "text": "CustomStateSet"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emitInvalid",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInteraction",
              "privacy": "private",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setValidity>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomStates",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Do not use this when creating a \"Validator\". This is intended for end users of components.\nWe track manually defined custom errors so we don't clear them on accident in our validators.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "isDisabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "reason",
                  "type": {
                    "text": "'autocomplete' | 'restore'"
                  }
                }
              ],
              "description": "Called when the browser is trying to restore element’s state to state in which case reason is \"restore\", or when\nthe browser is trying to fulfill autofill on behalf of user in which case reason is \"autocomplete\". In the case of\n\"restore\", state is a string, File, or FormData object previously set as the second argument to setFormValue.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setFormValue>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "allValidators",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidity",
              "description": "Reset validity is a way of removing manual custom errors and native validation.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "description": "Emitted when an alteration to the control's value is committed by the user."
            },
            {
              "name": "blur",
              "type": {
                "text": "FocusEvent"
              },
              "description": "Emitted when the control loses focus."
            },
            {
              "name": "focus",
              "type": {
                "text": "FocusEvent"
              },
              "description": "Emitted when the control gains focus."
            },
            {
              "name": "input",
              "type": {
                "text": "InputEvent"
              },
              "description": "Emitted when the control receives input."
            },
            {
              "description": "Emitted when the form control has been checked for validity and its constraints aren't satisfied.",
              "name": "wa-invalid"
            },
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "cssStates": [
            {
              "description": "Applied when the slider is disabled.",
              "name": "disabled"
            },
            {
              "description": "Applied when the slider is being dragged.",
              "name": "dragging"
            },
            {
              "description": "Applied when the slider has focus.",
              "name": "focused"
            },
            {
              "description": "Applied when the slider is valid and the user has sufficiently interacted with it.",
              "name": "user-valid"
            },
            {
              "description": "Applied when the slider is invalid and the user has sufficiently interacted with it.",
              "name": "user-invalid"
            }
          ],
          "superclass": {
            "name": "WebAwesomeFormAssociatedElement",
            "module": "/src/internal/webawesome-form-associated-element.js"
          },
          "summary": "Ranges allow the user to select a single value within a given range using a slider."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaSlider",
            "module": "src/components/slider/slider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/split-panel/split-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaSplitPanel",
          "cssProperties": [
            {
              "description": "The width of the visible divider.",
              "name": "--divider-width",
              "default": "4px"
            },
            {
              "description": "The invisible region around the divider where dragging can occur. This is usually wider than the divider to facilitate easier dragging.",
              "name": "--divider-hit-area",
              "default": "12px"
            },
            {
              "description": "The minimum allowed size of the primary panel.",
              "name": "--min",
              "default": "0"
            },
            {
              "description": "The maximum allowed size of the primary panel.",
              "name": "--max",
              "default": "100%"
            }
          ],
          "cssParts": [
            {
              "description": "The start panel.",
              "name": "start"
            },
            {
              "description": "The end panel.",
              "name": "end"
            },
            {
              "description": "Targets both the start and end panels.",
              "name": "panel"
            },
            {
              "description": "The divider that separates the start and end panels.",
              "name": "divider"
            }
          ],
          "slots": [
            {
              "description": "Content to place in the start panel.",
              "name": "start"
            },
            {
              "description": "Content to place in the end panel.",
              "name": "end"
            },
            {
              "description": "The divider. Useful for slotting in a custom icon that renders as a handle.",
              "name": "divider"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "cachedPositionInPixels",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isCollapsed",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "positionBeforeCollapsing",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "divider",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "number"
              },
              "default": "50",
              "description": "The current position of the divider from the primary panel's edge as a percentage 0-100. Defaults to 50% of the\ncontainer's initial size."
            },
            {
              "kind": "field",
              "name": "positionInPixels",
              "type": {
                "text": "number"
              },
              "description": "The current position of the divider from the primary panel's edge in pixels."
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "description": "Sets the split panel's orientation."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables resizing. Note that the position may still change as a result of resizing the host element."
            },
            {
              "kind": "field",
              "name": "primary",
              "type": {
                "text": "'start' | 'end' | undefined"
              },
              "description": "If no primary panel is designated, both panels will resize proportionally when the host element is resized. If a\nprimary panel is designated, it will maintain its size and the other panel will grow or shrink as needed when the\nhost element is resized."
            },
            {
              "kind": "field",
              "name": "snap",
              "type": {
                "text": "string | undefined"
              },
              "description": "One or more space-separated values at which the divider should snap. Values can be in pixels or percentages, e.g.\n`\"100px 50%\"`."
            },
            {
              "kind": "field",
              "name": "snapThreshold",
              "type": {
                "text": "number"
              },
              "default": "12",
              "description": "How close the divider must be to a snap point until snapping occurs."
            },
            {
              "kind": "method",
              "name": "detectSize",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "percentageToPixels",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "pixelsToPercentage",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDrag",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleResize",
              "privacy": "private",
              "parameters": [
                {
                  "name": "entries",
                  "type": {
                    "text": "ResizeObserverEntry[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePositionChange"
            },
            {
              "kind": "method",
              "name": "handlePositionInPixelsChange"
            },
            {
              "kind": "method",
              "name": "handleVerticalChange"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "description": "Emitted when the divider's position changes.",
              "name": "wa-reposition"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Split panels display two adjacent panels, allowing the user to reposition them."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaSplitPanel",
            "module": "src/components/split-panel/split-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/switch/switch.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaSwitch",
          "cssProperties": [
            {
              "description": "The width of the switch.",
              "name": "--width"
            },
            {
              "description": "The height of the switch.",
              "name": "--height"
            },
            {
              "description": "The size of the thumb.",
              "name": "--thumb-size"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The control that houses the switch's thumb.",
              "name": "control"
            },
            {
              "description": "The switch's thumb.",
              "name": "thumb"
            },
            {
              "description": "The switch's label.",
              "name": "label"
            },
            {
              "description": "The hint's wrapper.",
              "name": "hint"
            }
          ],
          "slots": [
            {
              "description": "The switch's label.",
              "name": ""
            },
            {
              "description": "Text that describes how to use the switch. Alternatively, you can use the `hint` attribute.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...WebAwesomeFormAssociatedElement.shadowRootOptions, delegatesFocus: true }"
            },
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              },
              "default": "[formControlStyles, sizeStyles, styles]"
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "default": "[]",
              "static": true,
              "description": "Validators are static because they have `observedAttributes`, essentially attributes to \"watch\"\nfor changes. Whenever these attributes change, we want to be notified and update the validator.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'hint')"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "(HTMLElement & { value: unknown }) | HTMLInputElement | HTMLTextAreaElement | undefined"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "The name of the switch, submitted as a name/value pair with form data.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | null"
              },
              "description": "The value of the switch, submitted as a name/value pair with form data."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The switch's size."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the switch.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "description": "Draws the switch in a checked state."
            },
            {
              "kind": "field",
              "name": "defaultChecked",
              "type": {
                "text": "boolean"
              },
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "null"
              },
              "default": "null",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work."
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the switch a required field.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The switch's hint. If you need to display HTML, use the `hint` slot instead."
            },
            {
              "kind": "field",
              "name": "withHint",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used for SSR. If you slot in hint, make sure to add `with-hint` to your component to get it to properly render with SSR."
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<typeof this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleValueOrCheckedChange"
            },
            {
              "kind": "method",
              "name": "handleDefaultCheckedChange"
            },
            {
              "kind": "method",
              "name": "handleStateChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the switch."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the switch."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the switch."
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "stateValue",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "assumeInteractionOn",
              "type": {
                "text": "string[]"
              },
              "default": "['input']",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueHasChanged",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasInteracted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customError",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emittedEvents",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "states",
              "type": {
                "text": "CustomStateSet"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emitInvalid",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInteraction",
              "privacy": "private",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationTarget",
              "type": {
                "text": "undefined | HTMLElement"
              },
              "description": "Override this to change where constraint validation popups are anchored.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setValidity>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomStates",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Do not use this when creating a \"Validator\". This is intended for end users of components.\nWe track manually defined custom errors so we don't clear them on accident in our validators.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "isDisabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "reason",
                  "type": {
                    "text": "'autocomplete' | 'restore'"
                  }
                }
              ],
              "description": "Called when the browser is trying to restore element’s state to state in which case reason is \"restore\", or when\nthe browser is trying to fulfill autofill on behalf of user in which case reason is \"autocomplete\". In the case of\n\"restore\", state is a string, File, or FormData object previously set as the second argument to setFormValue.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "allValidators",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidity",
              "description": "Reset validity is a way of removing manual custom errors and native validation.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "description": "Emitted when the control's checked state changes."
            },
            {
              "name": "input",
              "type": {
                "text": "InputEvent"
              },
              "description": "Emitted when the control receives input."
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "blur"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "focus"
            },
            {
              "description": "Emitted when the form control has been checked for validity and its constraints aren't satisfied.",
              "name": "wa-invalid"
            },
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeFormAssociatedElement",
            "module": "/src/internal/webawesome-form-associated-element.js"
          },
          "summary": "Switches allow the user to toggle an option on or off."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaSwitch",
            "module": "src/components/switch/switch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/spinner/spinner.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaSpinner",
          "cssProperties": [
            {
              "description": "The width of the track.",
              "name": "--track-width"
            },
            {
              "description": "The color of the track.",
              "name": "--track-color"
            },
            {
              "description": "The color of the spinner's indicator.",
              "name": "--indicator-color"
            },
            {
              "description": "The time it takes for the spinner to complete one animation cycle.",
              "name": "--speed"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Spinners are used to show the progress of an indeterminate operation.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaSpinner",
            "module": "src/components/spinner/spinner.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tab/tab.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaTab",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The tab's label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "attrId",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "readonly": true,
              "default": "++id"
            },
            {
              "kind": "field",
              "name": "componentId",
              "privacy": "private",
              "readonly": true,
              "default": "`wa-tab-${this.attrId}`"
            },
            {
              "kind": "field",
              "name": "tab",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the tab panel this tab is associated with. The panel must be located in the same tab group."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the tab and prevents selection."
            },
            {
              "kind": "method",
              "name": "handleActiveChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Tabs are used inside [tab groups](/docs/components/tab-group) to represent and activate [tab panels](/docs/components/tab-panel).",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaTab",
            "module": "src/components/tab/tab.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tab-group/tab-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaTabGroup",
          "cssProperties": [
            {
              "description": "The color of the active tab indicator.",
              "name": "--indicator-color"
            },
            {
              "description": "The color of the indicator's track (the line that separates tabs from panels).",
              "name": "--track-color"
            },
            {
              "description": "The width of the indicator's track (the line that separates tabs from panels).",
              "name": "--track-width"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The tab group's navigation container where tabs are slotted in.",
              "name": "nav"
            },
            {
              "description": "The container that wraps the tabs.",
              "name": "tabs"
            },
            {
              "description": "The tab group's body where tab panels are slotted in.",
              "name": "body"
            },
            {
              "description": "The previous/next scroll buttons that show when tabs are scrollable, a `<wa-button>`.",
              "name": "scroll-button"
            },
            {
              "description": "The starting scroll button.",
              "name": "scroll-button-start"
            },
            {
              "description": "The ending scroll button.",
              "name": "scroll-button-end"
            },
            {
              "description": "The scroll button's exported `base` part.",
              "name": "scroll-button__base"
            }
          ],
          "slots": [
            {
              "description": "Used for grouping tab panels in the tab group. Must be `<wa-tab-panel>` elements.",
              "name": ""
            },
            {
              "description": "Used for grouping tabs in the tab group. Must be `<wa-tab>` elements. Note that `<wa-tab>` will set this slot on itself automatically.",
              "name": "nav"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "activeTab",
              "type": {
                "text": "WaTab | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "mutationObserver",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "tabs",
              "type": {
                "text": "WaTab[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "focusableTabs",
              "type": {
                "text": "WaTab[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "panels",
              "type": {
                "text": "WaTabPanel[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "tabGroup",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "nav",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "hasScrollControls",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the active tab."
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'bottom' | 'start' | 'end'"
              },
              "default": "'top'",
              "description": "The placement of the tabs."
            },
            {
              "kind": "field",
              "name": "activation",
              "type": {
                "text": "'auto' | 'manual'"
              },
              "default": "'auto'",
              "description": "When set to auto, navigating tabs with the arrow keys will instantly show the corresponding tab panel. When set to\nmanual, the tab will receive focus but will not show until the user presses spacebar or enter."
            },
            {
              "kind": "field",
              "name": "withoutScrollControls",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the scroll arrows that appear when tabs overflow."
            },
            {
              "kind": "method",
              "name": "getAllTabs",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getAllPanels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getActiveTab",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "findNextFocusableTab",
              "privacy": "private",
              "parameters": [
                {
                  "name": "currentIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "'forward' | 'backward'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleScrollToStart",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleScrollToEnd",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setActiveTab",
              "privacy": "private",
              "parameters": [
                {
                  "name": "tab",
                  "type": {
                    "text": "WaTab"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "{ emitEvents?: boolean; scrollBehavior?: 'auto' | 'smooth' }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setAriaLabels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "syncTabsAndPanels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateActiveTab"
            },
            {
              "kind": "method",
              "name": "updateScrollControls"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "type": {
                "text": "{ name: String }"
              },
              "description": "Emitted when a tab is shown.",
              "name": "wa-tab-show"
            },
            {
              "type": {
                "text": "{ name: String }"
              },
              "description": "Emitted when a tab is hidden.",
              "name": "wa-tab-hide"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Tab groups organize content into a container that shows one section at a time."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaTabGroup",
            "module": "src/components/tab-group/tab-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tab-panel/tab-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaTabPanel",
          "cssProperties": [
            {
              "description": "The tab panel's padding.",
              "name": "--padding"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The tab panel's content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "attrId",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "readonly": true,
              "default": "++id"
            },
            {
              "kind": "field",
              "name": "componentId",
              "privacy": "private",
              "readonly": true,
              "default": "`wa-tab-panel-${this.attrId}`"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The tab panel's name."
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, the tab panel will be shown."
            },
            {
              "kind": "method",
              "name": "handleActiveChange"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Tab panels are used inside [tab groups](/docs/components/tab-group) to display tabbed content.",
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaTabPanel",
            "module": "src/components/tab-panel/tab-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tag/tag.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaTag",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The tag's content.",
              "name": "content"
            },
            {
              "description": "The tag's remove button, a `<wa-button>`.",
              "name": "remove-button"
            },
            {
              "description": "The remove button's exported `base` part.",
              "name": "remove-button__base"
            }
          ],
          "slots": [
            {
              "description": "The tag's content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "[styles, variantStyles, sizeStyles]",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'brand' | 'neutral' | 'success' | 'warning' | 'danger'"
              },
              "default": "'neutral'",
              "description": "The tag's theme variant. Defaults to `neutral` if not within another element with a variant."
            },
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "'accent' | 'outlined accent' | 'filled' | 'outlined' | 'outlined filled'"
              },
              "default": "'outlined filled'",
              "description": "The tag's visual appearance."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The tag's size."
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style tag with rounded edges."
            },
            {
              "kind": "field",
              "name": "withRemove",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the tag removable and shows a remove button."
            },
            {
              "kind": "method",
              "name": "handleRemoveClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "description": "Emitted when the remove button is activated.",
              "name": "wa-remove"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Tags are used as labels to organize things or to indicate a selection."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaTag",
            "module": "src/components/tag/tag.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/textarea/textarea.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaTextarea",
          "cssParts": [
            {
              "description": "The label",
              "name": "label"
            },
            {
              "description": "The input's wrapper.",
              "name": "form-control-input"
            },
            {
              "description": "The hint's wrapper.",
              "name": "hint"
            },
            {
              "description": "The internal `<textarea>` control.",
              "name": "textarea"
            },
            {
              "description": "The wrapper around the `<textarea>` control.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The textarea's label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "Text that describes how to use the input. Alternatively, you can use the `hint` attribute.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              },
              "default": "[styles, formControlStyles, sizeStyles]"
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "default": "[]",
              "static": true,
              "description": "Validators are static because they have `observedAttributes`, essentially attributes to \"watch\"\nfor changes. Whenever these attributes change, we want to be notified and update the validator.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "assumeInteractionOn",
              "type": {
                "text": "string[]"
              },
              "default": "['blur', 'input']",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'hint', 'label')"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "(HTMLElement & { value: unknown }) | HTMLInputElement | HTMLTextAreaElement | undefined"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "base",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "sizeAdjuster",
              "type": {
                "text": "HTMLTextAreaElement"
              }
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "The name of the textarea, submitted as a name/value pair with form data.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The current value of the input, submitted as a name/value pair with form data."
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              },
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The textarea's size."
            },
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "'filled' | 'outlined'"
              },
              "default": "'outlined'",
              "description": "The textarea's visual appearance."
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The textarea's label. If you need to display HTML, use the `label` slot instead."
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The textarea's hint. If you need to display HTML, use the `hint` slot instead."
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the input is empty."
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "4",
              "description": "The number of rows to display by default."
            },
            {
              "kind": "field",
              "name": "resize",
              "type": {
                "text": "'none' | 'vertical' | 'horizontal' | 'both' | 'auto'"
              },
              "default": "'vertical'",
              "description": "Controls how the textarea can be resized."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the textarea.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the textarea readonly."
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "null"
              },
              "default": "null",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work."
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the textarea a required field.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid."
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid."
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user."
            },
            {
              "kind": "field",
              "name": "autocorrect",
              "type": {
                "text": "string"
              },
              "description": "Indicates whether the browser's autocorrect feature is on or off."
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\n[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values."
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the input should receive focus on page load."
            },
            {
              "kind": "field",
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards."
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Enables spell checking on the textarea."
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\nkeyboard on supportive devices."
            },
            {
              "kind": "field",
              "name": "withLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used for SSR. If you're slotting in a `label` element, make sure to set this to `true`."
            },
            {
              "kind": "field",
              "name": "withHint",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used for SSR. If you're slotting in a `hint` element, make sure to set this to `true`."
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setTextareaDimensions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleRowsChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the textarea."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the textarea."
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects all the text in the textarea."
            },
            {
              "kind": "method",
              "name": "scrollPosition",
              "return": {
                "type": {
                  "text": "{ top: number; left: number } | undefined"
                }
              },
              "parameters": [
                {
                  "name": "position",
                  "optional": true,
                  "type": {
                    "text": "{ top?: number; left?: number }"
                  }
                }
              ],
              "description": "Gets or sets the textarea's scroll position."
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "parameters": [
                {
                  "name": "selectionStart",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionEnd",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionDirection",
                  "default": "'none'",
                  "type": {
                    "text": "'forward' | 'backward' | 'none'"
                  }
                }
              ],
              "description": "Sets the start and end positions of the text selection (0-based)."
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "'preserve'",
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces a range of text with a new string."
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueHasChanged",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasInteracted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customError",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emittedEvents",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "states",
              "type": {
                "text": "CustomStateSet"
              },
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "emitInvalid",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInteraction",
              "privacy": "private",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationTarget",
              "type": {
                "text": "undefined | HTMLElement"
              },
              "description": "Override this to change where constraint validation popups are anchored.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setValidity>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomStates",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Do not use this when creating a \"Validator\". This is intended for end users of components.\nWe track manually defined custom errors so we don't clear them on accident in our validators.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "isDisabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "reason",
                  "type": {
                    "text": "'autocomplete' | 'restore'"
                  }
                }
              ],
              "description": "Called when the browser is trying to restore element’s state to state in which case reason is \"restore\", or when\nthe browser is trying to fulfill autofill on behalf of user in which case reason is \"autocomplete\". In the case of\n\"restore\", state is a string, File, or FormData object previously set as the second argument to setFormValue.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<typeof this.internals.setFormValue>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "allValidators",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidity",
              "description": "Reset validity is a way of removing manual custom errors and native validation.",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "inheritedFrom": {
                "name": "WebAwesomeFormAssociatedElement",
                "module": "src/internal/webawesome-form-associated-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control loses focus.",
              "name": "blur"
            },
            {
              "description": "Emitted when an alteration to the control's value is committed by the user.",
              "name": "change"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "focus"
            },
            {
              "description": "Emitted when the control receives input.",
              "name": "input"
            },
            {
              "description": "Emitted when the form control has been checked for validity and its constraints aren't satisfied.",
              "name": "wa-invalid"
            },
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "cssStates": [
            {
              "description": "The textarea is empty.",
              "name": "blank"
            }
          ],
          "superclass": {
            "name": "WebAwesomeFormAssociatedElement",
            "module": "/src/internal/webawesome-form-associated-element.js"
          },
          "summary": "Textareas collect data from the user and allow multiple lines of text."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaTextarea",
            "module": "src/components/textarea/textarea.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tooltip/tooltip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaTooltip",
          "cssProperties": [
            {
              "description": "The maximum width of the tooltip before its content will wrap.",
              "name": "--max-width"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper, an `<wa-popup>` element.",
              "name": "base"
            },
            {
              "description": "The popup's exported `popup` part. Use this to target the tooltip's popup container.",
              "name": "base__popup"
            },
            {
              "description": "The popup's exported `arrow` part. Use this to target the tooltip's arrow.",
              "name": "base__arrow"
            },
            {
              "description": "The tooltip's body where its content is rendered.",
              "name": "body"
            }
          ],
          "slots": [
            {
              "description": "The tooltip's default slot where any content should live. Interactive content should be avoided.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'wa-popup': WaPopup }"
            },
            {
              "kind": "field",
              "name": "hoverTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "WaPopup"
              }
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
              },
              "default": "'top'",
              "description": "The preferred placement of the tooltip. Note that the actual placement may vary as needed to keep the tooltip\ninside of the viewport."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the tooltip so it won't show when triggered."
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "8",
              "description": "The distance in pixels from which to offset the tooltip away from its target."
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the tooltip is open. You can use this in lieu of the show/hide methods."
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the tooltip along its target."
            },
            {
              "kind": "field",
              "name": "showDelay",
              "type": {
                "text": "number"
              },
              "default": "150",
              "description": "The amount of time to wait before showing the tooltip when the user mouses in."
            },
            {
              "kind": "field",
              "name": "hideDelay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of time to wait before hiding the tooltip when the user mouses out.."
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "default": "'hover focus'",
              "description": "Controls how the tooltip is activated. Possible options include `click`, `hover`, `focus`, and `manual`. Multiple\noptions can be passed by separating them with a space. When manual is used, the tooltip must be activated\nprogrammatically."
            },
            {
              "kind": "field",
              "name": "for",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "null | Element"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "eventController",
              "privacy": "private",
              "default": "new AbortController()"
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleMouseOver",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleMouseOut",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hasTrigger",
              "privacy": "private",
              "parameters": [
                {
                  "name": "triggerType",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "handleForChange"
            },
            {
              "kind": "method",
              "name": "handleOptionsChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the tooltip."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the tooltip"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "description": "Emitted when the tooltip begins to show.",
              "name": "wa-show"
            },
            {
              "description": "Emitted after the tooltip has shown and all animations are complete.",
              "name": "wa-after-show"
            },
            {
              "description": "Emitted when the tooltip begins to hide.",
              "name": "wa-hide"
            },
            {
              "description": "Emitted after the tooltip has hidden and all animations are complete.",
              "name": "wa-after-hide"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Tooltips display additional information based on a specific action."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaTooltip",
            "module": "src/components/tooltip/tooltip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree/tree.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaTree",
          "cssProperties": [
            {
              "description": "The size of the indentation for nested items.",
              "name": "--indent-size",
              "default": "var(--wa-spacing-m)"
            },
            {
              "description": "The color of the indentation line.",
              "name": "--indent-guide-color",
              "default": "var(--wa-color-surface-border)"
            },
            {
              "description": "The amount of vertical spacing to leave between the top and bottom of the indentation line's starting position.",
              "name": "--indent-guide-offset",
              "default": "0"
            },
            {
              "description": "The style of the indentation line, e.g. solid, dotted, dashed.",
              "name": "--indent-guide-style",
              "default": "solid"
            },
            {
              "description": "The width of the indentation line.",
              "name": "--indent-guide-width",
              "default": "0"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "The icon to show when the tree item is expanded. Works best with `<wa-icon>`.",
              "name": "expand-icon"
            },
            {
              "description": "The icon to show when the tree item is collapsed. Works best with `<wa-icon>`.",
              "name": "collapse-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "expandedIconSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "collapsedIconSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "'single' | 'multiple' | 'leaf'"
              },
              "default": "'single'",
              "description": "The selection behavior of the tree. Single selection allows only one node to be selected at a time. Multiple\ndisplays checkboxes and allows more than one node to be selected. Leaf allows only leaf nodes to be selected."
            },
            {
              "kind": "field",
              "name": "lastFocusedItem",
              "type": {
                "text": "WaTreeItem | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "mutationObserver",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "clickTarget",
              "type": {
                "text": "WaTreeItem | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "method",
              "name": "getExpandButtonIcon",
              "privacy": "private",
              "parameters": [
                {
                  "name": "status",
                  "type": {
                    "text": "'expand' | 'collapse'"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "initTreeItem",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleTreeChanged",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "selectItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "selectedItem",
                  "type": {
                    "text": "WaTreeItem"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getAllTreeItems",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focusItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "WaTreeItem | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleFocusOut",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleFocusIn",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSelectionChange"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "type": {
                "text": "{ selection: WaTreeItem[] }"
              },
              "description": "Emitted when a tree item is selected or deselected.",
              "name": "wa-selection-change"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Trees allow you to display a hierarchical list of selectable [tree items](/docs/components/tree-item). Items with children can be expanded and collapsed as desired by the user."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaTree",
            "module": "src/components/tree/tree.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree-item/tree-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaTreeItem",
          "cssProperties": [
            {
              "description": "The animation duration when expanding tree items.",
              "name": "--show-duration",
              "default": "200ms"
            },
            {
              "description": "The animation duration when collapsing tree items.",
              "name": "--hide-duration",
              "default": "200ms"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The tree item's container. This element wraps everything except slotted tree item children.",
              "name": "item"
            },
            {
              "description": "The tree item's indentation container.",
              "name": "indentation"
            },
            {
              "description": "The container that wraps the tree item's expand button and spinner.",
              "name": "expand-button"
            },
            {
              "description": "The spinner that shows when a lazy tree item is in the loading state.",
              "name": "spinner"
            },
            {
              "description": "The spinner's base part.",
              "name": "spinner__base"
            },
            {
              "description": "The tree item's label.",
              "name": "label"
            },
            {
              "description": "The container that wraps the tree item's nested children.",
              "name": "children"
            },
            {
              "description": "The checkbox that shows when using multiselect.",
              "name": "checkbox"
            },
            {
              "description": "The checkbox's exported `base` part.",
              "name": "checkbox__base"
            },
            {
              "description": "The checkbox's exported `control` part.",
              "name": "checkbox__control"
            },
            {
              "description": "The checkbox's exported `checked-icon` part.",
              "name": "checkbox__checked-icon"
            },
            {
              "description": "The checkbox's exported `indeterminate-icon` part.",
              "name": "checkbox__indeterminate-icon"
            },
            {
              "description": "The checkbox's exported `label` part.",
              "name": "checkbox__label"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "The icon to show when the tree item is expanded.",
              "name": "expand-icon"
            },
            {
              "description": "The icon to show when the tree item is collapsed.",
              "name": "collapse-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "isTreeItem",
              "static": true,
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "Node"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isLeaf",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "selectable",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Expands the tree item."
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the tree item in a selected state."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the tree item."
            },
            {
              "kind": "field",
              "name": "lazy",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables lazy loading behavior."
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "childrenSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "itemElement",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "childrenContainer",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "expandButtonSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "animateCollapse",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isNestedItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleChildrenSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValueMap<WaTreeItem> | Map<PropertyKey, unknown>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "animateExpand",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleLoadingChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleExpandedState"
            },
            {
              "kind": "method",
              "name": "handleIndeterminateStateChange"
            },
            {
              "kind": "method",
              "name": "handleSelectedChange"
            },
            {
              "kind": "method",
              "name": "handleExpandedChange"
            },
            {
              "kind": "method",
              "name": "handleExpandAnimation"
            },
            {
              "kind": "method",
              "name": "handleLazyChange"
            },
            {
              "kind": "method",
              "name": "getChildrenItems",
              "return": {
                "type": {
                  "text": "WaTreeItem[]"
                }
              },
              "parameters": [
                {
                  "name": "{ includeDisabled = true }",
                  "default": "{}",
                  "type": {
                    "text": "{ includeDisabled?: boolean }"
                  }
                }
              ],
              "description": "Gets all the nested tree items in this node."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "description": "Emitted when the tree item expands.",
              "name": "wa-expand"
            },
            {
              "description": "Emitted after the tree item expands and all animations are complete.",
              "name": "wa-after-expand"
            },
            {
              "description": "Emitted when the tree item collapses.",
              "name": "wa-collapse"
            },
            {
              "description": "Emitted after the tree item collapses and all animations are complete.",
              "name": "wa-after-collapse"
            },
            {
              "description": "Emitted when the tree item's lazy state changes.",
              "name": "wa-lazy-change"
            },
            {
              "description": "Emitted when a lazy item is selected. Use this event to asynchronously load data and append items to the tree before expanding. After appending new items, remove the `lazy` attribute to remove the loading state and update the tree.",
              "name": "wa-lazy-load"
            }
          ],
          "cssStates": [
            {
              "description": "Applied when the tree item is disabled.",
              "name": "disabled"
            },
            {
              "description": "Applied when the tree item is expanded.",
              "name": "expanded"
            },
            {
              "description": "Applied when the selection is indeterminate.",
              "name": "indeterminate"
            },
            {
              "description": "Applied when the tree item is selected.",
              "name": "selected"
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "A tree item serves as a hierarchical node that lives inside a [tree](/docs/components/tree)."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaTreeItem",
            "module": "src/components/tree-item/tree-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/zoomable-frame/zoomable-frame.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WaZoomableFrame",
          "cssParts": [
            {
              "description": "The internal `<iframe>` element.",
              "name": "iframe"
            },
            {
              "description": "The container that surrounds zoom control buttons.",
              "name": "controls"
            },
            {
              "description": "The zoom in button.",
              "name": "zoom-in-button"
            },
            {
              "description": "The zoom out button.",
              "name": "zoom-out-button"
            }
          ],
          "slots": [
            {
              "description": "The slot that contains the zoom in icon.",
              "name": "zoom-in-icon"
            },
            {
              "description": "The slot that contains the zoom out icon.",
              "name": "zoom-out-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "css",
              "type": {
                "text": "CSSResultGroup | CSSResult | string | (CSSResult | string)[] | undefined"
              },
              "static": true,
              "description": "One or more CSS files to include in the component's shadow root. Host styles are automatically prepended. We use\nthis instead of Lit's styles property because we're importing CSS files as strings and need to convert them using\nunsafeCSS.",
              "default": "styles",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "availableZoomLevels",
              "type": {
                "text": "number[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "iframe",
              "type": {
                "text": "HTMLIFrameElement"
              }
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "The URL of the content to display."
            },
            {
              "kind": "field",
              "name": "srcdoc",
              "type": {
                "text": "string"
              },
              "description": "Inline HTML to display."
            },
            {
              "kind": "field",
              "name": "allowfullscreen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows fullscreen mode."
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "'eager' | 'lazy'"
              },
              "default": "'eager'",
              "description": "Controls iframe loading behavior."
            },
            {
              "kind": "field",
              "name": "referrerpolicy",
              "type": {
                "text": "string"
              },
              "description": "Controls referrer information."
            },
            {
              "kind": "field",
              "name": "sandbox",
              "type": {
                "text": "string"
              },
              "description": "Security restrictions for the iframe."
            },
            {
              "kind": "field",
              "name": "zoom",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The current zoom of the frame, e.g. 0 = 0% and 1 = 100%."
            },
            {
              "kind": "field",
              "name": "zoomLevels",
              "type": {
                "text": "string"
              },
              "default": "'25% 50% 75% 100% 125% 150% 175% 200%'",
              "description": "The zoom levels to step through when using zoom controls. This does not restrict programmatic changes to the zoom."
            },
            {
              "kind": "field",
              "name": "withoutControls",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes the zoom controls."
            },
            {
              "kind": "field",
              "name": "withoutInteraction",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables interaction when present."
            },
            {
              "kind": "field",
              "name": "contentWindow",
              "type": {
                "text": "Window | null"
              },
              "privacy": "public",
              "description": "Returns the internal iframe's `window` object. (Readonly property)",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "contentDocument",
              "type": {
                "text": "Document | null"
              },
              "privacy": "public",
              "description": "Returns the internal iframe's `document` object. (Readonly property)",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "parseZoomLevels",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number[]"
                }
              },
              "parameters": [
                {
                  "name": "zoomLevelsString",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getCurrentZoomIndex",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "isZoomInDisabled",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "isZoomOutDisabled",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "zoomIn",
              "privacy": "public",
              "description": "Zooms in to the next available zoom level."
            },
            {
              "kind": "method",
              "name": "zoomOut",
              "privacy": "public",
              "description": "Zooms out to the previous available zoom level."
            },
            {
              "kind": "method",
              "name": "handleLoad",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleError",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultGroup"
              },
              "static": true,
              "description": "Override the default styles property to fetch and convert string CSS files. Components can override this behavior\nby setting their own `static styles = []` property.",
              "readonly": true,
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "#hasRecordedInitialProperties",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialReflectedProperties",
              "type": {
                "text": "Map<string, unknown>"
              },
              "default": "new Map()",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "didSSR",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['willUpdate']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Parameters<LitElement['firstUpdated']>[0]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "customStates",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "default": "{ /** Adds or removes the specified custom state. */ set: (customState: string, active: boolean) => { if (!Boolean(this.internals?.states)) return; if (active) { this.internals.states.add(customState); } else { this.internals.states.delete(customState); } }, /** Determines whether or not the element currently has the specified state. */ has: (customState: string) => { if (!Boolean(this.internals?.states)) return false; return this.internals.states.has(customState); }, }",
              "description": "Methods for setting and checking custom states.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "relayNativeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "eventOptions",
                  "optional": true,
                  "type": {
                    "text": "EventInit"
                  }
                }
              ],
              "description": "Given a native event, this function cancels it and dispatches it again from the host element using the desired\nevent options.",
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "events": [
            {
              "name": "load",
              "type": {
                "text": "Event"
              },
              "description": "Emitted when the internal iframe when it finishes loading."
            },
            {
              "name": "error",
              "type": {
                "text": "Event"
              },
              "description": "Emitted from the internal iframe when it fails to load."
            },
            {
              "type": {},
              "inheritedFrom": {
                "name": "WebAwesomeElement",
                "module": "src/internal/webawesome-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "WebAwesomeElement",
            "module": "/src/internal/webawesome-element.js"
          },
          "summary": "Zoomable frames render iframe content with zoom and interaction controls."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WaZoomableFrame",
            "module": "src/components/zoomable-frame/zoomable-frame.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/test/data-testid-helpers.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "queryByTestId",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "container",
              "type": {
                "text": "HTMLElement"
              },
              "description": "A parent element of the DOM element to find"
            },
            {
              "name": "testId",
              "type": {
                "text": "string"
              },
              "description": "The value of the `data-testid` attribute of the component to find."
            }
          ],
          "description": "Allows you to find a DOM element based on the value of its `data-testid` attribute.\nThis attribute can be used to decouple identifying dom elements for testing from\nstyling (which is typically done via class selectors) or other ids which serve\ndifferent purposes.\nSee also https://kentcdodds.com/blog/making-your-ui-tests-resilient-to-change\nInspired by https://testing-library.com/docs/queries/bytestid/"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryByTestId",
          "declaration": {
            "name": "queryByTestId",
            "module": "src/internal/test/data-testid-helpers.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/test/element-visible-overflow.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isElementVisibleFromOverflow",
          "return": {
            "type": {
              "text": "Boolean"
            }
          },
          "parameters": [
            {
              "name": "outerElement",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The parent element"
            },
            {
              "name": "innerElement",
              "type": {
                "text": "HTMLElement"
              },
              "description": "the child element"
            }
          ],
          "description": "Given a parent element featuring `overflow: hidden` and a child element inside the parent, this\nfunction determines whether the child will be visible taking only the overflow of the parent into account\nId does NOT check whether it is hidden or overlapped by another element\nIt basically checks whether the bounding rects of the parent and the child overlap"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isElementVisibleFromOverflow",
          "declaration": {
            "name": "isElementVisibleFromOverflow",
            "module": "src/internal/test/element-visible-overflow.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/test/fixture.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "clientFixture",
          "parameters": [
            {
              "name": "template",
              "type": {
                "text": "TemplateResult | string"
              }
            }
          ],
          "description": "Loads up a fixture and loads all client components"
        },
        {
          "kind": "function",
          "name": "hydratedFixture",
          "parameters": [
            {
              "name": "template",
              "type": {
                "text": "TemplateResult"
              }
            }
          ],
          "description": "Loads up a fixture with SSR, using all unbundled modules, then when it finishes, calls hydration scripts, and then when hydration completes, returns the element."
        },
        {
          "kind": "variable",
          "name": "fixtures"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "clientFixture",
          "declaration": {
            "name": "clientFixture",
            "module": "src/internal/test/fixture.ts"
          }
        },
        {
          "kind": "js",
          "name": "hydratedFixture",
          "declaration": {
            "name": "hydratedFixture",
            "module": "src/internal/test/fixture.ts"
          }
        },
        {
          "kind": "js",
          "name": "fixtures",
          "declaration": {
            "name": "fixtures",
            "module": "src/internal/test/fixture.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/test/form-control-base-tests.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "runFormControlBaseTests",
          "parameters": [
            {
              "name": "tagNameOrConfig",
              "type": {
                "text": "| string\n    | {\n        tagName: string;\n        init?: (control: T) => void;\n        variantName: string;\n      }"
              }
            }
          ],
          "description": "Runs a set of generic tests for Web Awesome form controls"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "runFormControlBaseTests",
          "declaration": {
            "name": "runFormControlBaseTests",
            "module": "src/internal/test/form-control-base-tests.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/test/pointer-utilities.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "isSafari"
        },
        {
          "kind": "function",
          "name": "clickOnElement",
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "Element"
              }
            },
            {
              "name": "position",
              "default": "'center'",
              "type": {
                "text": "'top' | 'right' | 'bottom' | 'left' | 'center'"
              }
            },
            {
              "name": "offsetX",
              "default": "0"
            },
            {
              "name": "offsetY",
              "default": "0"
            }
          ],
          "description": "A testing utility that measures an element's position and clicks on it."
        },
        {
          "kind": "function",
          "name": "moveMouseOnElement",
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "Element"
              }
            },
            {
              "name": "position",
              "default": "'center'",
              "type": {
                "text": "'top' | 'right' | 'bottom' | 'left' | 'center'"
              }
            },
            {
              "name": "offsetX",
              "default": "0"
            },
            {
              "name": "offsetY",
              "default": "0"
            }
          ],
          "description": "A testing utility that moves the mouse onto an element."
        },
        {
          "kind": "function",
          "name": "dragElement",
          "return": {
            "type": {
              "text": "Promise<void>"
            }
          },
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "Element"
              }
            },
            {
              "name": "deltaX",
              "default": "0"
            },
            {
              "name": "deltaY",
              "default": "0"
            },
            {
              "name": "callbacks",
              "default": "{}",
              "type": {
                "text": "{\n    afterMouseDown?: () => void | Promise<void>;\n    afterMouseMove?: () => void | Promise<void>;\n  }"
              }
            }
          ],
          "description": "A testing utility that drags an element with the mouse."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isSafari",
          "declaration": {
            "name": "isSafari",
            "module": "src/internal/test/pointer-utilities.ts"
          }
        },
        {
          "kind": "js",
          "name": "clickOnElement",
          "declaration": {
            "name": "clickOnElement",
            "module": "src/internal/test/pointer-utilities.ts"
          }
        },
        {
          "kind": "js",
          "name": "moveMouseOnElement",
          "declaration": {
            "name": "moveMouseOnElement",
            "module": "src/internal/test/pointer-utilities.ts"
          }
        },
        {
          "kind": "js",
          "name": "dragElement",
          "declaration": {
            "name": "dragElement",
            "module": "src/internal/test/pointer-utilities.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/test/wait-for-scrolling.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "waitForScrollingToEnd",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The element which is scrolled"
            },
            {
              "name": "timeoutInMs",
              "default": "500",
              "description": "A timeout in ms. If the timeout has elapsed, the promise rejects",
              "type": {
                "text": "numeric"
              }
            }
          ],
          "description": "Wait until an element has stopped scrolling\nThis considers the element to have stopped scrolling, as soon as it did not change its\nscroll position for 20 successive animation frames"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "waitForScrollingToEnd",
          "declaration": {
            "name": "waitForScrollingToEnd",
            "module": "src/internal/test/wait-for-scrolling.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/validators/custom-error-validator.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "CustomErrorValidator",
          "return": {
            "type": {
              "text": "Validator"
            }
          },
          "description": "This validator is for if you have an exact copy of your element in the shadow DOM. Rather than needing\ncustom translations and error messages, you can simply rely on the element \"formControl\" in your shadow dom."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CustomErrorValidator",
          "declaration": {
            "name": "CustomErrorValidator",
            "module": "src/internal/validators/custom-error-validator.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/validators/mirror-validator.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "MirrorValidator",
          "return": {
            "type": {
              "text": "Validator"
            }
          },
          "description": "This validator is for if you have an exact copy of your element in the shadow DOM. Rather than needing\ncustom translations and error messages, you can simply rely on the element \"formControl\" in your shadow dom."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MirrorValidator",
          "declaration": {
            "name": "MirrorValidator",
            "module": "src/internal/validators/mirror-validator.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/validators/required-validator.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "RequiredValidator",
          "return": {
            "type": {
              "text": "Validator"
            }
          },
          "parameters": [
            {
              "name": "options",
              "default": "{}",
              "type": {
                "text": "RequiredValidatorOptions"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RequiredValidator",
          "declaration": {
            "name": "RequiredValidator",
            "module": "src/internal/validators/required-validator.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/internal/validators/slider-validator.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "SliderValidator",
          "return": {
            "type": {
              "text": "Validator<WaSlider>"
            }
          },
          "description": "Comprehensive validator for sliders that handles required, range, and step validation"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SliderValidator",
          "declaration": {
            "name": "SliderValidator",
            "module": "src/internal/validators/slider-validator.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/animated-image/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "A component for displaying animated GIFs and WEBPs that play and pause on interaction."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaErrorEvent",
          "declaration": {
            "name": "WaErrorEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaLoadEvent",
          "declaration": {
            "name": "WaLoadEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/animated-image/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/animation/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Animate elements declaratively with nearly 100 baked-in presets, or roll your own with custom keyframes. Powered by the [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API)."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaCancelEvent",
          "declaration": {
            "name": "WaCancelEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaFinishEvent",
          "declaration": {
            "name": "WaFinishEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaStartEvent",
          "declaration": {
            "name": "WaStartEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/animation/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/badge/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Badges are used to draw attention and display statuses or counts."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/badge/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/avatar/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Avatars are used to represent a person or object."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaErrorEvent",
          "declaration": {
            "name": "WaErrorEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/avatar/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/breadcrumb-item/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Breadcrumb Items are used inside breadcrumbs to represent different links."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/breadcrumb-item/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/breadcrumb/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Breadcrumbs provide a group of links so users can easily navigate a website's hierarchy."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/breadcrumb/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/button/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Buttons represent actions that are available to the user."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaInvalidEvent",
          "declaration": {
            "name": "WaInvalidEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/button/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/button-group/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Button groups can be used to group related buttons into sections."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/button-group/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/callout/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Callouts are used to display important messages inline."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/callout/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/carousel/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Carousels display an arbitrary number of content slides along a horizontal or vertical axis."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaSlideChangeEvent",
          "declaration": {
            "name": "WaSlideChangeEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/carousel/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/carousel-item/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "A carousel item represent a slide within a carousel."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/carousel-item/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/card/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Cards can be used to group related subjects in a container."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/card/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/checkbox/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Checkboxes allow the user to toggle an option on or off."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaInvalidEvent",
          "declaration": {
            "name": "WaInvalidEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/checkbox/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/color-picker/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Color pickers allow the user to select a color."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaAfterHideEvent",
          "declaration": {
            "name": "WaAfterHideEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaAfterShowEvent",
          "declaration": {
            "name": "WaAfterShowEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaHideEvent",
          "declaration": {
            "name": "WaHideEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaInvalidEvent",
          "declaration": {
            "name": "WaInvalidEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaShowEvent",
          "declaration": {
            "name": "WaShowEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/color-picker/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/copy-button/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Copies text data to the clipboard when the user clicks the trigger."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaCopyEvent",
          "declaration": {
            "name": "WaCopyEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaErrorEvent",
          "declaration": {
            "name": "WaErrorEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/copy-button/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/comparison/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Compare visual differences between similar content with a sliding panel."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/comparison/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/details/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Details show a brief summary and expand to show additional content."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaAfterHideEvent",
          "declaration": {
            "name": "WaAfterHideEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaAfterShowEvent",
          "declaration": {
            "name": "WaAfterShowEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaHideEvent",
          "declaration": {
            "name": "WaHideEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaShowEvent",
          "declaration": {
            "name": "WaShowEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/details/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/divider/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Dividers are used to visually separate or group elements."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/divider/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/dialog/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Dialogs, sometimes called \"modals\", appear above the page and require the user's immediate attention."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaAfterHideEvent",
          "declaration": {
            "name": "WaAfterHideEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaAfterShowEvent",
          "declaration": {
            "name": "WaAfterShowEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaHideEvent",
          "declaration": {
            "name": "WaHideEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaShowEvent",
          "declaration": {
            "name": "WaShowEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/dialog/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/drawer/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Drawers slide in from a container to expose additional options and information."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaAfterHideEvent",
          "declaration": {
            "name": "WaAfterHideEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaAfterShowEvent",
          "declaration": {
            "name": "WaAfterShowEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaHideEvent",
          "declaration": {
            "name": "WaHideEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaShowEvent",
          "declaration": {
            "name": "WaShowEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/drawer/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/dropdown/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Dropdowns display a list of options that can be triggered by a button or other element. They support\nkeyboard navigation, submenus, and various customization options."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaAfterHideEvent",
          "declaration": {
            "name": "WaAfterHideEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaAfterShowEvent",
          "declaration": {
            "name": "WaAfterShowEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaHideEvent",
          "declaration": {
            "name": "WaHideEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaSelectEvent",
          "declaration": {
            "name": "WaSelectEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaShowEvent",
          "declaration": {
            "name": "WaShowEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/dropdown/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/dropdown-item/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Represents an individual item within a dropdown menu, supporting standard items, checkboxes, and submenus."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/dropdown-item/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/format-number/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Formats a number using the specified locale and options."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/format-number/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/format-date/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Formats a date/time using the specified locale and options."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/format-date/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/format-bytes/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Formats a number as a human readable bytes value."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/format-bytes/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/icon/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Icons are symbols that can be used to represent various options within an application."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaErrorEvent",
          "declaration": {
            "name": "WaErrorEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaLoadEvent",
          "declaration": {
            "name": "WaLoadEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/icon/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/include/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Includes give you the power to embed external HTML files into the page."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaErrorEvent",
          "declaration": {
            "name": "WaErrorEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaLoadEvent",
          "declaration": {
            "name": "WaLoadEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/include/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/mutation-observer/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "The Mutation Observer component offers a thin, declarative interface to the [`MutationObserver API`](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaMutationEvent",
          "declaration": {
            "name": "WaMutationEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/mutation-observer/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/input/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Inputs collect data from the user."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaClearEvent",
          "declaration": {
            "name": "WaClearEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaInvalidEvent",
          "declaration": {
            "name": "WaInvalidEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/input/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/option/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Options define the selectable items within a select component."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/option/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/page/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Pages offer an easy way to scaffold entire page layouts using minimal markup."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/page/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/popover/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Popovers display contextual content and interactive elements in a floating panel."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaAfterHideEvent",
          "declaration": {
            "name": "WaAfterHideEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaAfterShowEvent",
          "declaration": {
            "name": "WaAfterShowEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaHideEvent",
          "declaration": {
            "name": "WaHideEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaShowEvent",
          "declaration": {
            "name": "WaShowEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/popover/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/popup/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Popup is a utility that lets you declaratively anchor \"popup\" containers to another element."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaRepositionEvent",
          "declaration": {
            "name": "WaRepositionEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/popup/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/progress-bar/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Progress bars are used to show the status of an ongoing operation."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/progress-bar/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/progress-ring/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Progress rings are used to show the progress of a determinate operation in a circular fashion."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/progress-ring/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/qr-code/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Generates a [QR code](https://www.qrcode.com/) and renders it using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API)."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/qr-code/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/radio/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Radios allow the user to select a single option from a group."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/radio/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/rating/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Ratings give users a way to quickly view and provide feedback."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaHoverEvent",
          "declaration": {
            "name": "WaHoverEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/rating/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/relative-time/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Outputs a localized time phrase relative to the current date and time."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/relative-time/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/radio-group/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Radio groups are used to group multiple [radios](/docs/components/radio) so they function as a single form control."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaInvalidEvent",
          "declaration": {
            "name": "WaInvalidEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/radio-group/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/resize-observer/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "The Resize Observer component offers a thin, declarative interface to the [`ResizeObserver API`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaResizeEvent",
          "declaration": {
            "name": "WaResizeEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/resize-observer/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/scroller/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Scrollers create an accessible container while providing visual cues that help users identify and navigate\nthrough content that scrolls."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/scroller/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/select/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Selects allow you to choose items from a menu of predefined options."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaAfterHideEvent",
          "declaration": {
            "name": "WaAfterHideEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaAfterShowEvent",
          "declaration": {
            "name": "WaAfterShowEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaClearEvent",
          "declaration": {
            "name": "WaClearEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaHideEvent",
          "declaration": {
            "name": "WaHideEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaInvalidEvent",
          "declaration": {
            "name": "WaInvalidEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaShowEvent",
          "declaration": {
            "name": "WaShowEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/select/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/skeleton/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Skeletons are used to provide a visual representation of where content will eventually be drawn."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/skeleton/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/slider/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "description": "<wa-slider>",
          "summary": "Ranges allow the user to select a single value within a given range using a slider."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaInvalidEvent",
          "declaration": {
            "name": "WaInvalidEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/slider/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/spinner/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Spinners are used to show the progress of an indeterminate operation."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/spinner/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/tab/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Tabs are used inside [tab groups](/docs/components/tab-group) to represent and activate [tab panels](/docs/components/tab-panel)."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/tab/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/switch/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Switches allow the user to toggle an option on or off."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaInvalidEvent",
          "declaration": {
            "name": "WaInvalidEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/switch/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/tab-group/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Tab groups organize content into a container that shows one section at a time."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaTabHideEvent",
          "declaration": {
            "name": "WaTabHideEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaTabShowEvent",
          "declaration": {
            "name": "WaTabShowEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/tab-group/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/split-panel/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Split panels display two adjacent panels, allowing the user to reposition them."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaRepositionEvent",
          "declaration": {
            "name": "WaRepositionEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/split-panel/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/tab-panel/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Tab panels are used inside [tab groups](/docs/components/tab-group) to display tabbed content."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/tab-panel/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/tag/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Tags are used as labels to organize things or to indicate a selection."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaRemoveEvent",
          "declaration": {
            "name": "WaRemoveEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/tag/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/textarea/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Textareas collect data from the user and allow multiple lines of text."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaInvalidEvent",
          "declaration": {
            "name": "WaInvalidEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/textarea/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/tree/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Trees allow you to display a hierarchical list of selectable [tree items](/docs/components/tree-item). Items with children can be expanded and collapsed as desired by the user."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaSelectionChangeEvent",
          "declaration": {
            "name": "WaSelectionChangeEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/tree/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/tooltip/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Tooltips display additional information based on a specific action."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaAfterHideEvent",
          "declaration": {
            "name": "WaAfterHideEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaAfterShowEvent",
          "declaration": {
            "name": "WaAfterShowEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaHideEvent",
          "declaration": {
            "name": "WaHideEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaShowEvent",
          "declaration": {
            "name": "WaShowEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/tooltip/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/tree-item/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "A tree item serves as a hierarchical node that lives inside a [tree](/docs/components/tree)."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WaAfterCollapseEvent",
          "declaration": {
            "name": "WaAfterCollapseEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaAfterExpandEvent",
          "declaration": {
            "name": "WaAfterExpandEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaCollapseEvent",
          "declaration": {
            "name": "WaCollapseEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaExpandEvent",
          "declaration": {
            "name": "WaExpandEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaLazyChangeEvent",
          "declaration": {
            "name": "WaLazyChangeEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "WaLazyLoadEvent",
          "declaration": {
            "name": "WaLazyLoadEvent",
            "module": "../../events/events.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/tree-item/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/react/zoomable-frame/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "reactWrapper",
          "summary": "Zoomable frames render iframe content with zoom and interaction controls."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "reactWrapper",
            "module": "src/react/zoomable-frame/index.ts"
          }
        }
      ]
    }
  ]
}
